// Generated by Haxe 4.3.6
#ifndef INCLUDED_lime_media_vorbis_Vorbis
#define INCLUDED_lime_media_vorbis_Vorbis

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,media,vorbis,Vorbis)


#undef EFAULT
#undef EINVAL

namespace lime{
namespace media{
namespace vorbis{


class HXCPP_CLASS_ATTRIBUTES Vorbis_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Vorbis_obj OBJ_;
		Vorbis_obj();

	public:
		enum { _hx_ClassId = 0x3b841e35 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.media.vorbis.Vorbis")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"lime.media.vorbis.Vorbis"); }

		inline static ::hx::ObjectPtr< Vorbis_obj > __new() {
			::hx::ObjectPtr< Vorbis_obj > __this = new Vorbis_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Vorbis_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Vorbis_obj *__this = (Vorbis_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Vorbis_obj), false, "lime.media.vorbis.Vorbis"));
			*(void **)__this = Vorbis_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Vorbis_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Vorbis",73,77,d0,97); }

		static void __boot();
		static int FALSE;
		static int _hx_EOF;
		static int HOLE;
		static int EREAD;
		static int EFAULT;
		static int EIMPL;
		static int EINVAL;
		static int ENOTVORBIS;
		static int EBADHEADER;
		static int EVERSION;
		static int ENOTAUDIO;
		static int EBADPACKET;
		static int EBADLINK;
		static int ENOSEEK;
};

} // end namespace lime
} // end namespace media
} // end namespace vorbis

#endif /* INCLUDED_lime_media_vorbis_Vorbis */ 
