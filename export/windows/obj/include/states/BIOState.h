// Generated by Haxe 4.3.6
#ifndef INCLUDED_states_BIOState
#define INCLUDED_states_BIOState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(states,BIOState)

namespace states{


class HXCPP_CLASS_ATTRIBUTES BIOState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef BIOState_obj OBJ_;
		BIOState_obj();

	public:
		enum { _hx_ClassId = 0x793d7747 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.BIOState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.BIOState"); }
		static ::hx::ObjectPtr< BIOState_obj > __new();
		static ::hx::ObjectPtr< BIOState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BIOState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BIOState",49,b0,0a,48); }

		 ::flixel::text::FlxText textMBR;
		 ::flixel::text::FlxText textBIOS;
		 ::Dynamic o;
		bool IsBootReady;
		int TimeDelay;
		 ::flixel::FlxSprite bg;
		bool IsBios;
		 ::flixel::group::FlxTypedGroup itemsBios;
		 ::flixel::ui::FlxButton autombr;
		 ::flixel::text::FlxText _hx_bool;
		 ::flixel::text::FlxText desc;
		 ::flixel::ui::FlxButton fastboot;
		bool isFirst;
		void AddStartUI();
		::Dynamic AddStartUI_dyn();

		void AddBIOSUI();
		::Dynamic AddBIOSUI_dyn();

		void create();

		void update(Float elapsed);

};

} // end namespace states

#endif /* INCLUDED_states_BIOState */ 
