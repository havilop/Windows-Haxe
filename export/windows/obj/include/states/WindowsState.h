// Generated by Haxe 4.3.6
#ifndef INCLUDED_states_WindowsState
#define INCLUDED_states_WindowsState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(App)
HX_DECLARE_CLASS0(Logon)
HX_DECLARE_CLASS0(TaskBar)
HX_DECLARE_CLASS1(applications,ConsoleApp)
HX_DECLARE_CLASS1(applications,SettingsApplication)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(states,WindowsState)

namespace states{


class HXCPP_CLASS_ATTRIBUTES WindowsState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef WindowsState_obj OBJ_;
		WindowsState_obj();

	public:
		enum { _hx_ClassId = 0x2b2a06f0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.WindowsState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.WindowsState"); }
		static ::hx::ObjectPtr< WindowsState_obj > __new();
		static ::hx::ObjectPtr< WindowsState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~WindowsState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("WindowsState",ae,d8,31,6d); }

		static  ::flixel::FlxSprite bg;
		static  ::TaskBar taskBar;
		static bool isConsole;
		static bool IsReset;
		static bool IsSystem;
		static ::String currentApp;
		static void openApp(::String name);
		static ::Dynamic openApp_dyn();

		 ::Logon screenLogon;
		bool ISAPPEAR;
		bool is;
		 ::Dynamic o;
		 ::flixel::FlxSprite menu;
		 ::applications::SettingsApplication settings;
		 ::flixel::ui::FlxButton taskbarmenu;
		 ::applications::ConsoleApp test;
		void ResetTaskBar();
		::Dynamic ResetTaskBar_dyn();

		void create();

		void update(Float elapsed);

};

} // end namespace states

#endif /* INCLUDED_states_WindowsState */ 
