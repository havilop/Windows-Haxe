// Generated by Haxe 4.3.6
#ifndef INCLUDED_applications_SettingsApplication
#define INCLUDED_applications_SettingsApplication

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_App
#include <App.h>
#endif
HX_DECLARE_CLASS0(App)
HX_DECLARE_CLASS0(CustomWindow)
HX_DECLARE_CLASS0(MessageBox)
HX_DECLARE_CLASS1(applications,SettingsApplication)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace applications{


class HXCPP_CLASS_ATTRIBUTES SettingsApplication_obj : public  ::App_obj
{
	public:
		typedef  ::App_obj super;
		typedef SettingsApplication_obj OBJ_;
		SettingsApplication_obj();

	public:
		enum { _hx_ClassId = 0x1215bd8a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="applications.SettingsApplication")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"applications.SettingsApplication"); }
		static ::hx::ObjectPtr< SettingsApplication_obj > __new();
		static ::hx::ObjectPtr< SettingsApplication_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SettingsApplication_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SettingsApplication",0d,f3,88,e6); }

		::String currentSection;
		 ::flixel::FlxSprite bg;
		 ::flixel::ui::FlxButton systemSection;
		 ::flixel::ui::FlxButton personalizationSection;
		 ::flixel::text::FlxText textPesonalizationWallpaper;
		 ::flixel::FlxSprite wallpaperCURRENT;
		 ::flixel::text::FlxText textWallpaperCurent;
		 ::CustomWindow window;
		 ::Dynamic l;
		 ::flixel::ui::FlxButton wal1;
		 ::flixel::ui::FlxButton wal2;
		 ::flixel::ui::FlxButton wal3;
		 ::flixel::ui::FlxButton wal4;
		 ::flixel::FlxSprite back;
		 ::flixel::text::FlxText textTaskBar;
		 ::flixel::text::FlxText textTaskBarChange;
		 ::flixel::ui::FlxButton up;
		 ::flixel::ui::FlxButton down;
		 ::flixel::text::FlxText textLanguage;
		 ::flixel::text::FlxText textLanguageCurrent;
		 ::flixel::text::FlxText textLanguageChoose;
		 ::flixel::ui::FlxButton textLanguageChooseRU;
		 ::flixel::ui::FlxButton textLanguageChooseEN;
		 ::MessageBox messageBox;
		 ::flixel::text::FlxText textDisplay;
		 ::flixel::text::FlxText textDisplayFPS;
		 ::flixel::text::FlxText textDisplayFPSCUR;
		 ::flixel::ui::FlxButton displayBUTTONMINUS;
		 ::flixel::ui::FlxButton displayBUTTONPLUS;
		void AddUI();
		::Dynamic AddUI_dyn();

		void plus();
		::Dynamic plus_dyn();

		void minus();
		::Dynamic minus_dyn();

		void AddBoxRU();
		::Dynamic AddBoxRU_dyn();

		void AddBoxEN();
		::Dynamic AddBoxEN_dyn();

		void RemoveUI();
		::Dynamic RemoveUI_dyn();

		void UpdateUI();
		::Dynamic UpdateUI_dyn();

		void update(Float elapsed);

		void destroy();

};

} // end namespace applications

#endif /* INCLUDED_applications_SettingsApplication */ 
