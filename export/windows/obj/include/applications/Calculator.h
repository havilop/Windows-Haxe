// Generated by Haxe 4.3.6
#ifndef INCLUDED_applications_Calculator
#define INCLUDED_applications_Calculator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_App
#include <App.h>
#endif
HX_DECLARE_CLASS0(App)
HX_DECLARE_CLASS0(ModernWindow)
HX_DECLARE_CLASS1(applications,Calculator)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace applications{


class HXCPP_CLASS_ATTRIBUTES Calculator_obj : public  ::App_obj
{
	public:
		typedef  ::App_obj super;
		typedef Calculator_obj OBJ_;
		Calculator_obj();

	public:
		enum { _hx_ClassId = 0x0487850d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="applications.Calculator")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"applications.Calculator"); }
		static ::hx::ObjectPtr< Calculator_obj > __new();
		static ::hx::ObjectPtr< Calculator_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Calculator_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Calculator",22,31,89,ae); }

		 ::ModernWindow window;
		 ::flixel::FlxSprite bg;
		 ::flixel::ui::FlxButton oneButton;
		 ::flixel::ui::FlxButton twoButton;
		 ::flixel::ui::FlxButton threeButton;
		 ::flixel::ui::FlxButton fourButton;
		 ::flixel::ui::FlxButton fiveButton;
		 ::flixel::ui::FlxButton sixButton;
		 ::flixel::ui::FlxButton sevenButton;
		 ::flixel::ui::FlxButton eightButton;
		 ::flixel::ui::FlxButton nineButton;
		 ::flixel::ui::FlxButton zeroButton;
		 ::flixel::ui::FlxButton plusButton;
		 ::flixel::ui::FlxButton minusButton;
		 ::flixel::ui::FlxButton equalButton;
		 ::flixel::ui::FlxButton cButton;
		bool isplus;
		 ::flixel::text::FlxText outputText;
		::String storedText;
		void number(int _hx_Int);
		::Dynamic number_dyn();

		int sumFromString(::String input);
		::Dynamic sumFromString_dyn();

		void equal();
		::Dynamic equal_dyn();

		void addUI();
		::Dynamic addUI_dyn();

		void update(Float elapsed);

};

} // end namespace applications

#endif /* INCLUDED_applications_Calculator */ 
