// Generated by Haxe 4.3.6
#ifndef INCLUDED_TaskBar
#define INCLUDED_TaskBar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS0(App)
HX_DECLARE_CLASS0(CustomWindow)
HX_DECLARE_CLASS0(TaskBar)
HX_DECLARE_CLASS1(applications,SettingsApplication)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES TaskBar_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef TaskBar_obj OBJ_;
		TaskBar_obj();

	public:
		enum { _hx_ClassId = 0x030e0a02 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="TaskBar")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"TaskBar"); }
		static ::hx::ObjectPtr< TaskBar_obj > __new();
		static ::hx::ObjectPtr< TaskBar_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TaskBar_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TaskBar",6e,eb,a9,eb); }

		 ::flixel::FlxSprite mainpart;
		 ::Dynamic o;
		 ::applications::SettingsApplication settingsWindow;
		 ::flixel::ui::FlxButton startmenu;
		bool wasOverlapping;
		bool wasoff;
		bool allowcover;
		 ::flixel::text::FlxText timeText;
		 ::flixel::FlxSprite bgturnoff;
		bool was;
		 ::flixel::ui::FlxButton off;
		::Array< ::String > listApplications;
		 ::flixel::ui::FlxButton restart;
		 ::flixel::ui::FlxButton volume;
		bool swithcFirstTimed;
		bool wasOverlappin;
		 ::flixel::FlxSprite menu;
		 ::CustomWindow windowEXIT;
		 ::flixel::ui::FlxButton menuextraSETTINGS;
		 ::flixel::ui::FlxButton menuextraOFF;
		 ::flixel::group::FlxTypedGroup appsMenu;
		void updateTaskBarMembers();
		::Dynamic updateTaskBarMembers_dyn();

		void update(Float elapsed);

		void updateTime();
		::Dynamic updateTime_dyn();

};


#endif /* INCLUDED_TaskBar */ 
