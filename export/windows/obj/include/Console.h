// Generated by Haxe 4.3.6
#ifndef INCLUDED_Console
#define INCLUDED_Console

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(Console)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxInputText)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Console_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef Console_obj OBJ_;
		Console_obj();

	public:
		enum { _hx_ClassId = 0x1aa204e7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Console")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Console"); }
		static ::hx::ObjectPtr< Console_obj > __new();
		static ::hx::ObjectPtr< Console_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Console_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Console",37,13,27,e6); }

		 ::flixel::addons::ui::FlxInputText consoleInput;
		 ::flixel::text::FlxText consoleOutput;
		::Array< ::String > listCommand;
		 ::Dynamic o;
		bool isAutoConsole;
		::String cmd;
		void create();

		void onConsoleCommandEntered(::String text,::String action);
		::Dynamic onConsoleCommandEntered_dyn();

		void logToConsole(::String message);
		::Dynamic logToConsole_dyn();

		void update(Float elapsed);

};


#endif /* INCLUDED_Console */ 
