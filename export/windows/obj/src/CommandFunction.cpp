// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_CommandFunction
#include <CommandFunction.h>
#endif
#ifndef INCLUDED_applications_ConsoleApp
#include <applications/ConsoleApp.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df46e114b1a59365_13_new,"CommandFunction","new",0x190531d5,"CommandFunction.new","CommandFunction.hx",13,0x284a9f3b)
HX_DEFINE_STACK_FRAME(_hx_pos_df46e114b1a59365_7_new,"CommandFunction","new",0x190531d5,"CommandFunction.new","CommandFunction.hx",7,0x284a9f3b)

void CommandFunction_obj::__construct(::String command){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::CommandFunction,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_df46e114b1a59365_13_new)
HXLINE(  14)			::App_obj::listApplications->remove(HX_("console",57,eb,d5,18));
HXLINE(  15)			_gthis->kill();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_df46e114b1a59365_7_new)
HXDLIN(   7)		 ::CommandFunction _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(   8)		super::__construct(null());
HXLINE(   9)		 ::applications::ConsoleApp console =  ::applications::ConsoleApp_obj::__alloc( HX_CTX );
HXLINE(  10)		console->onConsoleCommandEntered(command,HX_("enter",18,6d,86,70));
HXLINE(  11)		this->add(console);
HXLINE(  13)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN(  13)		::haxe::Timer_obj::delay(name,5);
            	}

Dynamic CommandFunction_obj::__CreateEmpty() { return new CommandFunction_obj; }

void *CommandFunction_obj::_hx_vtable = 0;

Dynamic CommandFunction_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CommandFunction_obj > _hx_result = new CommandFunction_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CommandFunction_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0b4a26db) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b4a26db;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}


::hx::ObjectPtr< CommandFunction_obj > CommandFunction_obj::__new(::String command) {
	::hx::ObjectPtr< CommandFunction_obj > __this = new CommandFunction_obj();
	__this->__construct(command);
	return __this;
}

::hx::ObjectPtr< CommandFunction_obj > CommandFunction_obj::__alloc(::hx::Ctx *_hx_ctx,::String command) {
	CommandFunction_obj *__this = (CommandFunction_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CommandFunction_obj), true, "CommandFunction"));
	*(void **)__this = CommandFunction_obj::_hx_vtable;
	__this->__construct(command);
	return __this;
}

CommandFunction_obj::CommandFunction_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CommandFunction_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CommandFunction_obj_sStaticStorageInfo = 0;
#endif

::hx::Class CommandFunction_obj::__mClass;

void CommandFunction_obj::__register()
{
	CommandFunction_obj _hx_dummy;
	CommandFunction_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CommandFunction",63,a3,10,e1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CommandFunction_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CommandFunction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CommandFunction_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

