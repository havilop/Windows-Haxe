// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICursor
#include <flixel/addons/ui/FlxUICursor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISubState
#include <flixel/addons/ui/FlxUISubState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltip
#include <flixel/addons/ui/FlxUITooltip.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltipManager
#include <flixel/addons/ui/FlxUITooltipManager.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_060bddf2a47172f7_39_new,"flixel.addons.ui.FlxUIState","new",0xd1a4986e,"flixel.addons.ui.FlxUIState.new","flixel/addons/ui/FlxUIState.hx",39,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_104_create,"flixel.addons.ui.FlxUIState","create",0x98ac9bae,"flixel.addons.ui.FlxUIState.create","flixel/addons/ui/FlxUIState.hx",104,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_219_update,"flixel.addons.ui.FlxUIState","update",0xa3a2babb,"flixel.addons.ui.FlxUIState.update","flixel/addons/ui/FlxUIState.hx",219,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_239_cleanup,"flixel.addons.ui.FlxUIState","cleanup",0x9832f332,"flixel.addons.ui.FlxUIState.cleanup","flixel/addons/ui/FlxUIState.hx",239,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_244__cleanupUIVars,"flixel.addons.ui.FlxUIState","_cleanupUIVars",0x162e4237,"flixel.addons.ui.FlxUIState._cleanupUIVars","flixel/addons/ui/FlxUIState.hx",244,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_256_setUIVariable,"flixel.addons.ui.FlxUIState","setUIVariable",0x525b6c60,"flixel.addons.ui.FlxUIState.setUIVariable","flixel/addons/ui/FlxUIState.hx",256,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_269_resizeScreen,"flixel.addons.ui.FlxUIState","resizeScreen",0x61d3beb2,"flixel.addons.ui.FlxUIState.resizeScreen","flixel/addons/ui/FlxUIState.hx",269,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_278_openSubState,"flixel.addons.ui.FlxUIState","openSubState",0x6db12c8d,"flixel.addons.ui.FlxUIState.openSubState","flixel/addons/ui/FlxUIState.hx",278,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_290_closeSubState,"flixel.addons.ui.FlxUIState","closeSubState",0x6976bdd7,"flixel.addons.ui.FlxUIState.closeSubState","flixel/addons/ui/FlxUIState.hx",290,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_302_onResize,"flixel.addons.ui.FlxUIState","onResize",0x4e0195a5,"flixel.addons.ui.FlxUIState.onResize","flixel/addons/ui/FlxUIState.hx",302,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_311_onShowTooltip,"flixel.addons.ui.FlxUIState","onShowTooltip",0x0f570c35,"flixel.addons.ui.FlxUIState.onShowTooltip","flixel/addons/ui/FlxUIState.hx",311,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_315_destroy,"flixel.addons.ui.FlxUIState","destroy",0x11771408,"flixel.addons.ui.FlxUIState.destroy","flixel/addons/ui/FlxUIState.hx",315,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_334_forceFocus,"flixel.addons.ui.FlxUIState","forceFocus",0x1df8bf9f,"flixel.addons.ui.FlxUIState.forceFocus","flixel/addons/ui/FlxUIState.hx",334,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_349_onCursorEvent,"flixel.addons.ui.FlxUIState","onCursorEvent",0xc6d4e413,"flixel.addons.ui.FlxUIState.onCursorEvent","flixel/addons/ui/FlxUIState.hx",349,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_352_getEvent,"flixel.addons.ui.FlxUIState","getEvent",0x3b751cd6,"flixel.addons.ui.FlxUIState.getEvent","flixel/addons/ui/FlxUIState.hx",352,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_358_getRequest,"flixel.addons.ui.FlxUIState","getRequest",0x1680db0b,"flixel.addons.ui.FlxUIState.getRequest","flixel/addons/ui/FlxUIState.hx",358,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_361_getText,"flixel.addons.ui.FlxUIState","getText",0x0c6d6371,"flixel.addons.ui.FlxUIState.getText","flixel/addons/ui/FlxUIState.hx",361,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_377_createCursor,"flixel.addons.ui.FlxUIState","createCursor",0x97a69524,"flixel.addons.ui.FlxUIState.createCursor","flixel/addons/ui/FlxUIState.hx",377,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_383_createUI,"flixel.addons.ui.FlxUIState","createUI",0x91cdad82,"flixel.addons.ui.FlxUIState.createUI","flixel/addons/ui/FlxUIState.hx",383,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_393_loadUIFromData,"flixel.addons.ui.FlxUIState","loadUIFromData",0x503ddb80,"flixel.addons.ui.FlxUIState.loadUIFromData","flixel/addons/ui/FlxUIState.hx",393,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_396_reloadUI,"flixel.addons.ui.FlxUIState","reloadUI",0x9eb72b1f,"flixel.addons.ui.FlxUIState.reloadUI","flixel/addons/ui/FlxUIState.hx",396,0xa272d441)
HX_LOCAL_STACK_FRAME(_hx_pos_060bddf2a47172f7_71_boot,"flixel.addons.ui.FlxUIState","boot",0x9679c864,"flixel.addons.ui.FlxUIState.boot","flixel/addons/ui/FlxUIState.hx",71,0xa272d441)
namespace flixel{
namespace addons{
namespace ui{

void FlxUIState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_39_new)
HXLINE(  93)		this->getTextFallback = null();
HXLINE(  91)		this->_reload_countdown = 0;
HXLINE(  90)		this->_reload = false;
HXLINE(  88)		this->reload_ui_on_resize = false;
HXLINE(  55)		this->_xml_id = HX_("",00,00,00,00);
HXLINE(  47)		this->_cursorHidden = false;
HXLINE(  46)		this->hideCursorOnSubstate = false;
HXLINE(  45)		this->cursor = null();
HXLINE(  39)		super::__construct();
            	}

Dynamic FlxUIState_obj::__CreateEmpty() { return new FlxUIState_obj; }

void *FlxUIState_obj::_hx_vtable = 0;

Dynamic FlxUIState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxUIState_obj > _hx_result = new FlxUIState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxUIState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x23a57bae) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUIState__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUIState_obj::getEvent_72fc5da6,
	(  ::Dynamic (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUIState_obj::getRequest_3ab6d711,
};

static ::flixel::addons::ui::interfaces::IFlxUIState_obj _hx_flixel_addons_ui_FlxUIState__hx_flixel_addons_ui_interfaces_IFlxUIState= {
	( void (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUIState_obj::getEvent_72fc5da6,
	(  ::Dynamic (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUIState_obj::getRequest_3ab6d711,
	( void (::hx::Object::*)(bool,::Dynamic))&::flixel::addons::ui::FlxUIState_obj::forceFocus,
};

 ::Dynamic FlxUIState_obj::getRequest_3ab6d711(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params) {
			return getRequest(name,sender,data,params);
}

void FlxUIState_obj::getEvent_72fc5da6(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params) {
			getEvent(name,sender,data,params);
}
void *FlxUIState_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUIState__hx_flixel_addons_ui_interfaces_IEventGetter;
		case (int)0x0bdac137: return &_hx_flixel_addons_ui_FlxUIState__hx_flixel_addons_ui_interfaces_IFlxUIState;
	}
	return super::_hx_getInterface(inHash);
}

void FlxUIState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_060bddf2a47172f7_104_create)
HXLINE( 105)		if (::hx::IsNotNull( ::flixel::addons::ui::FlxUIState_obj::static_tongue )) {
HXLINE( 107)			this->_tongue = ::flixel::addons::ui::FlxUIState_obj::static_tongue;
            		}
HXLINE( 118)		if ((this->_makeCursor == true)) {
HXLINE( 120)			this->cursor = this->createCursor();
            		}
HXLINE( 124)		this->tooltips =  ::flixel::addons::ui::FlxUITooltipManager_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 126)		 ::Xml liveFile = null();
HXLINE( 145)		this->_ui = this->createUI(null(),::hx::ObjectPtr<OBJ_>(this),null(),this->_tongue,null());
HXLINE( 147)		this->add(this->_ui);
HXLINE( 149)		if (::hx::IsNotNull( this->getTextFallback )) {
HXLINE( 151)			this->_ui->getTextFallback = this->getTextFallback;
            		}
HXLINE( 154)		bool _hx_tmp;
HXDLIN( 154)		if (::hx::IsNotNull( this->_xml_id )) {
HXLINE( 154)			_hx_tmp = (this->_xml_id != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 154)			_hx_tmp = false;
            		}
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 156)			 ::Xml data = null();
HXLINE( 157)			::String errorMsg = HX_("",00,00,00,00);
HXLINE( 159)			if (::hx::IsNull( liveFile )) {
HXLINE( 161)				try {
            					HX_STACK_CATCHABLE(::String, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 163)					data = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(this->_xml_id,null(),null(),null())) );
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg1 = _hx_e;
HXLINE( 167)						errorMsg = msg1;
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g = _hx_e;
HXLINE( 165)						{
HXLINE( 165)							null();
            						}
HXLINE( 161)						if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 165)							::String msg1 = ( (::String)(_g->value) );
HXLINE( 167)							errorMsg = msg1;
            						}
            						else {
HXLINE( 161)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 169)				if (::hx::IsNull( data )) {
HXLINE( 171)					try {
            						HX_STACK_CATCHABLE(::String, 0);
            						HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 173)						data = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(this->_xml_id,HX_("xml",d7,6d,5b,00),true,HX_("",00,00,00,00))) );
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            							HX_STACK_BEGIN_CATCH
            							::String msg21 = _hx_e;
HXLINE( 177)							errorMsg = (errorMsg + (HX_(", ",74,26,00,00) + msg21));
            						}
            						else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::ValueException _g1 = _hx_e;
HXLINE( 175)							{
HXLINE( 175)								null();
            							}
HXLINE( 171)							if (::Std_obj::isOfType(_g1->value,::hx::ClassOf< ::String >())) {
HXLINE( 175)								::String msg21 = ( (::String)(_g1->value) );
HXLINE( 177)								errorMsg = (errorMsg + (HX_(", ",74,26,00,00) + msg21));
            							}
            							else {
HXLINE( 171)								HX_STACK_DO_THROW(_g1);
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXLINE( 182)			if (::hx::IsNull( data )) {
HXLINE( 184)				if (::hx::IsNotNull( liveFile )) {
HXLINE( 186)					this->loadUIFromData(liveFile);
            				}
            				else {
HXLINE( 190)					::flixel::FlxG_obj::log->advanced(((HX_("FlxUISubState: Could not load _xml_id \"",93,ad,c0,63) + this->_xml_id) + HX_("\"",22,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            				}
            			}
            			else {
HXLINE( 195)				this->loadUIFromData(data);
            			}
            		}
            		else {
HXLINE( 200)			this->loadUIFromData(null());
            		}
HXLINE( 204)		bool _hx_tmp1;
HXDLIN( 204)		if (::hx::IsNotNull( this->cursor )) {
HXLINE( 204)			_hx_tmp1 = ::hx::IsNotNull( this->_ui );
            		}
            		else {
HXLINE( 204)			_hx_tmp1 = false;
            		}
HXDLIN( 204)		if (_hx_tmp1) {
HXLINE( 205)			this->add(this->cursor);
HXLINE( 206)			this->cursor->addWidgetsFromUI(this->_ui);
HXLINE( 207)			this->cursor->findVisibleLocation(0,null(),null());
            		}
HXLINE( 211)		this->tooltips->init();
HXLINE( 213)		this->super::create();
HXLINE( 215)		this->cleanup();
            	}


void FlxUIState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_219_update)
HXLINE( 220)		this->super::update(elapsed);
HXLINE( 221)		if (::hx::IsNotNull( this->tooltips )) {
HXLINE( 223)			this->tooltips->update(elapsed);
            		}
HXLINE( 225)		if (this->_reload) {
HXLINE( 226)			if ((this->_reload_countdown > 0)) {
HXLINE( 227)				this->_reload_countdown--;
HXLINE( 228)				if ((this->_reload_countdown == 0)) {
HXLINE( 229)					this->reloadUI(null());
            				}
            			}
            		}
            	}


void FlxUIState_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_239_cleanup)
HXDLIN( 239)		this->_ui->cleanup();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIState_obj,cleanup,(void))

void FlxUIState_obj::_cleanupUIVars(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_244__cleanupUIVars)
HXDLIN( 244)		if (::hx::IsNotNull( this->_ui_vars )) {
HXLINE( 246)			{
HXLINE( 246)				 ::Dynamic key = this->_ui_vars->keys();
HXDLIN( 246)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 246)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 248)					this->_ui_vars->remove(key1);
            				}
            			}
HXLINE( 250)			this->_ui_vars = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIState_obj,_cleanupUIVars,(void))

void FlxUIState_obj::setUIVariable(::String key,::String value){
            	HX_GC_STACKFRAME(&_hx_pos_060bddf2a47172f7_256_setUIVariable)
HXDLIN( 256)		if (::hx::IsNotNull( this->_ui )) {
HXLINE( 259)			this->_ui->setVariable(key,value);
            		}
            		else {
HXLINE( 264)			if (::hx::IsNull( this->_ui_vars )) {
HXLINE( 264)				this->_ui_vars =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 265)			this->_ui_vars->set(key,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIState_obj,setUIVariable,(void))

void FlxUIState_obj::resizeScreen(::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height){
            		Float width = __o_width.Default(800);
            		Float height = __o_height.Default(600);
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_269_resizeScreen)
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIState_obj,resizeScreen,(void))

void FlxUIState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_278_openSubState)
HXLINE( 280)		bool _hx_tmp;
HXDLIN( 280)		bool _hx_tmp1;
HXDLIN( 280)		if (::hx::IsNotNull( this->cursor )) {
HXLINE( 280)			_hx_tmp1 = this->hideCursorOnSubstate;
            		}
            		else {
HXLINE( 280)			_hx_tmp1 = false;
            		}
HXDLIN( 280)		if (_hx_tmp1) {
HXLINE( 280)			_hx_tmp = (this->cursor->visible == true);
            		}
            		else {
HXLINE( 280)			_hx_tmp = false;
            		}
HXDLIN( 280)		if (_hx_tmp) {
HXLINE( 282)			this->_cursorHidden = true;
HXLINE( 283)			this->cursor->set_visible(false);
            		}
HXLINE( 286)		this->super::openSubState(SubState);
            	}


void FlxUIState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_290_closeSubState)
HXLINE( 292)		bool _hx_tmp;
HXDLIN( 292)		bool _hx_tmp1;
HXDLIN( 292)		if (::hx::IsNotNull( this->cursor )) {
HXLINE( 292)			_hx_tmp1 = this->hideCursorOnSubstate;
            		}
            		else {
HXLINE( 292)			_hx_tmp1 = false;
            		}
HXDLIN( 292)		if (_hx_tmp1) {
HXLINE( 292)			_hx_tmp = this->_cursorHidden;
            		}
            		else {
HXLINE( 292)			_hx_tmp = false;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 294)			this->_cursorHidden = false;
HXLINE( 295)			this->cursor->set_visible(true);
            		}
HXLINE( 298)		this->super::closeSubState();
            	}


void FlxUIState_obj::onResize(int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_302_onResize)
HXDLIN( 302)		if (this->reload_ui_on_resize) {
HXLINE( 303)			::flixel::FlxG_obj::scaleMode->onMeasure(Width,Height);
HXLINE( 304)			this->_reload_countdown = 1;
HXLINE( 305)			this->_reload = true;
            		}
            	}


void FlxUIState_obj::onShowTooltip( ::flixel::addons::ui::FlxUITooltip t){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_311_onShowTooltip)
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIState_obj,onShowTooltip,(void))

void FlxUIState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_315_destroy)
HXLINE( 316)		this->destroyed = true;
HXLINE( 318)		if (::hx::IsNotNull( this->_ui )) {
HXLINE( 319)			this->_ui->destroy();
HXLINE( 320)			this->remove(this->_ui,true);
HXLINE( 321)			this->_ui = null();
            		}
HXLINE( 324)		if (::hx::IsNotNull( this->tooltips )) {
HXLINE( 326)			this->tooltips->destroy();
HXLINE( 327)			this->tooltips = null();
            		}
HXLINE( 330)		this->super::destroy();
            	}


void FlxUIState_obj::forceFocus(bool b,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_334_forceFocus)
HXDLIN( 334)		if (::hx::IsNotNull( this->_ui )) {
HXLINE( 336)			if (b) {
HXLINE( 338)				this->_ui->set_focus(thing);
            			}
            			else {
HXLINE( 342)				this->_ui->set_focus(null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIState_obj,forceFocus,(void))

void FlxUIState_obj::onCursorEvent(::String code,::Dynamic target){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_349_onCursorEvent)
HXDLIN( 349)		this->getEvent(code,target,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIState_obj,onCursorEvent,(void))

void FlxUIState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_352_getEvent)
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUIState_obj,getEvent,(void))

 ::Dynamic FlxUIState_obj::getRequest(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_358_getRequest)
HXDLIN( 358)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUIState_obj,getRequest,return )

::String FlxUIState_obj::getText(::String Flag,::String __o_Context,::hx::Null< bool >  __o_Safe){
            		::String Context = __o_Context;
            		if (::hx::IsNull(__o_Context)) Context = HX_("ui",54,66,00,00);
            		bool Safe = __o_Safe.Default(true);
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_361_getText)
HXLINE( 362)		if (::hx::IsNotNull( this->_tongue )) {
HXLINE( 363)			return ::flixel::addons::ui::interfaces::IFireTongue_obj::get(this->_tongue,Flag,Context,Safe);
            		}
HXLINE( 365)		if (::hx::IsNotNull( this->getTextFallback )) {
HXLINE( 366)			return ( (::String)(this->getTextFallback(Flag,Context,Safe)) );
            		}
HXLINE( 368)		return Flag;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUIState_obj,getText,return )

 ::flixel::addons::ui::FlxUICursor FlxUIState_obj::createCursor(){
            	HX_GC_STACKFRAME(&_hx_pos_060bddf2a47172f7_377_createCursor)
HXDLIN( 377)		return  ::flixel::addons::ui::FlxUICursor_obj::__alloc( HX_CTX ,this->onCursorEvent_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIState_obj,createCursor,return )

 ::flixel::addons::ui::FlxUI FlxUIState_obj::createUI( ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_){
            		::String liveFilePath_ = __o_liveFilePath_;
            		if (::hx::IsNull(__o_liveFilePath_)) liveFilePath_ = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_060bddf2a47172f7_383_createUI)
HXLINE( 384)		 ::flixel::addons::ui::FlxUI flxui =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,data,ptr,superIndex_,tongue_,liveFilePath_,this->_ui_vars);
HXLINE( 385)		this->_cleanupUIVars();
HXLINE( 386)		return flxui;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUIState_obj,createUI,return )

void FlxUIState_obj::loadUIFromData( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_393_loadUIFromData)
HXDLIN( 393)		this->_ui->load(data);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIState_obj,loadUIFromData,(void))

void FlxUIState_obj::reloadUI( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_396_reloadUI)
HXLINE( 397)		if (::hx::IsNotNull( this->_ui )) {
HXLINE( 398)			this->remove(this->_ui,true);
HXLINE( 399)			this->_ui->destroy();
HXLINE( 400)			this->_ui = null();
            		}
HXLINE( 403)		this->_ui = this->createUI(null(),::hx::ObjectPtr<OBJ_>(this),null(),this->_tongue,null());
HXLINE( 404)		this->add(this->_ui);
HXLINE( 406)		 ::Xml data = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(this->_xml_id,null(),null(),null())) );
HXLINE( 407)		if (::hx::IsNotNull( data )) {
HXLINE( 409)			this->loadUIFromData(data);
            		}
HXLINE( 412)		this->_reload = false;
HXLINE( 413)		this->_reload_countdown = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIState_obj,reloadUI,(void))

::Dynamic FlxUIState_obj::static_tongue;


::hx::ObjectPtr< FlxUIState_obj > FlxUIState_obj::__new() {
	::hx::ObjectPtr< FlxUIState_obj > __this = new FlxUIState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxUIState_obj > FlxUIState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxUIState_obj *__this = (FlxUIState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUIState_obj), true, "flixel.addons.ui.FlxUIState"));
	*(void **)__this = FlxUIState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxUIState_obj::FlxUIState_obj()
{
}

void FlxUIState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUIState);
	HX_MARK_MEMBER_NAME(destroyed,"destroyed");
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	HX_MARK_MEMBER_NAME(hideCursorOnSubstate,"hideCursorOnSubstate");
	HX_MARK_MEMBER_NAME(_cursorHidden,"_cursorHidden");
	HX_MARK_MEMBER_NAME(tooltips,"tooltips");
	HX_MARK_MEMBER_NAME(_xml_id,"_xml_id");
	HX_MARK_MEMBER_NAME(_makeCursor,"_makeCursor");
	HX_MARK_MEMBER_NAME(_ui_vars,"_ui_vars");
	HX_MARK_MEMBER_NAME(_ui,"_ui");
	HX_MARK_MEMBER_NAME(_tongue,"_tongue");
	HX_MARK_MEMBER_NAME(reload_ui_on_resize,"reload_ui_on_resize");
	HX_MARK_MEMBER_NAME(_reload,"_reload");
	HX_MARK_MEMBER_NAME(_reload_countdown,"_reload_countdown");
	HX_MARK_MEMBER_NAME(getTextFallback,"getTextFallback");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUIState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(destroyed,"destroyed");
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	HX_VISIT_MEMBER_NAME(hideCursorOnSubstate,"hideCursorOnSubstate");
	HX_VISIT_MEMBER_NAME(_cursorHidden,"_cursorHidden");
	HX_VISIT_MEMBER_NAME(tooltips,"tooltips");
	HX_VISIT_MEMBER_NAME(_xml_id,"_xml_id");
	HX_VISIT_MEMBER_NAME(_makeCursor,"_makeCursor");
	HX_VISIT_MEMBER_NAME(_ui_vars,"_ui_vars");
	HX_VISIT_MEMBER_NAME(_ui,"_ui");
	HX_VISIT_MEMBER_NAME(_tongue,"_tongue");
	HX_VISIT_MEMBER_NAME(reload_ui_on_resize,"reload_ui_on_resize");
	HX_VISIT_MEMBER_NAME(_reload,"_reload");
	HX_VISIT_MEMBER_NAME(_reload_countdown,"_reload_countdown");
	HX_VISIT_MEMBER_NAME(getTextFallback,"getTextFallback");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxUIState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ui") ) { return ::hx::Val( _ui ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { return ::hx::Val( cursor ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_xml_id") ) { return ::hx::Val( _xml_id ); }
		if (HX_FIELD_EQ(inName,"_tongue") ) { return ::hx::Val( _tongue ); }
		if (HX_FIELD_EQ(inName,"_reload") ) { return ::hx::Val( _reload ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return ::hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return ::hx::Val( getText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tooltips") ) { return ::hx::Val( tooltips ); }
		if (HX_FIELD_EQ(inName,"_ui_vars") ) { return ::hx::Val( _ui_vars ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"createUI") ) { return ::hx::Val( createUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadUI") ) { return ::hx::Val( reloadUI_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { return ::hx::Val( destroyed ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceFocus") ) { return ::hx::Val( forceFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRequest") ) { return ::hx::Val( getRequest_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_makeCursor") ) { return ::hx::Val( _makeCursor ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resizeScreen") ) { return ::hx::Val( resizeScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCursor") ) { return ::hx::Val( createCursor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_cursorHidden") ) { return ::hx::Val( _cursorHidden ); }
		if (HX_FIELD_EQ(inName,"setUIVariable") ) { return ::hx::Val( setUIVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"onShowTooltip") ) { return ::hx::Val( onShowTooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCursorEvent") ) { return ::hx::Val( onCursorEvent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cleanupUIVars") ) { return ::hx::Val( _cleanupUIVars_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadUIFromData") ) { return ::hx::Val( loadUIFromData_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { return ::hx::Val( getTextFallback ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_reload_countdown") ) { return ::hx::Val( _reload_countdown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"reload_ui_on_resize") ) { return ::hx::Val( reload_ui_on_resize ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"hideCursorOnSubstate") ) { return ::hx::Val( hideCursorOnSubstate ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUIState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"static_tongue") ) { outValue = ( static_tongue ); return true; }
	}
	return false;
}

::hx::Val FlxUIState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ui") ) { _ui=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { cursor=inValue.Cast<  ::flixel::addons::ui::FlxUICursor >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_xml_id") ) { _xml_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tongue") ) { _tongue=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reload") ) { _reload=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tooltips") ) { tooltips=inValue.Cast<  ::flixel::addons::ui::FlxUITooltipManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ui_vars") ) { _ui_vars=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { destroyed=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_makeCursor") ) { _makeCursor=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_cursorHidden") ) { _cursorHidden=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { getTextFallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_reload_countdown") ) { _reload_countdown=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"reload_ui_on_resize") ) { reload_ui_on_resize=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"hideCursorOnSubstate") ) { hideCursorOnSubstate=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxUIState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"static_tongue") ) { static_tongue=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

void FlxUIState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("destroyed",d9,37,27,f4));
	outFields->push(HX_("cursor",d6,8e,e8,3e));
	outFields->push(HX_("hideCursorOnSubstate",28,20,2f,e3));
	outFields->push(HX_("_cursorHidden",bf,59,51,6b));
	outFields->push(HX_("tooltips",10,b6,8a,d0));
	outFields->push(HX_("_xml_id",22,16,a3,73));
	outFields->push(HX_("_makeCursor",83,30,42,63));
	outFields->push(HX_("_ui_vars",38,ca,da,37));
	outFields->push(HX_("_ui",73,7c,48,00));
	outFields->push(HX_("_tongue",63,57,5b,02));
	outFields->push(HX_("reload_ui_on_resize",4f,eb,1e,44));
	outFields->push(HX_("_reload",f8,64,56,72));
	outFields->push(HX_("_reload_countdown",6a,17,8b,78));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxUIState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxUIState_obj,destroyed),HX_("destroyed",d9,37,27,f4)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICursor */ ,(int)offsetof(FlxUIState_obj,cursor),HX_("cursor",d6,8e,e8,3e)},
	{::hx::fsBool,(int)offsetof(FlxUIState_obj,hideCursorOnSubstate),HX_("hideCursorOnSubstate",28,20,2f,e3)},
	{::hx::fsBool,(int)offsetof(FlxUIState_obj,_cursorHidden),HX_("_cursorHidden",bf,59,51,6b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITooltipManager */ ,(int)offsetof(FlxUIState_obj,tooltips),HX_("tooltips",10,b6,8a,d0)},
	{::hx::fsString,(int)offsetof(FlxUIState_obj,_xml_id),HX_("_xml_id",22,16,a3,73)},
	{::hx::fsBool,(int)offsetof(FlxUIState_obj,_makeCursor),HX_("_makeCursor",83,30,42,63)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUIState_obj,_ui_vars),HX_("_ui_vars",38,ca,da,37)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUI */ ,(int)offsetof(FlxUIState_obj,_ui),HX_("_ui",73,7c,48,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUIState_obj,_tongue),HX_("_tongue",63,57,5b,02)},
	{::hx::fsBool,(int)offsetof(FlxUIState_obj,reload_ui_on_resize),HX_("reload_ui_on_resize",4f,eb,1e,44)},
	{::hx::fsBool,(int)offsetof(FlxUIState_obj,_reload),HX_("_reload",f8,64,56,72)},
	{::hx::fsInt,(int)offsetof(FlxUIState_obj,_reload_countdown),HX_("_reload_countdown",6a,17,8b,78)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxUIState_obj,getTextFallback),HX_("getTextFallback",a5,c3,03,82)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxUIState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(void *) &FlxUIState_obj::static_tongue,HX_("static_tongue",75,8c,1c,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUIState_obj_sMemberFields[] = {
	HX_("destroyed",d9,37,27,f4),
	HX_("cursor",d6,8e,e8,3e),
	HX_("hideCursorOnSubstate",28,20,2f,e3),
	HX_("_cursorHidden",bf,59,51,6b),
	HX_("tooltips",10,b6,8a,d0),
	HX_("_xml_id",22,16,a3,73),
	HX_("_makeCursor",83,30,42,63),
	HX_("_ui_vars",38,ca,da,37),
	HX_("_ui",73,7c,48,00),
	HX_("_tongue",63,57,5b,02),
	HX_("reload_ui_on_resize",4f,eb,1e,44),
	HX_("_reload",f8,64,56,72),
	HX_("_reload_countdown",6a,17,8b,78),
	HX_("getTextFallback",a5,c3,03,82),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("cleanup",24,0c,42,ab),
	HX_("_cleanupUIVars",85,0b,62,df),
	HX_("setUIVariable",d2,c6,16,ed),
	HX_("resizeScreen",80,f8,6a,2b),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("onResize",73,50,28,e8),
	HX_("onShowTooltip",a7,66,12,aa),
	HX_("destroy",fa,2c,86,24),
	HX_("forceFocus",ed,49,5e,9b),
	HX_("onCursorEvent",85,3e,90,61),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("getRequest",59,65,e6,93),
	HX_("getText",63,7c,7c,1f),
	HX_("createCursor",f2,ce,3d,61),
	HX_("createUI",50,68,f4,2b),
	HX_("loadUIFromData",ce,a4,71,19),
	HX_("reloadUI",ed,e5,dd,38),
	::String(null()) };

static void FlxUIState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUIState_obj::static_tongue,"static_tongue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUIState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUIState_obj::static_tongue,"static_tongue");
};

#endif

::hx::Class FlxUIState_obj::__mClass;

static ::String FlxUIState_obj_sStaticFields[] = {
	HX_("static_tongue",75,8c,1c,bc),
	::String(null())
};

void FlxUIState_obj::__register()
{
	FlxUIState_obj _hx_dummy;
	FlxUIState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxUIState",7c,89,c0,87);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUIState_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxUIState_obj::__SetStatic;
	__mClass->mMarkFunc = FlxUIState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxUIState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxUIState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxUIState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUIState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUIState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUIState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUIState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_060bddf2a47172f7_71_boot)
HXDLIN(  71)		static_tongue = null();
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
