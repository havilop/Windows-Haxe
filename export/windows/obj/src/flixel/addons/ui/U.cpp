// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISpriteButton
#include <flixel/addons/ui/FlxUISpriteButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontFixer
#include <flixel/addons/ui/FontFixer.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_57_xml_str,"flixel.addons.ui.U","xml_str",0xebebbe9f,"flixel.addons.ui.U.xml_str","flixel/addons/ui/U.hx",57,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_74_xml_name,"flixel.addons.ui.U","xml_name",0x7efe8c9d,"flixel.addons.ui.U.xml_name","flixel/addons/ui/U.hx",74,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_90_xml_color,"flixel.addons.ui.U","xml_color",0x53945ed1,"flixel.addons.ui.U.xml_color","flixel/addons/ui/U.hx",90,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_105_xml_iArray,"flixel.addons.ui.U","xml_iArray",0xbbed9342,"flixel.addons.ui.U.xml_iArray","flixel/addons/ui/U.hx",105,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_120_xml_fArray,"flixel.addons.ui.U","xml_fArray",0x88db7e25,"flixel.addons.ui.U.xml_fArray","flixel/addons/ui/U.hx",120,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_135_xml_strArray,"flixel.addons.ui.U","xml_strArray",0x1a3ebe7a,"flixel.addons.ui.U.xml_strArray","flixel/addons/ui/U.hx",135,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_150_xml_colorArray,"flixel.addons.ui.U","xml_colorArray",0x092a2908,"flixel.addons.ui.U.xml_colorArray","flixel/addons/ui/U.hx",150,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_170_perc_to_float,"flixel.addons.ui.U","perc_to_float",0xc1657e67,"flixel.addons.ui.U.perc_to_float","flixel/addons/ui/U.hx",170,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_186_isStrNum,"flixel.addons.ui.U","isStrNum",0x399f4549,"flixel.addons.ui.U.isStrNum","flixel/addons/ui/U.hx",186,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_198_isStrInt,"flixel.addons.ui.U","isStrInt",0x399b73f2,"flixel.addons.ui.U.isStrInt","flixel/addons/ui/U.hx",198,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_209_isStrFloat,"flixel.addons.ui.U","isStrFloat",0xb2cc335f,"flixel.addons.ui.U.isStrFloat","flixel/addons/ui/U.hx",209,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_228_xml_f,"flixel.addons.ui.U","xml_f",0xcb3d1ed4,"flixel.addons.ui.U.xml_f","flixel/addons/ui/U.hx",228,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_242_xml_i,"flixel.addons.ui.U","xml_i",0xcb3d1ed7,"flixel.addons.ui.U.xml_i","flixel/addons/ui/U.hx",242,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_256_xml_pt,"flixel.addons.ui.U","xml_pt",0x0a3de3d6,"flixel.addons.ui.U.xml_pt","flixel/addons/ui/U.hx",256,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_263_boolify,"flixel.addons.ui.U","boolify",0xe88e23a8,"flixel.addons.ui.U.boolify","flixel/addons/ui/U.hx",263,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_279_pointify,"flixel.addons.ui.U","pointify",0x7c83db56,"flixel.addons.ui.U.pointify","flixel/addons/ui/U.hx",279,0x74647d9b)
static const ::String _hx_array_data_ef400604_21[] = {
	HX_("(",28,00,00,00),HX_(")",29,00,00,00),HX_(" ",20,00,00,00),HX_("=",3d,00,00,00),HX_(":",3a,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_310_compareStringVars,"flixel.addons.ui.U","compareStringVars",0x90ebbd38,"flixel.addons.ui.U.compareStringVars","flixel/addons/ui/U.hx",310,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_350_xml_bool,"flixel.addons.ui.U","xml_bool",0x771a9e7c,"flixel.addons.ui.U.xml_bool","flixel/addons/ui/U.hx",350,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_363_xml_gfx,"flixel.addons.ui.U","xml_gfx",0xebe29767,"flixel.addons.ui.U.xml_gfx","flixel/addons/ui/U.hx",363,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_402_center,"flixel.addons.ui.U","center",0x0aecfeff,"flixel.addons.ui.U.center","flixel/addons/ui/U.hx",402,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_408_test_int,"flixel.addons.ui.U","test_int",0x278ea2ec,"flixel.addons.ui.U.test_int","flixel/addons/ui/U.hx",408,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_420_test_float,"flixel.addons.ui.U","test_float",0x672494d9,"flixel.addons.ui.U.test_float","flixel/addons/ui/U.hx",420,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_439_padDigits,"flixel.addons.ui.U","padDigits",0x6478ccef,"flixel.addons.ui.U.padDigits","flixel/addons/ui/U.hx",439,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_462_conformToBounds,"flixel.addons.ui.U","conformToBounds",0xe785bc8c,"flixel.addons.ui.U.conformToBounds","flixel/addons/ui/U.hx",462,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_482_parseHex,"flixel.addons.ui.U","parseHex",0xa68b4412,"flixel.addons.ui.U.parseHex","flixel/addons/ui/U.hx",482,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_505_hexChar2dec,"flixel.addons.ui.U","hexChar2dec",0xbd0fe737,"flixel.addons.ui.U.hexChar2dec","flixel/addons/ui/U.hx",505,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_523_hex2dec,"flixel.addons.ui.U","hex2dec",0xeabe5cc1,"flixel.addons.ui.U.hex2dec","flixel/addons/ui/U.hx",523,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_544_hex2rgb,"flixel.addons.ui.U","hex2rgb",0xeac8fe0c,"flixel.addons.ui.U.hex2rgb","flixel/addons/ui/U.hx",544,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_550_applyResize,"flixel.addons.ui.U","applyResize",0x7e0ec898,"flixel.addons.ui.U.applyResize","flixel/addons/ui/U.hx",550,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_589_rgb2hex,"flixel.addons.ui.U","rgb2hex",0xac7dff0c,"flixel.addons.ui.U.rgb2hex","flixel/addons/ui/U.hx",589,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_600_interpolate,"flixel.addons.ui.U","interpolate",0x58cb8357,"flixel.addons.ui.U.interpolate","flixel/addons/ui/U.hx",600,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_636_getLocList,"flixel.addons.ui.U","getLocList",0xf38b1932,"flixel.addons.ui.U.getLocList","flixel/addons/ui/U.hx",636,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_645_disposeXML,"flixel.addons.ui.U","disposeXML",0xe5262ca2,"flixel.addons.ui.U.disposeXML","flixel/addons/ui/U.hx",645,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_660_copyAccess,"flixel.addons.ui.U","copyAccess",0x4511b163,"flixel.addons.ui.U.copyAccess","flixel/addons/ui/U.hx",660,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_664_copyXml,"flixel.addons.ui.U","copyXml",0xae1514b8,"flixel.addons.ui.U.copyXml","flixel/addons/ui/U.hx",664,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_668_readXml,"flixel.addons.ui.U","readXml",0x6d613fb7,"flixel.addons.ui.U.readXml","flixel/addons/ui/U.hx",668,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_676_readAccess,"flixel.addons.ui.U","readAccess",0x88c92fc4,"flixel.addons.ui.U.readAccess","flixel/addons/ui/U.hx",676,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_685_fixSlash,"flixel.addons.ui.U","fixSlash",0xb543a1d2,"flixel.addons.ui.U.fixSlash","flixel/addons/ui/U.hx",685,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_700_endline,"flixel.addons.ui.U","endline",0xa98ad0e5,"flixel.addons.ui.U.endline","flixel/addons/ui/U.hx",700,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_709_slash,"flixel.addons.ui.U","slash",0xe98aba53,"flixel.addons.ui.U.slash","flixel/addons/ui/U.hx",709,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_715_writeXml,"flixel.addons.ui.U","writeXml",0xf415c5e2,"flixel.addons.ui.U.writeXml","flixel/addons/ui/U.hx",715,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_744_getXML,"flixel.addons.ui.U","getXML",0xa83c640b,"flixel.addons.ui.U.getXML","flixel/addons/ui/U.hx",744,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_752_json,"flixel.addons.ui.U","json",0x492e9cd2,"flixel.addons.ui.U.json","flixel/addons/ui/U.hx",752,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_761_field,"flixel.addons.ui.U","field",0x6b5c8ed0,"flixel.addons.ui.U.field","flixel/addons/ui/U.hx",761,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_773_xml,"flixel.addons.ui.U","xml",0x6318966d,"flixel.addons.ui.U.xml","flixel/addons/ui/U.hx",773,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_809_clearArraySoft,"flixel.addons.ui.U","clearArraySoft",0x8f7d5f00,"flixel.addons.ui.U.clearArraySoft","flixel/addons/ui/U.hx",809,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_823_clearArray,"flixel.addons.ui.U","clearArray",0x7ee062f6,"flixel.addons.ui.U.clearArray","flixel/addons/ui/U.hx",823,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_833_destroyThing,"flixel.addons.ui.U","destroyThing",0x2d89953e,"flixel.addons.ui.U.destroyThing","flixel/addons/ui/U.hx",833,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_857_fontStr,"flixel.addons.ui.U","fontStr",0x00b679b8,"flixel.addons.ui.U.fontStr","flixel/addons/ui/U.hx",857,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_868_font,"flixel.addons.ui.U","font",0x4686b879,"flixel.addons.ui.U.font","flixel/addons/ui/U.hx",868,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_895__font,"flixel.addons.ui.U","_font",0x619a73c4,"flixel.addons.ui.U._font","flixel/addons/ui/U.hx",895,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_912_fsx,"flixel.addons.ui.U","fsx",0x630af321,"flixel.addons.ui.U.fsx","flixel/addons/ui/U.hx",912,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_916_fs,"flixel.addons.ui.U","fs",0x12cfd577,"flixel.addons.ui.U.fs","flixel/addons/ui/U.hx",916,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_926_FU,"flixel.addons.ui.U","FU",0x12cfb979,"flixel.addons.ui.U.FU","flixel/addons/ui/U.hx",926,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_936_FUL,"flixel.addons.ui.U","FUL",0x62f290b3,"flixel.addons.ui.U.FUL","flixel/addons/ui/U.hx",936,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_940_getBmp,"flixel.addons.ui.U","getBmp",0xa82bce79,"flixel.addons.ui.U.getBmp","flixel/addons/ui/U.hx",940,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_967_checkHaxedef,"flixel.addons.ui.U","checkHaxedef",0x22016e21,"flixel.addons.ui.U.checkHaxedef","flixel/addons/ui/U.hx",967,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1073_copy_shallow_arr,"flixel.addons.ui.U","copy_shallow_arr",0xfda79816,"flixel.addons.ui.U.copy_shallow_arr","flixel/addons/ui/U.hx",1073,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1085_copy_arr_arr_i,"flixel.addons.ui.U","copy_arr_arr_i",0xd7a40f0d,"flixel.addons.ui.U.copy_arr_arr_i","flixel/addons/ui/U.hx",1085,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1098_copy_shallow_arr_i,"flixel.addons.ui.U","copy_shallow_arr_i",0x68ce9cc0,"flixel.addons.ui.U.copy_shallow_arr_i","flixel/addons/ui/U.hx",1098,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1107_copy_shallow_arr_str,"flixel.addons.ui.U","copy_shallow_arr_str",0x2f4748c8,"flixel.addons.ui.U.copy_shallow_arr_str","flixel/addons/ui/U.hx",1107,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1116_FU_,"flixel.addons.ui.U","FU_",0x62f290c6,"flixel.addons.ui.U.FU_","flixel/addons/ui/U.hx",1116,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1130_xml_blend,"flixel.addons.ui.U","xml_blend",0xbe2cd5bf,"flixel.addons.ui.U.xml_blend","flixel/addons/ui/U.hx",1130,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1134_blendModeFromString,"flixel.addons.ui.U","blendModeFromString",0x03077be5,"flixel.addons.ui.U.blendModeFromString","flixel/addons/ui/U.hx",1134,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1173_scaleTileBmp,"flixel.addons.ui.U","scaleTileBmp",0x08b80cf7,"flixel.addons.ui.U.scaleTileBmp","flixel/addons/ui/U.hx",1173,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1241_scaleAndStoreTileset,"flixel.addons.ui.U","scaleAndStoreTileset",0x3f80e40a,"flixel.addons.ui.U.scaleAndStoreTileset","flixel/addons/ui/U.hx",1241,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1262_loadScaledImage,"flixel.addons.ui.U","loadScaledImage",0x44902b71,"flixel.addons.ui.U.loadScaledImage","flixel/addons/ui/U.hx",1262,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1308_loadImageScaleToHeight,"flixel.addons.ui.U","loadImageScaleToHeight",0xb375d501,"flixel.addons.ui.U.loadImageScaleToHeight","flixel/addons/ui/U.hx",1308,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1336_loadMonoScaledImage,"flixel.addons.ui.U","loadMonoScaledImage",0x63eb2c0e,"flixel.addons.ui.U.loadMonoScaledImage","flixel/addons/ui/U.hx",1336,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1407_gfx,"flixel.addons.ui.U","gfx",0x630baa0f,"flixel.addons.ui.U.gfx","flixel/addons/ui/U.hx",1407,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1460_bmpToArrayIntLayer,"flixel.addons.ui.U","bmpToArrayIntLayer",0x35cf3805,"flixel.addons.ui.U.bmpToArrayIntLayer","flixel/addons/ui/U.hx",1460,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1494_bmpToCSVLayer,"flixel.addons.ui.U","bmpToCSVLayer",0xcff6d981,"flixel.addons.ui.U.bmpToCSVLayer","flixel/addons/ui/U.hx",1494,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1529_get_gfx,"flixel.addons.ui.U","get_gfx",0x914f75a6,"flixel.addons.ui.U.get_gfx","flixel/addons/ui/U.hx",1529,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1570_sfx,"flixel.addons.ui.U","sfx",0x6314c51b,"flixel.addons.ui.U.sfx","flixel/addons/ui/U.hx",1570,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1590_intStr_to_arr,"flixel.addons.ui.U","intStr_to_arr",0xf37b0550,"flixel.addons.ui.U.intStr_to_arr","flixel/addons/ui/U.hx",1590,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1620_intStr_to_arrStr,"flixel.addons.ui.U","intStr_to_arrStr",0xae968d41,"flixel.addons.ui.U.intStr_to_arrStr","flixel/addons/ui/U.hx",1620,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1644_dirStr,"flixel.addons.ui.U","dirStr",0xc16e8a8e,"flixel.addons.ui.U.dirStr","flixel/addons/ui/U.hx",1644,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1663_obj_direction,"flixel.addons.ui.U","obj_direction",0x85cba8cd,"flixel.addons.ui.U.obj_direction","flixel/addons/ui/U.hx",1663,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1671_circle_test,"flixel.addons.ui.U","circle_test",0xe94ea6b7,"flixel.addons.ui.U.circle_test","flixel/addons/ui/U.hx",1671,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1679_point_circle_test,"flixel.addons.ui.U","point_circle_test",0x8b175588,"flixel.addons.ui.U.point_circle_test","flixel/addons/ui/U.hx",1679,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1686_aabb_test_mult,"flixel.addons.ui.U","aabb_test_mult",0x7aa50bc8,"flixel.addons.ui.U.aabb_test_mult","flixel/addons/ui/U.hx",1686,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1711_aabb_test,"flixel.addons.ui.U","aabb_test",0xfa707aa7,"flixel.addons.ui.U.aabb_test","flixel/addons/ui/U.hx",1711,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1733_bitStringDimensions,"flixel.addons.ui.U","bitStringDimensions",0x61b76e01,"flixel.addons.ui.U.bitStringDimensions","flixel/addons/ui/U.hx",1733,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1749_splitBitString,"flixel.addons.ui.U","splitBitString",0xe2e84a6e,"flixel.addons.ui.U.splitBitString","flixel/addons/ui/U.hx",1749,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1765_getShortTextFromFlxKeyText,"flixel.addons.ui.U","getShortTextFromFlxKeyText",0x3a78f701,"flixel.addons.ui.U.getShortTextFromFlxKeyText","flixel/addons/ui/U.hx",1765,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1833_getFlxKeyTextFromShortText,"flixel.addons.ui.U","getFlxKeyTextFromShortText",0x32f730b9,"flixel.addons.ui.U.getFlxKeyTextFromShortText","flixel/addons/ui/U.hx",1833,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1902_formatXml,"flixel.addons.ui.U","formatXml",0x5ff16ff6,"flixel.addons.ui.U.formatXml","flixel/addons/ui/U.hx",1902,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1941_strCase,"flixel.addons.ui.U","strCase",0x4a57cb97,"flixel.addons.ui.U.strCase","flixel/addons/ui/U.hx",1941,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1952_unparentXML,"flixel.addons.ui.U","unparentXML",0x3e984fea,"flixel.addons.ui.U.unparentXML","flixel/addons/ui/U.hx",1952,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1962_setButtonLabel,"flixel.addons.ui.U","setButtonLabel",0xa0c61d4a,"flixel.addons.ui.U.setButtonLabel","flixel/addons/ui/U.hx",1962,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1993_getMatrix,"flixel.addons.ui.U","getMatrix",0x7ebd7c8d,"flixel.addons.ui.U.getMatrix","flixel/addons/ui/U.hx",1993,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_2000_boot,"flixel.addons.ui.U","boot",0x43e1dedc,"flixel.addons.ui.U.boot","flixel/addons/ui/U.hx",2000,0x74647d9b)
namespace flixel{
namespace addons{
namespace ui{

void U_obj::__construct() { }

Dynamic U_obj::__CreateEmpty() { return new U_obj; }

void *U_obj::_hx_vtable = 0;

Dynamic U_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< U_obj > _hx_result = new U_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool U_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b4a2212;
}

::String U_obj::xml_str( ::Xml data,::String att,::hx::Null< bool >  __o_lower_case,::String __o_default_str){
            		bool lower_case = __o_lower_case.Default(false);
            		::String default_str = __o_default_str;
            		if (::hx::IsNull(__o_default_str)) default_str = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_57_xml_str)
HXLINE(  58)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE(  59)			if (lower_case) {
HXLINE(  60)				return data->get(att).toLowerCase();
            			}
            			else {
HXLINE(  62)				return data->get(att);
            			}
            		}
HXLINE(  64)		return default_str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_str,return )

::String U_obj::xml_name( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_74_xml_name)
HXLINE(  75)		::String name = ::flixel::addons::ui::U_obj::xml_str(data,HX_("name",4b,72,ff,48),true,HX_("",00,00,00,00));
HXLINE(  76)		if ((name == HX_("",00,00,00,00))) {
HXLINE(  78)			name = ::flixel::addons::ui::U_obj::xml_str(data,HX_("id",db,5b,00,00),true,HX_("",00,00,00,00));
            		}
HXLINE(  80)		return name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,xml_name,return )

 ::Dynamic U_obj::xml_color( ::Xml data,::String att,::hx::Null< bool >  __o_cast32Bit, ::Dynamic defaultColor){
            		bool cast32Bit = __o_cast32Bit.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_90_xml_color)
HXLINE(  91)		 ::Dynamic col = null();
HXLINE(  92)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,att,true,null());
HXLINE(  93)		if ((str != HX_("",00,00,00,00))) {
HXLINE(  95)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN(  95)			if (::hx::IsNull( return_val )) {
HXLINE(  95)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + str));
            			}
HXDLIN(  95)			col = return_val;
            		}
HXLINE(  97)		bool _hx_tmp;
HXDLIN(  97)		if (::hx::IsNull( col )) {
HXLINE(  97)			_hx_tmp = ::hx::IsNotNull( defaultColor );
            		}
            		else {
HXLINE(  97)			_hx_tmp = false;
            		}
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  99)			col = defaultColor;
            		}
HXLINE( 101)		return col;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_color,return )

::Array< int > U_obj::xml_iArray( ::Xml data,::String att){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_105_xml_iArray)
HXLINE( 106)		::Array< ::String > arr = ::flixel::addons::ui::U_obj::xml_strArray(data,att,null(),null());
HXLINE( 107)		::Array< int > ints = null();
HXLINE( 108)		bool _hx_tmp;
HXDLIN( 108)		if (::hx::IsNotNull( arr )) {
HXLINE( 108)			_hx_tmp = (arr->length > 0);
            		}
            		else {
HXLINE( 108)			_hx_tmp = false;
            		}
HXDLIN( 108)		if (_hx_tmp) {
HXLINE( 110)			ints = ::Array_obj< int >::__new(0);
HXLINE( 111)			{
HXLINE( 111)				int _g = 0;
HXDLIN( 111)				int _g1 = arr->length;
HXDLIN( 111)				while((_g < _g1)){
HXLINE( 111)					_g = (_g + 1);
HXDLIN( 111)					int i = (_g - 1);
HXLINE( 113)					ints[i] = ( (int)(::Std_obj::parseInt(arr->__get(i))) );
            				}
            			}
            		}
HXLINE( 116)		return ints;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,xml_iArray,return )

::Array< Float > U_obj::xml_fArray( ::Xml data,::String att){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_120_xml_fArray)
HXLINE( 121)		::Array< ::String > arr = ::flixel::addons::ui::U_obj::xml_strArray(data,att,null(),null());
HXLINE( 122)		::Array< Float > fs = null();
HXLINE( 123)		bool _hx_tmp;
HXDLIN( 123)		if (::hx::IsNotNull( arr )) {
HXLINE( 123)			_hx_tmp = (arr->length > 0);
            		}
            		else {
HXLINE( 123)			_hx_tmp = false;
            		}
HXDLIN( 123)		if (_hx_tmp) {
HXLINE( 125)			fs = ::Array_obj< Float >::__new(0);
HXLINE( 126)			{
HXLINE( 126)				int _g = 0;
HXDLIN( 126)				int _g1 = arr->length;
HXDLIN( 126)				while((_g < _g1)){
HXLINE( 126)					_g = (_g + 1);
HXDLIN( 126)					int i = (_g - 1);
HXLINE( 128)					fs[i] = ::Std_obj::parseFloat(arr->__get(i));
            				}
            			}
            		}
HXLINE( 131)		return fs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,xml_fArray,return )

::Array< ::String > U_obj::xml_strArray( ::Xml data,::String att,::hx::Null< bool >  __o_lowerCase,::Array< ::String > default_){
            		bool lowerCase = __o_lowerCase.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_135_xml_strArray)
HXLINE( 136)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,att,lowerCase,null());
HXLINE( 137)		if ((str != HX_("",00,00,00,00))) {
HXLINE( 139)			::Array< ::String > arr = str.split(HX_(",",2c,00,00,00));
HXLINE( 140)			return arr;
            		}
            		else {
HXLINE( 144)			return default_;
            		}
HXLINE( 137)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_strArray,return )

::Array< int > U_obj::xml_colorArray( ::Xml data,::String att,::hx::Null< bool >  __o_cast32Bit){
            		bool cast32Bit = __o_cast32Bit.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_150_xml_colorArray)
HXLINE( 151)		::Array< ::String > arr = ::flixel::addons::ui::U_obj::xml_strArray(data,att,null(),null());
HXLINE( 152)		::Array< int > cols = null();
HXLINE( 153)		bool _hx_tmp;
HXDLIN( 153)		if (::hx::IsNotNull( arr )) {
HXLINE( 153)			_hx_tmp = (arr->length > 0);
            		}
            		else {
HXLINE( 153)			_hx_tmp = false;
            		}
HXDLIN( 153)		if (_hx_tmp) {
HXLINE( 155)			cols = ::Array_obj< int >::__new(0);
HXLINE( 156)			{
HXLINE( 156)				int _g = 0;
HXDLIN( 156)				int _g1 = arr->length;
HXDLIN( 156)				while((_g < _g1)){
HXLINE( 156)					_g = (_g + 1);
HXDLIN( 156)					int i = (_g - 1);
HXLINE( 158)					::String str = arr->__get(i);
HXDLIN( 158)					 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN( 158)					if (::hx::IsNull( return_val )) {
HXLINE( 158)						HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + str));
            					}
HXDLIN( 158)					cols[i] = ( (int)(return_val) );
            				}
            			}
            		}
HXLINE( 161)		return cols;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_colorArray,return )

Float U_obj::perc_to_float(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_170_perc_to_float)
HXLINE( 171)		int _hx_tmp = str.lastIndexOf(HX_("%",25,00,00,00),null());
HXDLIN( 171)		if ((_hx_tmp == (str.length - 1))) {
HXLINE( 172)			str = str.substr(0,(str.length - 1));
HXLINE( 173)			 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("([0-9]+)?(\\.)?([0-9]*)?",69,52,2d,64),HX_("",00,00,00,00));
HXLINE( 174)			if (r->match(str)) {
HXLINE( 175)				 ::Dynamic match = r->matchedPos();
HXLINE( 176)				bool _hx_tmp1;
HXDLIN( 176)				if (::hx::IsEq( match->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 )) {
HXLINE( 176)					_hx_tmp1 = ::hx::IsEq( match->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),str.length );
            				}
            				else {
HXLINE( 176)					_hx_tmp1 = false;
            				}
HXDLIN( 176)				if (_hx_tmp1) {
HXLINE( 177)					Float perc_float = ::Std_obj::parseFloat(str);
HXLINE( 178)					perc_float = (perc_float / ( (Float)(100) ));
HXLINE( 179)					return perc_float;
            				}
            			}
            		}
HXLINE( 183)		return ::Math_obj::NaN;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,perc_to_float,return )

bool U_obj::isStrNum(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_186_isStrNum)
HXLINE( 187)		bool _hx_tmp;
HXDLIN( 187)		if (::hx::IsNotNull( str )) {
HXLINE( 187)			_hx_tmp = (str == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 187)			_hx_tmp = true;
            		}
HXDLIN( 187)		if (_hx_tmp) {
HXLINE( 187)			return false;
            		}
HXLINE( 188)		 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("-?([0-9]+)?(\\.)?([0-9]*)?",37,d9,6d,5d),HX_("",00,00,00,00));
HXLINE( 189)		if (r->match(str)) {
HXLINE( 190)			 ::Dynamic p = r->matchedPos();
HXLINE( 191)			bool _hx_tmp1;
HXDLIN( 191)			if (::hx::IsEq( p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 )) {
HXLINE( 191)				_hx_tmp1 = ::hx::IsEq( p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),str.length );
            			}
            			else {
HXLINE( 191)				_hx_tmp1 = false;
            			}
HXDLIN( 191)			if (_hx_tmp1) {
HXLINE( 192)				return true;
            			}
            		}
HXLINE( 195)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,isStrNum,return )

bool U_obj::isStrInt(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_198_isStrInt)
HXLINE( 199)		 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[0-9]+",8f,d9,9f,23),HX_("",00,00,00,00));
HXLINE( 200)		if (r->match(str)) {
HXLINE( 201)			 ::Dynamic p = r->matchedPos();
HXLINE( 202)			bool _hx_tmp;
HXDLIN( 202)			if (::hx::IsEq( p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 )) {
HXLINE( 202)				_hx_tmp = ::hx::IsEq( p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),str.length );
            			}
            			else {
HXLINE( 202)				_hx_tmp = false;
            			}
HXDLIN( 202)			if (_hx_tmp) {
HXLINE( 203)				return true;
            			}
            		}
HXLINE( 206)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,isStrInt,return )

bool U_obj::isStrFloat(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_209_isStrFloat)
HXLINE( 210)		 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[0-9]+\\.[0-9]+",f0,b3,16,fc),HX_("",00,00,00,00));
HXLINE( 211)		if (r->match(str)) {
HXLINE( 212)			 ::Dynamic p = r->matchedPos();
HXLINE( 213)			bool _hx_tmp;
HXDLIN( 213)			if (::hx::IsEq( p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 )) {
HXLINE( 213)				_hx_tmp = ::hx::IsEq( p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),str.length );
            			}
            			else {
HXLINE( 213)				_hx_tmp = false;
            			}
HXDLIN( 213)			if (_hx_tmp) {
HXLINE( 214)				return true;
            			}
            		}
HXLINE( 217)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,isStrFloat,return )

Float U_obj::xml_f( ::Xml data,::String att,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_228_xml_f)
HXLINE( 229)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 230)			return ::Std_obj::parseFloat(data->get(att));
            		}
HXLINE( 231)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_f,return )

int U_obj::xml_i( ::Xml data,::String att,::hx::Null< int >  __o_default_){
            		int default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_242_xml_i)
HXLINE( 243)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 244)			return ( (int)(::Std_obj::parseInt(data->get(att))) );
            		}
HXLINE( 245)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_i,return )

 ::flixel::math::FlxBasePoint U_obj::xml_pt( ::Xml data,::String att, ::flixel::math::FlxBasePoint default_){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_256_xml_pt)
HXLINE( 257)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 258)			return ::flixel::addons::ui::U_obj::pointify(data->get(att));
            		}
HXLINE( 260)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_pt,return )

bool U_obj::boolify(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_263_boolify)
HXLINE( 264)		str = str.toLowerCase();
HXLINE( 265)		bool _hx_tmp;
HXDLIN( 265)		if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE( 265)			_hx_tmp = (str == HX_("1",31,00,00,00));
            		}
            		else {
HXLINE( 265)			_hx_tmp = true;
            		}
HXDLIN( 265)		if (_hx_tmp) {
HXLINE( 266)			return true;
            		}
HXLINE( 268)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,boolify,return )

 ::flixel::math::FlxBasePoint U_obj::pointify(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_279_pointify)
HXLINE( 280)		 ::flixel::math::FlxBasePoint pt = null();
HXLINE( 281)		if (::hx::IsNotNull( str )) {
HXLINE( 282)			::Array< ::String > arr = ::Array_obj< ::String >::fromData( _hx_array_data_ef400604_21,5);
HXLINE( 283)			{
HXLINE( 283)				int _g = 0;
HXDLIN( 283)				while((_g < arr->length)){
HXLINE( 283)					::String thing = arr->__get(_g);
HXDLIN( 283)					_g = (_g + 1);
HXLINE( 284)					while((str.indexOf(thing,null()) != -1)){
HXLINE( 285)						str = ::StringTools_obj::replace(str,thing,HX_("",00,00,00,00));
            					}
            				}
            			}
HXLINE( 288)			if ((str.indexOf(HX_(",",2c,00,00,00),null()) == -1)) {
HXLINE( 289)				if ((str.indexOf(HX_("x",78,00,00,00),null()) != -1)) {
HXLINE( 290)					str = ::StringTools_obj::replace(str,HX_("x",78,00,00,00),HX_(",",2c,00,00,00));
            				}
            			}
HXLINE( 293)			arr = str.split(HX_(",",2c,00,00,00));
HXLINE( 294)			if ((arr->length == 2)) {
HXLINE( 295)				Float x = ::Std_obj::parseFloat(arr->__get(0));
HXDLIN( 295)				pt =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,x,::Std_obj::parseFloat(arr->__get(1)));
            			}
            		}
HXLINE( 298)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,pointify,return )

bool U_obj::compareStringVars(::String variable,::String otherValue,::String type,::String __o_op){
            		::String op = __o_op;
            		if (::hx::IsNull(__o_op)) op = HX_("==",60,35,00,00);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_310_compareStringVars)
HXLINE( 311)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ){
HXLINE( 334)			bool ba = ::flixel::addons::ui::U_obj::boolify(variable);
HXLINE( 335)			bool bb = ::flixel::addons::ui::U_obj::boolify(otherValue);
HXLINE( 336)			bool _hx_tmp;
HXDLIN( 336)			if ((op != HX_("==",60,35,00,00))) {
HXLINE( 336)				_hx_tmp = (op == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 336)				_hx_tmp = true;
            			}
HXDLIN( 336)			if (_hx_tmp) {
HXLINE( 336)				return (ba == bb);
            			}
            			else {
HXLINE( 337)				bool _hx_tmp1;
HXDLIN( 337)				if ((op != HX_("!==",c1,3f,19,00))) {
HXLINE( 337)					_hx_tmp1 = (op == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 337)					_hx_tmp1 = true;
            				}
HXDLIN( 337)				if (_hx_tmp1) {
HXLINE( 337)					return (ba != bb);
            				}
            			}
HXLINE( 333)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 325)			Float fa = ::Std_obj::parseFloat(variable);
HXLINE( 326)			Float fb = ::Std_obj::parseFloat(otherValue);
HXLINE( 327)			bool _hx_tmp2;
HXDLIN( 327)			if ((op != HX_("==",60,35,00,00))) {
HXLINE( 327)				_hx_tmp2 = (op == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 327)				_hx_tmp2 = true;
            			}
HXDLIN( 327)			if (_hx_tmp2) {
HXLINE( 327)				return (fa == fb);
            			}
            			else {
HXLINE( 328)				bool _hx_tmp3;
HXDLIN( 328)				if ((op != HX_("!==",c1,3f,19,00))) {
HXLINE( 328)					_hx_tmp3 = (op == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 328)					_hx_tmp3 = true;
            				}
HXDLIN( 328)				if (_hx_tmp3) {
HXLINE( 328)					return (fa != fb);
            				}
            				else {
HXLINE( 329)					if ((op == HX_("<",3c,00,00,00))) {
HXLINE( 329)						return (fa < fb);
            					}
            					else {
HXLINE( 330)						if ((op == HX_(">",3e,00,00,00))) {
HXLINE( 330)							return (fa > fb);
            						}
            						else {
HXLINE( 331)							if ((op == HX_("<=",81,34,00,00))) {
HXLINE( 331)								return (fa <= fb);
            							}
            							else {
HXLINE( 332)								if ((op == HX_(">=",3f,36,00,00))) {
HXLINE( 332)									return (fa >= fb);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 324)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE( 316)			int ia = ( (int)(::Std_obj::parseInt(variable)) );
HXLINE( 317)			int ib = ( (int)(::Std_obj::parseInt(otherValue)) );
HXLINE( 318)			bool _hx_tmp4;
HXDLIN( 318)			if ((op != HX_("==",60,35,00,00))) {
HXLINE( 318)				_hx_tmp4 = (op == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 318)				_hx_tmp4 = true;
            			}
HXDLIN( 318)			if (_hx_tmp4) {
HXLINE( 318)				return (ia == ib);
            			}
            			else {
HXLINE( 319)				bool _hx_tmp5;
HXDLIN( 319)				if ((op != HX_("!==",c1,3f,19,00))) {
HXLINE( 319)					_hx_tmp5 = (op == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 319)					_hx_tmp5 = true;
            				}
HXDLIN( 319)				if (_hx_tmp5) {
HXLINE( 319)					return (ia != ib);
            				}
            				else {
HXLINE( 320)					if ((op == HX_("<",3c,00,00,00))) {
HXLINE( 320)						return (ia < ib);
            					}
            					else {
HXLINE( 321)						if ((op == HX_(">",3e,00,00,00))) {
HXLINE( 321)							return (ia > ib);
            						}
            						else {
HXLINE( 322)							if ((op == HX_("<=",81,34,00,00))) {
HXLINE( 322)								return (ia <= ib);
            							}
            							else {
HXLINE( 323)								if ((op == HX_(">=",3f,36,00,00))) {
HXLINE( 323)									return (ia >= ib);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 315)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE( 313)			bool _hx_tmp6;
HXDLIN( 313)			if ((op != HX_("==",60,35,00,00))) {
HXLINE( 313)				_hx_tmp6 = (op == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 313)				_hx_tmp6 = true;
            			}
HXDLIN( 313)			if (_hx_tmp6) {
HXLINE( 313)				return (variable == otherValue);
            			}
HXLINE( 314)			bool _hx_tmp7;
HXDLIN( 314)			if ((op != HX_("!==",c1,3f,19,00))) {
HXLINE( 314)				_hx_tmp7 = (op == HX_("!=",fc,1c,00,00));
            			}
            			else {
HXLINE( 314)				_hx_tmp7 = true;
            			}
HXDLIN( 314)			if (_hx_tmp7) {
HXLINE( 314)				return (variable != otherValue);
            			}
HXLINE( 312)			goto _hx_goto_22;
            		}
            		_hx_goto_22:;
HXLINE( 339)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,compareStringVars,return )

bool U_obj::xml_bool( ::Xml data,::String att,::hx::Null< bool >  __o_default_){
            		bool default_ = __o_default_.Default(false);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_350_xml_bool)
HXLINE( 351)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 352)			::String str = data->get(att);
HXLINE( 353)			str = str.toLowerCase();
HXLINE( 354)			bool _hx_tmp;
HXDLIN( 354)			if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE( 354)				_hx_tmp = (str == HX_("1",31,00,00,00));
            			}
            			else {
HXLINE( 354)				_hx_tmp = true;
            			}
HXDLIN( 354)			if (_hx_tmp) {
HXLINE( 355)				return true;
            			}
HXLINE( 357)			return false;
            		}
HXLINE( 359)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_bool,return )

::String U_obj::xml_gfx( ::Xml data,::String att,::hx::Null< bool >  __o_test){
            		bool test = __o_test.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_363_xml_gfx)
HXLINE( 364)		::String str = HX_("",00,00,00,00);
HXLINE( 365)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 367)			str = data->get(att);
HXLINE( 368)			bool _hx_tmp;
HXDLIN( 368)			if ((str != HX_("",00,00,00,00))) {
HXLINE( 368)				_hx_tmp = ::hx::IsNull( str );
            			}
            			else {
HXLINE( 368)				_hx_tmp = true;
            			}
HXDLIN( 368)			if (_hx_tmp) {
HXLINE( 370)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 374)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXLINE( 375)				if (test) {
HXLINE( 377)					try {
            						HX_STACK_CATCHABLE(::String, 0);
            						HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 379)						if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE( 381)							HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + att) + HX_("\"",22,00,00,00)));
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            							HX_STACK_BEGIN_CATCH
            							::String msg1 = _hx_e;
HXLINE( 386)							 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN( 386)							_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            						}
            						else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::ValueException _g = _hx_e;
HXLINE( 384)							{
HXLINE( 384)								null();
            							}
HXLINE( 377)							if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 384)								::String msg1 = ( (::String)(_g->value) );
HXLINE( 386)								{
HXLINE( 386)									 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN( 386)									_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            								}
            							}
            							else {
HXLINE( 377)								HX_STACK_DO_THROW(_g);
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE( 391)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_gfx,return )

void U_obj::center( ::flixel::FlxObject fb1, ::flixel::FlxObject fb2,::hx::Null< bool >  __o_centerX,::hx::Null< bool >  __o_centerY){
            		bool centerX = __o_centerX.Default(true);
            		bool centerY = __o_centerY.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_402_center)
HXLINE( 403)		if (centerX) {
HXLINE( 403)			Float fb11 = fb1->x;
HXDLIN( 403)			Float _hx_tmp = fb1->get_width();
HXDLIN( 403)			fb2->set_x((fb11 + ((_hx_tmp - fb2->get_width()) / ( (Float)(2) ))));
            		}
HXLINE( 404)		if (centerY) {
HXLINE( 404)			Float fb12 = fb1->y;
HXDLIN( 404)			Float _hx_tmp1 = fb1->get_height();
HXDLIN( 404)			fb2->set_y((fb12 + ((_hx_tmp1 - fb2->get_height()) / ( (Float)(2) ))));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,center,(void))

bool U_obj::test_int(int i1,::String test,int i2){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_408_test_int)
HXDLIN( 408)		::String _hx_switch_0 = test;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE( 414)			return (i1 != i2);
HXDLIN( 414)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE( 410)			return (i1 < i2);
HXDLIN( 410)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE( 412)			return (i1 <= i2);
HXDLIN( 412)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE( 409)			return (i1 == i2);
HXDLIN( 409)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE( 411)			return (i1 > i2);
HXDLIN( 411)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE( 413)			return (i1 >= i2);
HXDLIN( 413)			goto _hx_goto_27;
            		}
            		/* default */{
HXLINE( 415)			return false;
            		}
            		_hx_goto_27:;
HXLINE( 408)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,test_int,return )

bool U_obj::test_float(Float f1,::String test,int f2){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_420_test_float)
HXDLIN( 420)		::String _hx_switch_0 = test;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE( 426)			return (f1 != f2);
HXDLIN( 426)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE( 422)			return (f1 < f2);
HXDLIN( 422)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE( 424)			return (f1 <= f2);
HXDLIN( 424)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE( 421)			return (f1 == f2);
HXDLIN( 421)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE( 423)			return (f1 > f2);
HXDLIN( 423)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE( 425)			return (f1 >= f2);
HXDLIN( 425)			goto _hx_goto_29;
            		}
            		/* default */{
HXLINE( 427)			return false;
            		}
            		_hx_goto_29:;
HXLINE( 420)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,test_float,return )

::String U_obj::padDigits(int i,int d,::String __o_padChar){
            		::String padChar = __o_padChar;
            		if (::hx::IsNull(__o_padChar)) padChar = HX_("0",30,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_439_padDigits)
HXLINE( 440)		Float f = ( (Float)(i) );
HXLINE( 441)		::String str = HX_("",00,00,00,00);
HXLINE( 442)		int num_digits = 0;
HXLINE( 443)		while((f >= 1)){
HXLINE( 444)			f = (f / ( (Float)(10) ));
HXLINE( 445)			num_digits = (num_digits + 1);
            		}
HXLINE( 448)		if ((i == 0)) {
HXLINE( 449)			num_digits = 1;
            		}
HXLINE( 452)		if ((num_digits < d)) {
HXLINE( 453)			int _g = 0;
HXDLIN( 453)			int _g1 = (d - num_digits);
HXDLIN( 453)			while((_g < _g1)){
HXLINE( 453)				_g = (_g + 1);
HXDLIN( 453)				int temp = (_g - 1);
HXLINE( 454)				str = (str + padChar);
            			}
            		}
HXLINE( 458)		return (str + ::Std_obj::string(i));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,padDigits,return )

 ::openfl::geom::Point U_obj::conformToBounds( ::openfl::geom::Point pt, ::Dynamic maxMin){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_462_conformToBounds)
HXLINE( 463)		if (::hx::IsNotNull( maxMin )) {
HXLINE( 465)			if (::hx::IsLess( pt->x,maxMin->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE( 465)				pt->x = ( (Float)(maxMin->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) );
            			}
HXLINE( 466)			if (::hx::IsLess( pt->y,maxMin->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE( 466)				pt->y = ( (Float)(maxMin->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) );
            			}
HXLINE( 467)			if (::hx::IsGreater( pt->x,maxMin->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE( 467)				pt->x = ( (Float)(maxMin->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) );
            			}
HXLINE( 468)			if (::hx::IsGreater( pt->x,maxMin->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE( 468)				pt->y = ( (Float)(maxMin->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) );
            			}
            		}
HXLINE( 470)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,conformToBounds,return )

int U_obj::parseHex(::String str,::hx::Null< bool >  __o_cast32Bit,::hx::Null< bool >  __o_safe,::hx::Null< int >  __o_default_color){
            		bool cast32Bit = __o_cast32Bit.Default(false);
            		bool safe = __o_safe.Default(false);
            		int default_color = __o_default_color.Default(0);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_482_parseHex)
HXLINE( 483)		 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXLINE( 484)		if (::hx::IsNull( return_val )) {
HXLINE( 486)			if (!(safe)) {
HXLINE( 488)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + str));
            			}
            			else {
HXLINE( 492)				return_val = default_color;
            			}
            		}
HXLINE( 495)		return ( (int)(return_val) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,parseHex,return )

int U_obj::hexChar2dec(::String hex_char){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_505_hexChar2dec)
HXDLIN( 505)		::String _hx_switch_0 = hex_char;
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("10",df,2a,00,00)) ||  (_hx_switch_0==HX_("2",32,00,00,00)) ||  (_hx_switch_0==HX_("3",33,00,00,00)) ||  (_hx_switch_0==HX_("4",34,00,00,00)) ||  (_hx_switch_0==HX_("5",35,00,00,00)) ||  (_hx_switch_0==HX_("6",36,00,00,00)) ||  (_hx_switch_0==HX_("7",37,00,00,00)) ||  (_hx_switch_0==HX_("8",38,00,00,00)) ||  (_hx_switch_0==HX_("9",39,00,00,00)) ){
HXLINE( 506)			return ( (int)(::Std_obj::parseInt(hex_char)) );
HXDLIN( 506)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("A",41,00,00,00)) ||  (_hx_switch_0==HX_("a",61,00,00,00)) ){
HXLINE( 507)			return 10;
HXDLIN( 507)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("B",42,00,00,00)) ||  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE( 508)			return 11;
HXDLIN( 508)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("C",43,00,00,00)) ||  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE( 509)			return 12;
HXDLIN( 509)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("D",44,00,00,00)) ||  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE( 510)			return 13;
HXDLIN( 510)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("E",45,00,00,00)) ||  (_hx_switch_0==HX_("e",65,00,00,00)) ){
HXLINE( 511)			return 14;
HXDLIN( 511)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("F",46,00,00,00)) ||  (_hx_switch_0==HX_("f",66,00,00,00)) ){
HXLINE( 512)			return 15;
HXDLIN( 512)			goto _hx_goto_36;
            		}
            		/* default */{
HXLINE( 513)			HX_STACK_DO_THROW(((HX_("U.hexChar2dec() illegal char(",11,98,18,de) + hex_char) + HX_(")",29,00,00,00)));
            		}
            		_hx_goto_36:;
HXLINE( 505)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,hexChar2dec,return )

int U_obj::hex2dec(::String hex_str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_523_hex2dec)
HXLINE( 524)		int length = hex_str.length;
HXLINE( 525)		int place_mult = 1;
HXLINE( 526)		int sum = 0;
HXLINE( 527)		int i = (length - 1);
HXDLIN( 527)		while((i >= 0)){
HXLINE( 528)			::String char_hex = hex_str.substr(i,1);
HXLINE( 529)			int char_int;
HXDLIN( 529)			::String _hx_switch_0 = char_hex;
            			if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("10",df,2a,00,00)) ||  (_hx_switch_0==HX_("2",32,00,00,00)) ||  (_hx_switch_0==HX_("3",33,00,00,00)) ||  (_hx_switch_0==HX_("4",34,00,00,00)) ||  (_hx_switch_0==HX_("5",35,00,00,00)) ||  (_hx_switch_0==HX_("6",36,00,00,00)) ||  (_hx_switch_0==HX_("7",37,00,00,00)) ||  (_hx_switch_0==HX_("8",38,00,00,00)) ||  (_hx_switch_0==HX_("9",39,00,00,00)) ){
HXLINE( 529)				char_int = ( (int)(::Std_obj::parseInt(char_hex)) );
HXDLIN( 529)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("A",41,00,00,00)) ||  (_hx_switch_0==HX_("a",61,00,00,00)) ){
HXLINE( 529)				char_int = 10;
HXDLIN( 529)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("B",42,00,00,00)) ||  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE( 529)				char_int = 11;
HXDLIN( 529)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("C",43,00,00,00)) ||  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE( 529)				char_int = 12;
HXDLIN( 529)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("D",44,00,00,00)) ||  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE( 529)				char_int = 13;
HXDLIN( 529)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("E",45,00,00,00)) ||  (_hx_switch_0==HX_("e",65,00,00,00)) ){
HXLINE( 529)				char_int = 14;
HXDLIN( 529)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("F",46,00,00,00)) ||  (_hx_switch_0==HX_("f",66,00,00,00)) ){
HXLINE( 529)				char_int = 15;
HXDLIN( 529)				goto _hx_goto_39;
            			}
            			/* default */{
HXLINE( 529)				HX_STACK_DO_THROW(((HX_("U.hexChar2dec() illegal char(",11,98,18,de) + char_hex) + HX_(")",29,00,00,00)));
            			}
            			_hx_goto_39:;
HXLINE( 530)			sum = (sum + (char_int * place_mult));
HXLINE( 531)			place_mult = (place_mult * 16);
HXLINE( 532)			i = (i - 1);
            		}
HXLINE( 534)		return sum;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,hex2dec,return )

::Array< int > U_obj::hex2rgb(int hex){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_544_hex2rgb)
HXDLIN( 544)		return ::Array_obj< int >::__new(3)->init(0,((hex >> 16) & 255))->init(1,((hex >> 8) & 255))->init(2,(hex & 255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,hex2rgb,return )

 ::flixel::math::FlxBasePoint U_obj::applyResize(Float resize_ratio,int resize_ratio_axis,Float w,Float h, ::flixel::math::FlxBasePoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_550_applyResize)
HXLINE( 551)		if (::hx::IsNull( pt )) {
HXLINE( 553)			pt =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ));
            		}
HXLINE( 555)		if ((resize_ratio > 0)) {
HXLINE( 556)			Float effective_ratio = (w / h);
HXLINE( 557)			if ((::Math_obj::abs((effective_ratio - resize_ratio)) > ((Float)0.0001))) {
HXLINE( 558)				if ((resize_ratio_axis == 1)) {
HXLINE( 560)					h = (w * (( (Float)(1) ) / resize_ratio));
            				}
            				else {
HXLINE( 564)					w = (h * (( (Float)(1) ) / resize_ratio));
            				}
            			}
            		}
HXLINE( 568)		int iw = ::Std_obj::_hx_int(w);
HXLINE( 569)		if ((iw < 1)) {
HXLINE( 570)			w = ( (Float)(1) );
            		}
HXLINE( 572)		int ih = ::Std_obj::_hx_int(h);
HXLINE( 573)		if ((ih < 1)) {
HXLINE( 574)			h = ( (Float)(1) );
            		}
HXLINE( 576)		{
HXLINE( 576)			pt->set_x(w);
HXDLIN( 576)			pt->set_y(h);
            		}
HXLINE( 577)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(U_obj,applyResize,return )

int U_obj::rgb2hex(int r,int g,int b){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_589_rgb2hex)
HXDLIN( 589)		return (((r << 16) | (g << 8)) | b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,rgb2hex,return )

int U_obj::interpolate(int hex1,int hex2,Float amt){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_600_interpolate)
HXLINE( 601)		if ((amt < 0)) {
HXLINE( 601)			amt = ( (Float)(0) );
            		}
            		else {
HXLINE( 601)			if ((amt > 1)) {
HXLINE( 601)				amt = ( (Float)(1) );
            			}
            		}
HXLINE( 603)		Float a1 = (( (Float)(1) ) - amt);
HXLINE( 605)		int c1r = ((hex1 >> 16) & 255);
HXLINE( 606)		int c1g = ((hex1 >> 8) & 255);
HXLINE( 607)		int c1b = (hex1 & 255);
HXLINE( 609)		int c2r = ((hex2 >> 16) & 255);
HXLINE( 610)		int c2g = ((hex2 >> 8) & 255);
HXLINE( 611)		int c2b = (hex2 & 255);
HXLINE( 613)		int c3r = ::Std_obj::_hx_int(((( (Float)(c1r) ) * a1) + (( (Float)(c2r) ) * amt)));
HXLINE( 614)		int c3g = ::Std_obj::_hx_int(((( (Float)(c1g) ) * a1) + (( (Float)(c2g) ) * amt)));
HXLINE( 615)		int c3b = ::Std_obj::_hx_int(((( (Float)(c1b) ) * a1) + (( (Float)(c2b) ) * amt)));
HXLINE( 617)		return (((c3r << 16) | (c3g << 8)) | c3b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,interpolate,return )

::Array< ::Dynamic> U_obj::getLocList(int xmin,int ymin,int xmax,int ymax){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_636_getLocList)
HXLINE( 637)		::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new();
HXLINE( 638)		{
HXLINE( 638)			int _g = ymin;
HXDLIN( 638)			int _g1 = (ymax + 1);
HXDLIN( 638)			while((_g < _g1)){
HXLINE( 638)				_g = (_g + 1);
HXDLIN( 638)				int yy = (_g - 1);
HXLINE( 639)				{
HXLINE( 639)					int _g2 = xmin;
HXDLIN( 639)					int _g3 = (xmax + 1);
HXDLIN( 639)					while((_g2 < _g3)){
HXLINE( 639)						_g2 = (_g2 + 1);
HXDLIN( 639)						int xx = (_g2 - 1);
HXLINE( 640)						 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(xx,yy);
HXDLIN( 640)						point->_inPool = false;
HXDLIN( 640)						list->push(point);
            					}
            				}
            			}
            		}
HXLINE( 642)		return list;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,getLocList,return )

void U_obj::disposeXML( ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_645_disposeXML)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,disposeXML,(void))

 ::Xml U_obj::copyAccess( ::Xml fast){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_660_copyAccess)
HXDLIN( 660)		 ::Xml x = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(fast,null()))->firstElement();
HXDLIN( 660)		bool _hx_tmp;
HXDLIN( 660)		if ((x->nodeType != ::Xml_obj::Document)) {
HXDLIN( 660)			_hx_tmp = (x->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXDLIN( 660)			_hx_tmp = false;
            		}
HXDLIN( 660)		if (_hx_tmp) {
HXDLIN( 660)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            		}
HXDLIN( 660)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copyAccess,return )

 ::Xml U_obj::copyXml( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_664_copyXml)
HXDLIN( 664)		return ::Xml_obj::parse(::haxe::xml::Printer_obj::print(data,null()))->firstElement();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copyXml,return )

 ::Xml U_obj::readXml(::String path){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_668_readXml)
HXLINE( 669)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 670)			::String content = ::sys::io::File_obj::getContent(path);
HXLINE( 671)			return ::Xml_obj::parse(content)->firstElement();
            		}
HXLINE( 673)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,readXml,return )

 ::Xml U_obj::readAccess(::String path){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_676_readAccess)
HXLINE( 677)		 ::Xml xml = ::flixel::addons::ui::U_obj::readXml(path);
HXLINE( 678)		if (::hx::IsNotNull( xml )) {
HXLINE( 679)			bool _hx_tmp;
HXDLIN( 679)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 679)				_hx_tmp = (xml->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 679)				_hx_tmp = false;
            			}
HXDLIN( 679)			if (_hx_tmp) {
HXLINE( 679)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            			}
HXDLIN( 679)			return xml;
            		}
HXLINE( 681)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,readAccess,return )

::String U_obj::fixSlash(::String path){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_685_fixSlash)
HXLINE( 686)		::String goodSlash = HX_("\\",5c,00,00,00);
HXLINE( 687)		::String badSlash;
HXDLIN( 687)		if ((goodSlash == HX_("/",2f,00,00,00))) {
HXLINE( 687)			badSlash = HX_("\\",5c,00,00,00);
            		}
            		else {
HXLINE( 687)			badSlash = HX_("/",2f,00,00,00);
            		}
HXLINE( 688)		while((path.indexOf(badSlash,null()) != -1)){
HXLINE( 690)			path = ::StringTools_obj::replace(path,badSlash,goodSlash);
            		}
HXLINE( 692)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,fixSlash,return )

::String U_obj::endline(){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_700_endline)
HXDLIN( 700)		return HX_("\r\n",5d,0b,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(U_obj,endline,return )

::String U_obj::slash(){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_709_slash)
HXDLIN( 709)		return HX_("\\",5c,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(U_obj,slash,return )

void U_obj::writeXml( ::Xml data,::String path,::hx::Null< bool >  __o_wrapData,::hx::Null< bool >  __o_addHeader){
            		bool wrapData = __o_wrapData.Default(true);
            		bool addHeader = __o_addHeader.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_715_writeXml)
HXLINE( 716)		 ::Xml xml = data;
HXLINE( 718)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 720)			::sys::FileSystem_obj::deleteFile(path);
            		}
HXLINE( 723)		::String xmlString = HX_("",00,00,00,00);
HXLINE( 725)		 ::sys::io::FileOutput fout = ::sys::io::File_obj::write(path,false);
HXLINE( 726)		if (addHeader) {
HXLINE( 727)			xmlString = HX_("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n",73,6f,3d,1e);
            		}
HXLINE( 729)		if (wrapData) {
HXLINE( 730)			xmlString = (xmlString + HX_("<data>\n",f2,bf,8c,e1));
            		}
HXLINE( 733)		xmlString = (xmlString + ::haxe::xml::Printer_obj::print(xml,null()));
HXLINE( 735)		if (wrapData) {
HXLINE( 736)			xmlString = (xmlString + HX_("</data>",81,d9,55,5e));
            		}
HXLINE( 739)		fout->writeString(xmlString,null());
HXLINE( 740)		fout->close();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,writeXml,(void))

 ::Dynamic U_obj::getXML(::String str,::String __o_folder){
            		::String folder = __o_folder;
            		if (::hx::IsNull(__o_folder)) folder = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_744_getXML)
HXLINE( 745)		::String id = str;
HXLINE( 746)		if ((folder != HX_("",00,00,00,00))) {
HXLINE( 747)			id = ((folder + HX_("/",2f,00,00,00)) + id);
            		}
HXLINE( 749)		return ::flixel::addons::ui::U_obj::xml(id,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,getXML,return )

 ::Dynamic U_obj::json(::String str,::String __o_extension,::String __o_dir){
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_("json",28,42,68,46);
            		::String dir = __o_dir;
            		if (::hx::IsNull(__o_dir)) dir = HX_("assets/json/",3b,a3,bc,20);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_752_json)
HXLINE( 753)		::String json_str = ::openfl::utils::Assets_obj::getText((((dir + str) + HX_(".",2e,00,00,00)) + extension));
HXLINE( 754)		bool _hx_tmp;
HXDLIN( 754)		if ((json_str != HX_("",00,00,00,00))) {
HXLINE( 754)			_hx_tmp = ::hx::IsNotNull( json_str );
            		}
            		else {
HXLINE( 754)			_hx_tmp = false;
            		}
HXDLIN( 754)		if (_hx_tmp) {
HXLINE( 755)			 ::Dynamic the_json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,json_str)->doParse();
HXLINE( 756)			return the_json;
            		}
HXLINE( 758)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,json,return )

 ::Dynamic U_obj::field( ::Dynamic object,::String field, ::Dynamic _default){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_761_field)
HXLINE( 762)		if (::hx::IsNull( object )) {
HXLINE( 762)			return null();
            		}
HXLINE( 763)		if (::Reflect_obj::hasField(object,field)) {
HXLINE( 764)			 ::Dynamic thing = ::Reflect_obj::field(object,field);
HXLINE( 765)			if (::hx::IsNull( thing )) {
HXLINE( 766)				return _default;
            			}
HXLINE( 768)			return thing;
            		}
HXLINE( 770)		return _default;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,field,return )

 ::Dynamic U_obj::xml(::String id,::String __o_extension,::hx::Null< bool >  __o_getAccess,::String __o_dir){
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_("xml",d7,6d,5b,00);
            		bool getAccess = __o_getAccess.Default(true);
            		::String dir = __o_dir;
            		if (::hx::IsNull(__o_dir)) dir = HX_("assets/xml/",c4,ee,51,bb);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_773_xml)
HXLINE( 774)		bool _hx_tmp;
HXDLIN( 774)		if ((id.indexOf(HX_("raw:",52,55,a4,4b),null()) != 0)) {
HXLINE( 774)			_hx_tmp = (id.indexOf(HX_("RAW:",72,1d,65,36),null()) == 0);
            		}
            		else {
HXLINE( 774)			_hx_tmp = true;
            		}
HXDLIN( 774)		if (_hx_tmp) {
HXLINE( 776)			id = id.substr(4,(id.length - 4));
HXLINE( 777)			dir = HX_("",00,00,00,00);
            		}
HXLINE( 780)		::String thePath = (((dir + id) + HX_(".",2e,00,00,00)) + extension);
HXLINE( 782)		bool exists = ::openfl::utils::Assets_obj::exists(thePath,HX_("TEXT",ad,94,ba,37));
HXLINE( 784)		if (!(exists)) {
HXLINE( 785)			return null();
            		}
HXLINE( 788)		::String str = ::openfl::utils::Assets_obj::getText((((dir + id) + HX_(".",2e,00,00,00)) + extension));
HXLINE( 789)		if (::hx::IsNull( str )) {
HXLINE( 790)			return null();
            		}
HXLINE( 792)		 ::Xml the_xml = ::Xml_obj::parse(str);
HXLINE( 793)		if (getAccess) {
HXLINE( 794)			 ::Xml x = the_xml->firstElement();
HXDLIN( 794)			bool _hx_tmp1;
HXDLIN( 794)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 794)				_hx_tmp1 = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 794)				_hx_tmp1 = false;
            			}
HXDLIN( 794)			if (_hx_tmp1) {
HXLINE( 794)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            			}
HXDLIN( 794)			 ::Xml fast = x;
HXLINE( 795)			return fast;
            		}
            		else {
HXLINE( 797)			return the_xml->firstElement();
            		}
HXLINE( 793)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml,return )

void U_obj::clearArraySoft(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_809_clearArraySoft)
HXLINE( 810)		if (::hx::IsNull( array )) {
HXLINE( 810)			return;
            		}
HXLINE( 811)		int i = (array->get_length() - 1);
HXDLIN( 811)		while((i >= 0)){
HXLINE( 812)			array->set(i,null());
HXLINE( 813)			array->splice(i,1);
HXLINE( 814)			i = (i - 1);
            		}
HXLINE( 815)		array = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,clearArraySoft,(void))

void U_obj::clearArray(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_823_clearArray)
HXLINE( 824)		if (::hx::IsNull( array )) {
HXLINE( 824)			return;
            		}
HXLINE( 825)		int i = (array->get_length() - 1);
HXDLIN( 825)		while((i >= 0)){
HXLINE( 826)			::flixel::addons::ui::U_obj::destroyThing(array->__get(i));
HXLINE( 827)			array->set(i,null());
HXLINE( 828)			array->splice(i,1);
HXLINE( 829)			i = (i - 1);
            		}
HXLINE( 830)		array = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,clearArray,(void))

void U_obj::destroyThing( ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_833_destroyThing)
HXLINE( 834)		if (::hx::IsNull( thing )) {
HXLINE( 834)			return;
            		}
HXLINE( 836)		if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ArrayBase::__mClass) ))) {
HXLINE( 837)			::flixel::addons::ui::U_obj::clearArray(( (::cpp::VirtualArray)(thing) ));
            		}
            		else {
HXLINE( 838)			if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::util::IFlxDestroyable >()) ))) {
HXLINE( 839)				::Dynamic idstr =  ::hx::interface_check(thing,0xd4fe2fcd);
HXLINE( 840)				::flixel::util::IFlxDestroyable_obj::destroy(idstr);
HXLINE( 841)				idstr = null();
            			}
            			else {
HXLINE( 842)				if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::FlxBasic >()) ))) {
HXLINE( 843)					 ::flixel::FlxBasic fb = ::hx::TCast<  ::flixel::FlxBasic >::cast(thing);
HXLINE( 844)					fb->destroy();
HXLINE( 845)					fb = null();
            				}
            			}
            		}
HXLINE( 847)		thing = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,destroyThing,(void))

::String U_obj::fontStr(::String str,::String __o_style){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_857_fontStr)
HXDLIN( 857)		::String style1 = style;
HXDLIN( 857)		if (::hx::IsNull( style1 )) {
HXDLIN( 857)			style1 = HX_("",00,00,00,00);
            		}
HXDLIN( 857)		style1 = style1.toLowerCase();
HXDLIN( 857)		::String suffix = HX_("",00,00,00,00);
HXDLIN( 857)		::String _hx_switch_0 = style1;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXDLIN( 857)			suffix = HX_("",00,00,00,00);
HXDLIN( 857)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXDLIN( 857)			suffix = HX_("b",62,00,00,00);
HXDLIN( 857)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXDLIN( 857)			suffix = HX_("i",69,00,00,00);
HXDLIN( 857)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXDLIN( 857)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 857)			goto _hx_goto_67;
            		}
            		_hx_goto_67:;
HXDLIN( 857)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != 0)) {
HXDLIN( 857)			return ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
            		else {
HXDLIN( 857)			return (str + suffix);
            		}
HXDLIN( 857)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,fontStr,return )

::String U_obj::font(::String str,::String __o_style,::String __o_extension){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_(".ttf",78,3b,c0,1e);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_868_font)
HXLINE( 869)		::String ostr = str;
HXLINE( 870)		::String style1 = style;
HXDLIN( 870)		if (::hx::IsNull( style1 )) {
HXLINE( 870)			style1 = HX_("",00,00,00,00);
            		}
HXDLIN( 870)		style1 = style1.toLowerCase();
HXDLIN( 870)		::String suffix = HX_("",00,00,00,00);
HXDLIN( 870)		::String _hx_switch_0 = style1;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE( 870)			suffix = HX_("",00,00,00,00);
HXDLIN( 870)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 870)			suffix = HX_("b",62,00,00,00);
HXDLIN( 870)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 870)			suffix = HX_("i",69,00,00,00);
HXDLIN( 870)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 870)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 870)			goto _hx_goto_69;
            		}
            		_hx_goto_69:;
HXDLIN( 870)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != 0)) {
HXLINE( 870)			str = ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
            		else {
HXLINE( 870)			str = (str + suffix);
            		}
HXLINE( 871)		if ((str.indexOf(extension,null()) == -1)) {
HXLINE( 873)			str = (str + extension);
            		}
HXLINE( 877)		str = ::flixel::addons::ui::FontFixer_obj::add(str,null());
HXLINE( 880)		bool exists = ::openfl::utils::Assets_obj::exists(str,HX_("FONT",cf,25,81,2e));
HXLINE( 881)		bool _hx_tmp;
HXDLIN( 881)		if (!(exists)) {
HXLINE( 881)			_hx_tmp = (extension == HX_(".ttf",78,3b,c0,1e));
            		}
            		else {
HXLINE( 881)			_hx_tmp = false;
            		}
HXDLIN( 881)		if (_hx_tmp) {
HXLINE( 883)			::String alt = ::flixel::addons::ui::U_obj::font(ostr,style,HX_(".otf",33,70,bc,1e));
HXLINE( 884)			if (::openfl::utils::Assets_obj::exists(alt,HX_("FONT",cf,25,81,2e))) {
HXLINE( 886)				return alt;
            			}
            		}
HXLINE( 890)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,font,return )

::String U_obj::_font(::String str,::String __o_style){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_895__font)
HXLINE( 896)		style = style.toLowerCase();
HXLINE( 897)		::String suffix = HX_("",00,00,00,00);
HXLINE( 898)		::String _hx_switch_0 = style;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE( 899)			suffix = HX_("",00,00,00,00);
HXDLIN( 899)			goto _hx_goto_71;
            		}
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 900)			suffix = HX_("b",62,00,00,00);
HXDLIN( 900)			goto _hx_goto_71;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 901)			suffix = HX_("i",69,00,00,00);
HXDLIN( 901)			goto _hx_goto_71;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 902)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 902)			goto _hx_goto_71;
            		}
            		_hx_goto_71:;
HXLINE( 905)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != 0)) {
HXLINE( 906)			return ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
HXLINE( 908)		return (str + suffix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,_font,return )

 ::flixel::addons::ui::FlxUISprite U_obj::fsx( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_912_fsx)
HXDLIN( 912)		return  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,data);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,fsx,return )

 ::flixel::FlxSprite U_obj::fs( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_916_fs)
HXDLIN( 916)		return  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,data);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,fs,return )

::String U_obj::FU(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_926_FU)
HXDLIN( 926)		::String _hx_tmp = str.substr(0,1).toUpperCase();
HXDLIN( 926)		return (_hx_tmp + str.substr(1,(str.length - 1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,FU,return )

::String U_obj::FUL(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_936_FUL)
HXDLIN( 936)		::String _hx_tmp = str.substr(0,1).toUpperCase();
HXDLIN( 936)		return (_hx_tmp + str.substr(1,(str.length - 1)).toLowerCase());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,FUL,return )

 ::openfl::display::BitmapData U_obj::getBmp( ::Dynamic asset){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_940_getBmp)
HXLINE( 941)		::String str = null();
HXLINE( 942)		if (::Std_obj::isOfType(asset,( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXLINE( 944)			str = ( (::String)(asset) );
            		}
            		else {
HXLINE( 946)			if (::Std_obj::isOfType(asset,( ( ::Dynamic)(::hx::ClassOf< ::flixel::graphics::FlxGraphic >()) ))) {
HXLINE( 948)				 ::flixel::graphics::FlxGraphic fg = ( ( ::flixel::graphics::FlxGraphic)(asset) );
HXLINE( 949)				str = fg->key;
            			}
            			else {
HXLINE( 951)				if (::Std_obj::isOfType(asset,( ( ::Dynamic)(::hx::ClassOf< ::openfl::display::BitmapData >()) ))) {
HXLINE( 953)					 ::openfl::display::BitmapData bmp = ( ( ::openfl::display::BitmapData)(asset) );
HXLINE( 954)					return bmp;
            				}
            			}
            		}
HXLINE( 956)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(str)) ) )) {
HXLINE( 958)			 ::flixel::graphics::FlxGraphic cg = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(str)) );
HXLINE( 959)			if (::hx::IsNotNull( cg->bitmap )) {
HXLINE( 961)				return cg->bitmap;
            			}
            		}
HXLINE( 964)		return ::openfl::utils::Assets_obj::getBitmapData(str,false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,getBmp,return )

bool U_obj::checkHaxedef(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_967_checkHaxedef)
HXLINE( 968)		str = str.toLowerCase();
HXLINE( 969)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("android",2f,9b,a4,9c)) ){
HXLINE( 998)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("console-pc",69,0c,13,e9)) ||  (_hx_switch_0==HX_("console_pc",1b,fd,38,e9)) ){
HXLINE(1044)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("cpp",23,81,4b,00)) ){
HXLINE( 972)			return true;
HXDLIN( 972)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("demo",23,59,66,42)) ){
HXLINE(1030)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("desktop",dc,c5,94,1e)) ){
HXLINE( 992)			return true;
HXDLIN( 992)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("flash",b0,35,8c,02)) ){
HXLINE(1010)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("html5",6a,28,ac,2e)) ){
HXLINE(1014)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("ios",cd,0d,50,00)) ){
HXLINE(1002)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("js",c9,5c,00,00)) ){
HXLINE(1018)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("legacy",49,7a,62,9a)) ||  (_hx_switch_0==HX_("lime_legacy",73,b1,ea,a6)) ){
HXLINE(1040)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("lime_next",9d,bd,4b,86)) ||  (_hx_switch_0==HX_("next",f3,84,02,49)) ){
HXLINE(1035)			bool val = true;
HXLINE(1039)			return val;
HXLINE(1034)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("linux",f4,eb,01,75)) ){
HXLINE( 986)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("mac",8f,0a,53,00)) ){
HXLINE( 982)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("mobile",62,ac,77,bf)) ){
HXLINE( 994)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("neko",9b,79,02,49)) ){
HXLINE( 974)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("ps3",d0,60,55,00)) ){
HXLINE(1052)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("ps4",d1,60,55,00)) ){
HXLINE(1048)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("sys",0d,ad,57,00)) ){
HXLINE(1028)			return true;
HXDLIN(1028)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("tvos",26,ab,06,4d)) ){
HXLINE(1006)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("vita",60,3f,4f,4e)) ){
HXLINE(1056)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("web",94,a4,5a,00)) ){
HXLINE(1022)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("wiiu",7e,6c,f8,4e)) ){
HXLINE(1060)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("windows",83,de,74,e8)) ){
HXLINE( 980)			return true;
HXDLIN( 980)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("xbox1",3e,28,31,59)) ){
HXLINE(1064)			goto _hx_goto_78;
            		}
            		_hx_goto_78:;
HXLINE(1070)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,checkHaxedef,return )

::cpp::VirtualArray U_obj::copy_shallow_arr(::cpp::VirtualArray src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1073_copy_shallow_arr)
HXLINE(1074)		if (::hx::IsNull( src )) {
HXLINE(1074)			return null();
            		}
HXLINE(1075)		::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE(1076)		if (::hx::IsNull( src )) {
HXLINE(1077)			return arr;
            		}
HXLINE(1079)		{
HXLINE(1079)			int _g = 0;
HXDLIN(1079)			while((_g < src->get_length())){
HXLINE(1079)				 ::Dynamic thing = src->__get(_g);
HXDLIN(1079)				_g = (_g + 1);
HXLINE(1080)				arr->push(thing);
            			}
            		}
HXLINE(1082)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_shallow_arr,return )

::Array< ::Dynamic> U_obj::copy_arr_arr_i(::Array< ::Dynamic> src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1085_copy_arr_arr_i)
HXLINE(1086)		if (::hx::IsNull( src )) {
HXLINE(1086)			return null();
            		}
HXLINE(1087)		::Array< ::Dynamic> arrarr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1088)		{
HXLINE(1088)			int _g = 0;
HXDLIN(1088)			while((_g < src->length)){
HXLINE(1088)				::Array< int > arri = src->__get(_g).StaticCast< ::Array< int > >();
HXDLIN(1088)				_g = (_g + 1);
HXLINE(1089)				::Array< int > temp = ::Array_obj< int >::__new(0);
HXLINE(1090)				{
HXLINE(1090)					int _g1 = 0;
HXDLIN(1090)					while((_g1 < arri->length)){
HXLINE(1090)						int i = arri->__get(_g1);
HXDLIN(1090)						_g1 = (_g1 + 1);
HXLINE(1091)						temp->push(i);
            					}
            				}
HXLINE(1093)				arrarr->push(temp);
            			}
            		}
HXLINE(1095)		return arrarr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_arr_arr_i,return )

::Array< int > U_obj::copy_shallow_arr_i(::Array< int > src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1098_copy_shallow_arr_i)
HXLINE(1099)		if (::hx::IsNull( src )) {
HXLINE(1099)			return null();
            		}
HXLINE(1100)		::Array< int > arr = ::Array_obj< int >::__new();
HXLINE(1101)		{
HXLINE(1101)			int _g = 0;
HXDLIN(1101)			while((_g < src->length)){
HXLINE(1101)				int thing = src->__get(_g);
HXDLIN(1101)				_g = (_g + 1);
HXLINE(1102)				arr->push(thing);
            			}
            		}
HXLINE(1104)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_shallow_arr_i,return )

::Array< ::String > U_obj::copy_shallow_arr_str(::Array< ::String > src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1107_copy_shallow_arr_str)
HXLINE(1108)		if (::hx::IsNull( src )) {
HXLINE(1108)			return null();
            		}
HXLINE(1109)		::Array< ::String > arr = ::Array_obj< ::String >::__new();
HXLINE(1110)		{
HXLINE(1110)			int _g = 0;
HXDLIN(1110)			while((_g < src->length)){
HXLINE(1110)				::String thing = src->__get(_g);
HXDLIN(1110)				_g = (_g + 1);
HXLINE(1111)				arr->push(thing);
            			}
            		}
HXLINE(1113)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_shallow_arr_str,return )

::String U_obj::FU_(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1116_FU_)
HXLINE(1117)		::Array< ::String > arr = str.split(HX_(" ",20,00,00,00));
HXLINE(1118)		::String str1 = HX_("",00,00,00,00);
HXLINE(1119)		{
HXLINE(1119)			int _g = 0;
HXDLIN(1119)			int _g1 = arr->length;
HXDLIN(1119)			while((_g < _g1)){
HXLINE(1119)				_g = (_g + 1);
HXDLIN(1119)				int i = (_g - 1);
HXLINE(1120)				str1 = (str1 + ::flixel::addons::ui::U_obj::FU(arr->__get(i)));
HXLINE(1121)				if ((i != (arr->length - 1))) {
HXLINE(1122)					str1 = (str1 + HX_(" ",20,00,00,00));
            				}
            			}
            		}
HXLINE(1125)		return str1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,FU_,return )

 ::Dynamic U_obj::xml_blend( ::Xml x,::String att){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1130_xml_blend)
HXDLIN(1130)		return ::flixel::addons::ui::U_obj::blendModeFromString(::flixel::addons::ui::U_obj::xml_str(x,att,true,HX_("normal",27,72,69,30)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,xml_blend,return )

 ::Dynamic U_obj::blendModeFromString(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1134_blendModeFromString)
HXLINE(1135)		str = str.toLowerCase();
HXLINE(1136)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE(1138)			return 0;
HXDLIN(1138)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("alpha",5e,a7,96,21)) ){
HXLINE(1139)			return 1;
HXDLIN(1139)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("darken",5f,36,3a,21)) ){
HXLINE(1140)			return 2;
HXDLIN(1140)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("difference",fd,9b,91,46)) ){
HXLINE(1141)			return 3;
HXDLIN(1141)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("erase",e6,e8,1c,73)) ){
HXLINE(1142)			return 4;
HXDLIN(1142)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("hardlight",0b,6e,6b,53)) ){
HXLINE(1143)			return 5;
HXDLIN(1143)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("invert",16,e7,d8,9f)) ){
HXLINE(1144)			return 6;
HXDLIN(1144)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("layer",d1,81,c0,6f)) ){
HXLINE(1145)			return 7;
HXDLIN(1145)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("lighten",bf,4a,e3,19)) ){
HXLINE(1146)			return 8;
HXDLIN(1146)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("multiply",24,e2,8c,9a)) ){
HXLINE(1147)			return 9;
HXDLIN(1147)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE(1148)			return 10;
HXDLIN(1148)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("overlay",90,43,10,a9)) ){
HXLINE(1149)			return 11;
HXDLIN(1149)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("screen",6c,3b,5d,47)) ){
HXLINE(1150)			return 12;
HXDLIN(1150)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("subtract",14,75,11,f8)) ){
HXLINE(1151)			return 14;
HXDLIN(1151)			goto _hx_goto_92;
            		}
            		/* default */{
HXLINE(1155)			return 10;
            		}
            		_hx_goto_92:;
HXLINE(1136)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,blendModeFromString,return )

 ::openfl::display::BitmapData U_obj::scaleTileBmp(::String orig_id,Float scale,int origW,int origH,::hx::Null< int >  __o_W,::hx::Null< int >  __o_H,::hx::Null< bool >  __o_smooth){
            		int W = __o_W.Default(-1);
            		int H = __o_H.Default(-1);
            		bool smooth = __o_smooth.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1173_scaleTileBmp)
HXLINE(1174)		 ::openfl::display::BitmapData orig = ::openfl::utils::Assets_obj::getBitmapData(orig_id,false);
HXLINE(1175)		if (::hx::IsNull( orig )) {
HXLINE(1176)			if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(orig_id)) ) )) {
HXLINE(1177)				orig = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(orig_id)) )->bitmap;
            			}
            			else {
HXLINE(1179)				return null();
            			}
            		}
HXLINE(1183)		int widthInTiles = ::Std_obj::_hx_int((( (Float)(orig->width) ) / ( (Float)(origW) )));
HXLINE(1184)		int heightInTiles = ::Std_obj::_hx_int((( (Float)(orig->height) ) / ( (Float)(origH) )));
HXLINE(1187)		if ((W == -1)) {
HXLINE(1189)			W = ::Std_obj::_hx_int((( (Float)(origW) ) * scale));
            		}
HXLINE(1191)		if ((H == -1)) {
HXLINE(1193)			H = ::Std_obj::_hx_int((( (Float)(origH) ) * scale));
HXLINE(1194)			scale = (( (Float)(H) ) / ( (Float)(origH) ));
            		}
HXLINE(1197)		if ((::Math_obj::abs((scale - ((Float)1.0))) > ((Float)0.001))) {
HXLINE(1199)			int scaled = ::Std_obj::_hx_int(( (Float)((W * widthInTiles)) ));
HXDLIN(1199)			 ::openfl::display::BitmapData scaled1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,scaled,::Std_obj::_hx_int(( (Float)((H * heightInTiles)) )),true,0);
HXLINE(1200)			 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1201)			 ::openfl::geom::Point pt =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1202)			 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(1203)			matrix->scale(scale,scale);
HXLINE(1204)			{
HXLINE(1204)				int _g = 0;
HXDLIN(1204)				int _g1 = heightInTiles;
HXDLIN(1204)				while((_g < _g1)){
HXLINE(1204)					_g = (_g + 1);
HXDLIN(1204)					int tiley = (_g - 1);
HXLINE(1206)					{
HXLINE(1206)						int _g2 = 0;
HXDLIN(1206)						int _g3 = widthInTiles;
HXDLIN(1206)						while((_g2 < _g3)){
HXLINE(1206)							_g2 = (_g2 + 1);
HXDLIN(1206)							int tilex = (_g2 - 1);
HXLINE(1208)							 ::openfl::display::BitmapData tile =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,origW,origH,true,0);
HXLINE(1209)							rect->setTo(( (Float)((tilex * origW)) ),( (Float)((tiley * origH)) ),( (Float)(origW) ),( (Float)(origH) ));
HXLINE(1210)							pt->setTo(( (Float)(0) ),( (Float)(0) ));
HXLINE(1211)							tile->copyPixels(orig,rect,pt,null(),null(),null());
HXLINE(1213)							 ::openfl::display::BitmapData scaleTile =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,W,H,true,0);
HXLINE(1214)							scaleTile->draw(tile,matrix,null(),null(),null(),smooth);
HXLINE(1215)							pt->setTo(( (Float)((tilex * W)) ),( (Float)((tiley * H)) ));
HXLINE(1216)							scaled1->copyPixels(scaleTile,scaleTile->rect,pt,null(),null(),null());
            						}
            					}
            				}
            			}
HXLINE(1219)			return scaled1;
            		}
            		else {
HXLINE(1223)			return orig->clone();
            		}
HXLINE(1197)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(U_obj,scaleTileBmp,return )

::String U_obj::scaleAndStoreTileset(::String orig_id,Float scale,int OrigW,int OrigH,::hx::Null< int >  __o_TileW,::hx::Null< int >  __o_TileH,::hx::Null< bool >  __o_Smooth){
            		int TileW = __o_TileW.Default(-1);
            		int TileH = __o_TileH.Default(-1);
            		bool Smooth = __o_Smooth.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1241_scaleAndStoreTileset)
HXLINE(1242)		::String assetKey = ((orig_id + HX_("_x",39,53,00,00)) + scale);
HXLINE(1244)		if ((::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(assetKey)) ) ) == false)) {
HXLINE(1246)			 ::openfl::display::BitmapData bmp = ::flixel::addons::ui::U_obj::scaleTileBmp(orig_id,scale,OrigW,OrigH,TileW,TileH,Smooth);
HXLINE(1247)			::flixel::FlxG_obj::bitmap->add(bmp,false,assetKey);
            		}
HXLINE(1250)		return assetKey;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(U_obj,scaleAndStoreTileset,return )

::String U_obj::loadScaledImage(::String src,Float W,Float H,::hx::Null< bool >  __o_smooth){
            		bool smooth = __o_smooth.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1262_loadScaledImage)
HXLINE(1263)		::String bmpSrc = ::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null());
HXLINE(1264)		 ::openfl::display::BitmapData testBmp = ::openfl::utils::Assets_obj::getBitmapData(bmpSrc,false);
HXLINE(1266)		if (::hx::IsNotNull( testBmp )) {
HXLINE(1268)			if ((W < 0)) {
HXLINE(1270)				W = ( (Float)(testBmp->width) );
            			}
HXLINE(1272)			if ((H < 0)) {
HXLINE(1274)				H = ( (Float)(testBmp->height) );
            			}
HXLINE(1277)			Float diff = (::Math_obj::abs((W - ( (Float)(testBmp->width) ))) + ::Math_obj::abs((H - ( (Float)(testBmp->height) ))));
HXLINE(1280)			if ((diff > ((Float)0.01))) {
HXLINE(1282)				::String scaleKey = (((bmpSrc + HX_("_",5f,00,00,00)) + ::Std_obj::_hx_int(W)) + HX_("x",78,00,00,00));
HXDLIN(1282)				::String scaleKey1 = (scaleKey + ::Std_obj::_hx_int(H));
HXLINE(1285)				if (::hx::IsNull( ::flixel::FlxG_obj::bitmap->_cache->get(scaleKey1) )) {
HXLINE(1287)					int scaledBmp = ::Std_obj::_hx_int(W);
HXDLIN(1287)					 ::openfl::display::BitmapData scaledBmp1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,scaledBmp,::Std_obj::_hx_int(H),true,0);
HXLINE(1289)					 ::openfl::geom::Matrix m = ::flixel::addons::ui::U_obj::getMatrix();
HXLINE(1290)					m->identity();
HXLINE(1291)					m->scale((W / ( (Float)(testBmp->width) )),(H / ( (Float)(testBmp->height) )));
HXLINE(1293)					scaledBmp1->draw(testBmp,m,null(),null(),null(),smooth);
HXLINE(1295)					::flixel::FlxG_obj::bitmap->add(scaledBmp1,true,scaleKey1);
            				}
HXLINE(1297)				return scaleKey1;
            			}
            			else {
HXLINE(1301)				return bmpSrc;
            			}
            		}
HXLINE(1304)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,loadScaledImage,return )

::String U_obj::loadImageScaleToHeight(::String src,Float Height,::hx::Null< bool >  __o_Smooth,::hx::Null< bool >  __o_checkFlxBitmap){
            		bool Smooth = __o_Smooth.Default(true);
            		bool checkFlxBitmap = __o_checkFlxBitmap.Default(false);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1308_loadImageScaleToHeight)
HXLINE(1309)		::String bmpSrc = ::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null());
HXLINE(1310)		 ::openfl::display::BitmapData testBmp = null();
HXLINE(1312)		if (!(checkFlxBitmap)) {
HXLINE(1314)			testBmp = ::openfl::utils::Assets_obj::getBitmapData(bmpSrc,false);
            		}
            		else {
HXLINE(1318)			 ::flixel::graphics::FlxGraphic flximg = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(bmpSrc)) );
HXLINE(1319)			if (::hx::IsNotNull( flximg )) {
HXLINE(1319)				testBmp = flximg->bitmap;
            			}
            			else {
HXLINE(1319)				testBmp = null();
            			}
            		}
HXLINE(1322)		Float ratio;
HXDLIN(1322)		if (::hx::IsNotNull( testBmp )) {
HXLINE(1322)			ratio = (Height / ( (Float)(testBmp->height) ));
            		}
            		else {
HXLINE(1322)			ratio = ((Float)1.0);
            		}
HXLINE(1323)		return ::flixel::addons::ui::U_obj::loadMonoScaledImage(bmpSrc,ratio,Smooth,checkFlxBitmap,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,loadImageScaleToHeight,return )

::String U_obj::loadMonoScaledImage(::String src,Float Scale,::hx::Null< bool >  __o_smooth,::hx::Null< bool >  __o_checkFlxBitmap,::hx::Null< bool >  __o_fixAlphaChannel){
            		bool smooth = __o_smooth.Default(true);
            		bool checkFlxBitmap = __o_checkFlxBitmap.Default(false);
            		bool fixAlphaChannel = __o_fixAlphaChannel.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1336_loadMonoScaledImage)
HXLINE(1337)		::String bmpSrc = ::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null());
HXLINE(1339)		 ::openfl::display::BitmapData testBmp = null();
HXLINE(1341)		if (!(checkFlxBitmap)) {
HXLINE(1343)			testBmp = ::openfl::utils::Assets_obj::getBitmapData(bmpSrc,false);
HXLINE(1344)			if (::hx::IsNull( testBmp )) {
HXLINE(1346)				testBmp = ::openfl::utils::Assets_obj::getBitmapData(bmpSrc,true);
            			}
            		}
            		else {
HXLINE(1351)			 ::flixel::graphics::FlxGraphic flximg = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(bmpSrc)) );
HXLINE(1352)			if (::hx::IsNotNull( flximg )) {
HXLINE(1352)				testBmp = flximg->bitmap;
            			}
            			else {
HXLINE(1352)				testBmp = null();
            			}
            		}
HXLINE(1355)		if (::hx::IsNotNull( testBmp )) {
HXLINE(1357)			if ((Scale <= 0)) {
HXLINE(1359)				HX_STACK_DO_THROW(((HX_("Error! Scale must be positive & > 0! (Scale was = ",a9,42,eb,3c) + Scale) + HX_(")",29,00,00,00)));
            			}
HXLINE(1363)			if ((::Math_obj::abs((Scale - ((Float)1.00))) > ((Float)0.001))) {
HXLINE(1365)				::String scaleKey = ((bmpSrc + HX_("_ScaleX",4d,70,31,df)) + Scale);
HXLINE(1368)				if (::hx::IsNull( ::flixel::FlxG_obj::bitmap->_cache->get(scaleKey) )) {
HXLINE(1370)					int scaledBmp = ::Std_obj::_hx_int((( (Float)(testBmp->width) ) * Scale));
HXDLIN(1370)					 ::openfl::display::BitmapData scaledBmp1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,scaledBmp,::Std_obj::_hx_int((( (Float)(testBmp->height) ) * Scale)),true,0);
HXLINE(1372)					 ::openfl::geom::Matrix m = ::flixel::addons::ui::U_obj::getMatrix();
HXLINE(1373)					m->identity();
HXLINE(1374)					m->scale(Scale,Scale);
HXLINE(1375)					scaledBmp1->draw(testBmp,m,null(),null(),null(),smooth);
HXLINE(1377)					if (fixAlphaChannel) {
HXLINE(1380)						 ::openfl::display::BitmapData black =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,scaledBmp1->width,scaledBmp1->height,true,-16777216);
HXLINE(1382)						 ::openfl::geom::Rectangle scaledBmp2 = scaledBmp1->rect;
HXDLIN(1382)						black->copyPixels(scaledBmp1,scaledBmp2, ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null()),null(),null(),true);
HXLINE(1384)						 ::openfl::geom::Rectangle scaledBmp3 = scaledBmp1->rect;
HXDLIN(1384)						black->copyChannel(scaledBmp1,scaledBmp3, ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0),8,8);
HXLINE(1386)						 ::openfl::display::BitmapData temp = scaledBmp1;
HXLINE(1387)						scaledBmp1 = black;
HXLINE(1388)						temp->dispose();
            					}
HXLINE(1391)					::flixel::FlxG_obj::bitmap->add(scaledBmp1,true,scaleKey);
            				}
HXLINE(1394)				return scaleKey;
            			}
            			else {
HXLINE(1398)				::flixel::FlxG_obj::bitmap->add(testBmp,false,bmpSrc);
HXLINE(1399)				return bmpSrc;
            			}
            		}
HXLINE(1403)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(U_obj,loadMonoScaledImage,return )

::String U_obj::gfx(::String id,::String __o_dir1,::String __o_dir2,::String __o_dir3,::String __o_dir4,::hx::Null< bool >  __o_suppressError){
            		::String dir1 = __o_dir1;
            		if (::hx::IsNull(__o_dir1)) dir1 = HX_("",00,00,00,00);
            		::String dir2 = __o_dir2;
            		if (::hx::IsNull(__o_dir2)) dir2 = HX_("",00,00,00,00);
            		::String dir3 = __o_dir3;
            		if (::hx::IsNull(__o_dir3)) dir3 = HX_("",00,00,00,00);
            		::String dir4 = __o_dir4;
            		if (::hx::IsNull(__o_dir4)) dir4 = HX_("",00,00,00,00);
            		bool suppressError = __o_suppressError.Default(false);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1407_gfx)
HXLINE(1408)		if (::hx::IsNotNull( id )) {
HXLINE(1409)			id = id.toLowerCase();
            		}
HXLINE(1412)		::String prefix = HX_("",00,00,00,00);
HXLINE(1414)		if ((dir1 != HX_("",00,00,00,00))) {
HXLINE(1415)			prefix = (dir1 + HX_("/",2f,00,00,00));
HXLINE(1416)			if ((dir2 != HX_("",00,00,00,00))) {
HXLINE(1417)				prefix = (prefix + (dir2 + HX_("/",2f,00,00,00)));
HXLINE(1418)				if ((dir3 != HX_("",00,00,00,00))) {
HXLINE(1419)					prefix = (prefix + (dir3 + HX_("/",2f,00,00,00)));
HXLINE(1420)					if ((dir4 != HX_("",00,00,00,00))) {
HXLINE(1421)						prefix = (prefix + (dir4 + HX_("/",2f,00,00,00)));
            					}
            				}
            			}
            		}
HXLINE(1427)		if ((prefix != HX_("",00,00,00,00))) {
HXLINE(1428)			id = (prefix + id);
            		}
HXLINE(1431)		if ((id.indexOf(HX_("raw:",52,55,a4,4b),null()) != 0)) {
HXLINE(1432)			id = ::StringTools_obj::replace(id,HX_("-",2d,00,00,00),HX_("_",5f,00,00,00));
            		}
HXLINE(1435)		return ::flixel::addons::ui::U_obj::get_gfx(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(U_obj,gfx,return )

::Array< int > U_obj::bmpToArrayIntLayer(int color_index, ::openfl::display::BitmapData bd){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1460_bmpToArrayIntLayer)
HXLINE(1462)		int p;
HXLINE(1463)		::Array< int > arr = ::Array_obj< int >::__new(0);
HXLINE(1464)		int w = bd->width;
HXLINE(1465)		int h = bd->height;
HXLINE(1466)		{
HXLINE(1466)			int _g = 0;
HXDLIN(1466)			int _g1 = h;
HXDLIN(1466)			while((_g < _g1)){
HXLINE(1466)				_g = (_g + 1);
HXDLIN(1466)				int r = (_g - 1);
HXLINE(1467)				{
HXLINE(1467)					int _g2 = 0;
HXDLIN(1467)					int _g3 = w;
HXDLIN(1467)					while((_g2 < _g3)){
HXLINE(1467)						_g2 = (_g2 + 1);
HXDLIN(1467)						int c = (_g2 - 1);
HXLINE(1469)						p = bd->getPixel(c,r);
HXLINE(1471)						if ((p == color_index)) {
HXLINE(1472)							p = 1;
            						}
            						else {
HXLINE(1474)							p = 0;
            						}
HXLINE(1478)						arr->push(p);
            					}
            				}
            			}
            		}
HXLINE(1481)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,bmpToArrayIntLayer,return )

::String U_obj::bmpToCSVLayer(int color_index, ::openfl::display::BitmapData bd){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1494_bmpToCSVLayer)
HXLINE(1497)		int p;
HXLINE(1498)		::String csv = HX_("",00,00,00,00);
HXLINE(1499)		int w = bd->width;
HXLINE(1500)		int h = bd->height;
HXLINE(1501)		{
HXLINE(1501)			int _g = 0;
HXDLIN(1501)			int _g1 = h;
HXDLIN(1501)			while((_g < _g1)){
HXLINE(1501)				_g = (_g + 1);
HXDLIN(1501)				int r = (_g - 1);
HXLINE(1502)				{
HXLINE(1502)					int _g2 = 0;
HXDLIN(1502)					int _g3 = w;
HXDLIN(1502)					while((_g2 < _g3)){
HXLINE(1502)						_g2 = (_g2 + 1);
HXDLIN(1502)						int c = (_g2 - 1);
HXLINE(1504)						p = bd->getPixel(c,r);
HXLINE(1506)						if ((p == color_index)) {
HXLINE(1507)							p = 1;
            						}
            						else {
HXLINE(1509)							p = 0;
            						}
HXLINE(1513)						if ((c == 0)) {
HXLINE(1515)							if ((r == 0)) {
HXLINE(1516)								csv = (csv + p);
            							}
            							else {
HXLINE(1518)								csv = (csv + (HX_("\n",0a,00,00,00) + p));
            							}
            						}
            						else {
HXLINE(1522)							csv = (csv + (HX_(", ",74,26,00,00) + p));
            						}
            					}
            				}
            			}
            		}
HXLINE(1526)		return csv;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,bmpToCSVLayer,return )

::String U_obj::get_gfx(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1529_get_gfx)
HXLINE(1530)		::String return_str = HX_("",00,00,00,00);
HXLINE(1532)		::String suffix = HX_("",00,00,00,00);
HXLINE(1535)		if ((str.indexOf(HX_(".jpg",73,a1,b8,1e),null()) != -1)) {
HXLINE(1537)			suffix = HX_(".jpg",73,a1,b8,1e);
            		}
            		else {
HXLINE(1541)			suffix = HX_(".png",3b,2d,bd,1e);
            		}
HXLINE(1544)		bool _hx_tmp;
HXDLIN(1544)		bool _hx_tmp1;
HXDLIN(1544)		if (::hx::IsNotNull( str )) {
HXLINE(1544)			_hx_tmp1 = (str.length > 4);
            		}
            		else {
HXLINE(1544)			_hx_tmp1 = false;
            		}
HXDLIN(1544)		if (_hx_tmp1) {
HXLINE(1544)			_hx_tmp = (str.indexOf(suffix,null()) != -1);
            		}
            		else {
HXLINE(1544)			_hx_tmp = false;
            		}
HXDLIN(1544)		if (_hx_tmp) {
HXLINE(1546)			str = str.substr(0,(str.length - 4));
            		}
HXLINE(1548)		bool _hx_tmp2;
HXDLIN(1548)		if ((str.indexOf(HX_("raw:",52,55,a4,4b),null()) != 0)) {
HXLINE(1548)			_hx_tmp2 = (str.indexOf(HX_("RAW:",72,1d,65,36),null()) == 0);
            		}
            		else {
HXLINE(1548)			_hx_tmp2 = true;
            		}
HXDLIN(1548)		if (_hx_tmp2) {
HXLINE(1549)			str = str.substr(4,(str.length - 4));
HXLINE(1550)			return_str = (str + suffix);
            		}
HXLINE(1552)		bool _hx_tmp3;
HXDLIN(1552)		if (::hx::IsNotNull( str )) {
HXLINE(1552)			_hx_tmp3 = (str.indexOf(HX_("assets/gfx/",e2,08,10,b0),null()) == 0);
            		}
            		else {
HXLINE(1552)			_hx_tmp3 = false;
            		}
HXDLIN(1552)		if (_hx_tmp3) {
HXLINE(1554)			return_str = (str + suffix);
            		}
HXLINE(1557)		if ((return_str == HX_("",00,00,00,00))) {
HXLINE(1559)			return_str = ((HX_("assets/gfx/",e2,08,10,b0) + str) + suffix);
            		}
HXLINE(1562)		if ((return_str.indexOf((HX_(".stitch.txt",a1,9d,fa,01) + suffix),null()) != -1)) {
HXLINE(1564)			return_str = ::StringTools_obj::replace(return_str,(HX_(".stitch.txt",a1,9d,fa,01) + suffix),HX_(".stitch.txt",a1,9d,fa,01));
            		}
HXLINE(1567)		return return_str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,get_gfx,return )

::String U_obj::sfx(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1570_sfx)
HXLINE(1571)		::String extension = HX_("",00,00,00,00);
HXLINE(1575)		extension = HX_(".ogg",e1,64,bc,1e);
HXLINE(1577)		if ((str.indexOf(HX_("RAW:",72,1d,65,36),null()) == 0)) {
HXLINE(1578)			str = str.substr(4,(str.length - 4));
HXLINE(1579)			return (str + extension);
            		}
HXLINE(1581)		return ((HX_("assets/sfx/",56,98,fe,b7) + str) + extension);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,sfx,return )

::Array< int > U_obj::intStr_to_arr(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1590_intStr_to_arr)
HXLINE(1591)		::Array< ::String > arr = str.split(HX_(",",2c,00,00,00));
HXLINE(1592)		::Array< int > str_arr = ::Array_obj< int >::__new();
HXLINE(1593)		{
HXLINE(1593)			int _g = 0;
HXDLIN(1593)			while((_g < arr->length)){
HXLINE(1593)				::String s = arr->__get(_g);
HXDLIN(1593)				_g = (_g + 1);
HXLINE(1594)				if ((s.indexOf(HX_("-",2d,00,00,00),null()) == -1)) {
HXLINE(1595)					str_arr->push(::Std_obj::parseInt(s));
            				}
            				else {
HXLINE(1597)					::Array< ::String > range = str.split(HX_("-",2d,00,00,00));
HXLINE(1598)					int lo = -1;
HXLINE(1599)					int hi = -1;
HXLINE(1600)					bool _hx_tmp;
HXDLIN(1600)					if (::hx::IsNotNull( range )) {
HXLINE(1600)						_hx_tmp = (range->length == 2);
            					}
            					else {
HXLINE(1600)						_hx_tmp = false;
            					}
HXDLIN(1600)					if (_hx_tmp) {
HXLINE(1601)						lo = ( (int)(::Std_obj::parseInt(range->__get(0))) );
HXLINE(1602)						hi = (::Std_obj::parseInt(range->__get(1)) + 1);
HXLINE(1603)						bool _hx_tmp1;
HXDLIN(1603)						if ((lo >= 0)) {
HXLINE(1603)							_hx_tmp1 = (hi > lo);
            						}
            						else {
HXLINE(1603)							_hx_tmp1 = false;
            						}
HXDLIN(1603)						if (_hx_tmp1) {
HXLINE(1604)							int _g1 = lo;
HXDLIN(1604)							int _g2 = hi;
HXDLIN(1604)							while((_g1 < _g2)){
HXLINE(1604)								_g1 = (_g1 + 1);
HXDLIN(1604)								int i = (_g1 - 1);
HXLINE(1605)								str_arr->push(i);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1611)		return str_arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,intStr_to_arr,return )

::Array< ::String > U_obj::intStr_to_arrStr(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1620_intStr_to_arrStr)
HXLINE(1621)		::Array< ::String > arr = str.split(HX_(",",2c,00,00,00));
HXLINE(1622)		::Array< ::String > str_arr = ::Array_obj< ::String >::__new();
HXLINE(1623)		{
HXLINE(1623)			int _g = 0;
HXDLIN(1623)			while((_g < arr->length)){
HXLINE(1623)				::String s = arr->__get(_g);
HXDLIN(1623)				_g = (_g + 1);
HXLINE(1624)				if ((s.indexOf(HX_("-",2d,00,00,00),null()) == -1)) {
HXLINE(1625)					str_arr->push(::Std_obj::string(::Std_obj::parseInt(s)));
            				}
            				else {
HXLINE(1627)					::Array< ::String > range = str.split(HX_("-",2d,00,00,00));
HXLINE(1628)					int lo = -1;
HXLINE(1629)					int hi = -1;
HXLINE(1630)					bool _hx_tmp;
HXDLIN(1630)					if (::hx::IsNotNull( range )) {
HXLINE(1630)						_hx_tmp = (range->length == 2);
            					}
            					else {
HXLINE(1630)						_hx_tmp = false;
            					}
HXDLIN(1630)					if (_hx_tmp) {
HXLINE(1631)						lo = ( (int)(::Std_obj::parseInt(range->__get(0))) );
HXLINE(1632)						hi = (::Std_obj::parseInt(range->__get(1)) + 1);
HXLINE(1633)						bool _hx_tmp1;
HXDLIN(1633)						if ((lo >= 0)) {
HXLINE(1633)							_hx_tmp1 = (hi > lo);
            						}
            						else {
HXLINE(1633)							_hx_tmp1 = false;
            						}
HXDLIN(1633)						if (_hx_tmp1) {
HXLINE(1634)							int _g1 = lo;
HXDLIN(1634)							int _g2 = hi;
HXDLIN(1634)							while((_g1 < _g2)){
HXLINE(1634)								_g1 = (_g1 + 1);
HXDLIN(1634)								int i = (_g1 - 1);
HXLINE(1635)								str_arr->push(::Std_obj::string(i));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1641)		return str_arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,intStr_to_arrStr,return )

::String U_obj::dirStr(int XX,int YY){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1644_dirStr)
HXLINE(1645)		::String str = HX_("",00,00,00,00);
HXLINE(1646)		if ((XX == 0)) {
HXLINE(1647)			if ((YY == -1)) {
HXLINE(1647)				str = HX_("N",4e,00,00,00);
            			}
            			else {
HXLINE(1648)				if ((YY == 1)) {
HXLINE(1648)					str = HX_("S",53,00,00,00);
            				}
            				else {
HXLINE(1649)					if ((YY == 0)) {
HXLINE(1649)						str = HX_("NONE",b8,da,ca,33);
            					}
            				}
            			}
            		}
            		else {
HXLINE(1650)			if ((XX == 1)) {
HXLINE(1651)				if ((YY == -1)) {
HXLINE(1651)					str = HX_("NE",37,44,00,00);
            				}
            				else {
HXLINE(1652)					if ((YY == 1)) {
HXLINE(1652)						str = HX_("SE",92,48,00,00);
            					}
            					else {
HXLINE(1653)						if ((YY == 0)) {
HXLINE(1653)							str = HX_("E",45,00,00,00);
            						}
            					}
            				}
            			}
            			else {
HXLINE(1654)				if ((XX == -1)) {
HXLINE(1655)					if ((YY == -1)) {
HXLINE(1655)						str = HX_("NW",49,44,00,00);
            					}
            					else {
HXLINE(1656)						if ((YY == 1)) {
HXLINE(1656)							str = HX_("SW",a4,48,00,00);
            						}
            						else {
HXLINE(1657)							if ((YY == 0)) {
HXLINE(1657)								str = HX_("W",57,00,00,00);
            							}
            						}
            					}
            				}
            				else {
HXLINE(1659)					str = HX_("NONE",b8,da,ca,33);
            				}
            			}
            		}
HXLINE(1660)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,dirStr,return )

 ::flixel::math::FlxBasePoint U_obj::obj_direction( ::flixel::FlxObject a, ::flixel::FlxObject b){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1663_obj_direction)
HXLINE(1664)		Float dx = (a->x - b->x);
HXLINE(1665)		Float dy = (a->y - b->y);
HXLINE(1667)		Float x = ( (Float)(::Std_obj::_hx_int((dx / ::Math_obj::abs(dx)))) );
HXDLIN(1667)		Float y = ( (Float)(::Std_obj::_hx_int((dy / ::Math_obj::abs(dy)))) );
HXDLIN(1667)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN(1667)		point->_inPool = false;
HXDLIN(1667)		 ::flixel::math::FlxBasePoint ipt = point;
HXLINE(1668)		return ipt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,obj_direction,return )

bool U_obj::circle_test(Float x1,Float y1,Float r1,Float x2,Float y2,Float r2){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1671_circle_test)
HXLINE(1672)		Float dx = (x1 - x2);
HXLINE(1673)		Float dy = (y1 - y2);
HXLINE(1674)		Float d2 = ((dx * dx) + (dy * dy));
HXLINE(1675)		Float dr2 = ((r1 * r1) + (r2 * r2));
HXLINE(1676)		return (d2 <= dr2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(U_obj,circle_test,return )

bool U_obj::point_circle_test(Float x,Float y,Float cx,Float cy,Float r){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1679_point_circle_test)
HXLINE(1680)		Float dx = (x - cx);
HXLINE(1681)		Float dy = (y - cy);
HXLINE(1682)		Float d2 = ((dx * dx) + (dy * dy));
HXLINE(1683)		return (d2 <= (r * r));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(U_obj,point_circle_test,return )

bool U_obj::aabb_test_mult( ::flixel::FlxObject a, ::flixel::FlxObject b,::hx::Null< Float >  __o_multA,::hx::Null< Float >  __o_multB){
            		Float multA = __o_multA.Default(1);
            		Float multB = __o_multB.Default(1);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1686_aabb_test_mult)
HXLINE(1687)		Float extra = (a->get_width() * multA);
HXDLIN(1687)		Float diff = ((extra - a->get_width()) / ( (Float)(2) ));
HXLINE(1689)		Float ax1 = (a->x - diff);
HXLINE(1690)		Float a1 = a->x;
HXDLIN(1690)		Float ax2 = ((a1 + a->get_width()) + diff);
HXLINE(1692)		extra = (a->get_height() * multA);
HXDLIN(1692)		diff = ((extra - a->get_height()) / ( (Float)(2) ));
HXLINE(1694)		Float ay1 = (a->y - diff);
HXLINE(1695)		Float a2 = a->y;
HXDLIN(1695)		Float ay2 = ((a2 + a->get_height()) + diff);
HXLINE(1697)		extra = (b->get_width() * multB);
HXDLIN(1697)		diff = ((extra - b->get_width()) / ( (Float)(2) ));
HXLINE(1699)		Float bx1 = (b->x - diff);
HXLINE(1700)		Float b1 = b->x;
HXDLIN(1700)		Float bx2 = ((b1 + b->get_width()) + diff);
HXLINE(1702)		extra = (b->get_height() * multB);
HXDLIN(1702)		diff = ((extra - b->get_height()) / ( (Float)(2) ));
HXLINE(1704)		Float by1 = (b->y - diff);
HXLINE(1705)		Float b2 = b->y;
HXDLIN(1705)		Float by2 = ((b2 + b->get_height()) + diff);
HXLINE(1707)		if ((::Math_obj::abs(((bx2 + bx1) - (ax2 + ax1))) <= (((bx2 - bx1) + ax2) - ax1))) {
HXLINE(1708)			return (::Math_obj::abs(((by2 + by1) - (ay2 + ay1))) <= (((by2 - by1) + ay2) - ay1));
            		}
            		else {
HXLINE(1707)			return false;
            		}
HXDLIN(1707)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,aabb_test_mult,return )

bool U_obj::aabb_test( ::flixel::FlxObject a, ::flixel::FlxObject b){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1711_aabb_test)
HXLINE(1713)		Float ax1 = a->x;
HXLINE(1714)		Float a1 = a->x;
HXDLIN(1714)		Float ax2 = (a1 + a->get_width());
HXLINE(1716)		Float ay1 = a->y;
HXLINE(1717)		Float a2 = a->y;
HXDLIN(1717)		Float ay2 = (a2 + a->get_height());
HXLINE(1719)		Float bx1 = b->x;
HXLINE(1720)		Float b1 = b->x;
HXDLIN(1720)		Float bx2 = (b1 + b->get_width());
HXLINE(1722)		Float by1 = b->y;
HXLINE(1723)		Float b2 = b->y;
HXDLIN(1723)		Float by2 = (b2 + b->get_height());
HXLINE(1725)		if ((::Math_obj::abs(((bx2 + bx1) - (ax2 + ax1))) <= (((bx2 - bx1) + ax2) - ax1))) {
HXLINE(1726)			return (::Math_obj::abs(((by2 + by1) - (ay2 + ay1))) <= (((by2 - by1) + ay2) - ay1));
            		}
            		else {
HXLINE(1725)			return false;
            		}
HXDLIN(1725)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,aabb_test,return )

 ::openfl::geom::Point U_obj::bitStringDimensions(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1733_bitStringDimensions)
HXLINE(1734)		 ::openfl::geom::Point pt =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXLINE(1735)		::Array< ::String > arr = str.split(HX_("\n",0a,00,00,00));
HXLINE(1736)		bool _hx_tmp;
HXDLIN(1736)		if (::hx::IsNotNull( arr )) {
HXLINE(1736)			_hx_tmp = (arr->length > 1);
            		}
            		else {
HXLINE(1736)			_hx_tmp = false;
            		}
HXDLIN(1736)		if (_hx_tmp) {
HXLINE(1737)			pt->y = ( (Float)(arr->length) );
HXLINE(1738)			bool _hx_tmp1;
HXDLIN(1738)			if (::hx::IsNotNull( arr->__get(0) )) {
HXLINE(1738)				_hx_tmp1 = (arr->__get(0).length > 1);
            			}
            			else {
HXLINE(1738)				_hx_tmp1 = false;
            			}
HXDLIN(1738)			if (_hx_tmp1) {
HXLINE(1739)				pt->x = ( (Float)(arr->__get(0).length) );
            			}
            		}
HXLINE(1742)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,bitStringDimensions,return )

::Array< int > U_obj::splitBitString(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1749_splitBitString)
HXLINE(1750)		::Array< int > result = ::Array_obj< int >::__new();
HXLINE(1751)		::Array< ::String > arr = str.split(HX_("\n",0a,00,00,00));
HXLINE(1752)		int i = 0;
HXDLIN(1752)		while((i < arr->length)){
HXLINE(1753)			int len = arr->__get(i).length;
HXLINE(1754)			int j = 0;
HXDLIN(1754)			while((j < len)){
HXLINE(1755)				::String _hx_char = arr->__get(i).charAt(j);
HXLINE(1756)				int num = ( (int)(::Std_obj::parseInt(_hx_char)) );
HXLINE(1757)				result->push(num);
HXLINE(1758)				j = (j + 1);
            			}
HXLINE(1760)			i = (i + 1);
            		}
HXLINE(1762)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,splitBitString,return )

::String U_obj::getShortTextFromFlxKeyText(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1765_getShortTextFromFlxKeyText)
HXLINE(1766)		str = str.toUpperCase();
HXLINE(1767)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("ACCENT",4a,3d,89,bd)) ){
HXLINE(1802)			return HX_("`",60,00,00,00);
HXDLIN(1802)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ALT",09,95,31,00)) ){
HXLINE(1785)			return HX_("AT",f3,38,00,00);
HXDLIN(1785)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("BACKSLASH",96,28,9e,c3)) ){
HXLINE(1776)			return HX_("\\",5c,00,00,00);
HXDLIN(1776)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("BACKSPACE",1f,f5,42,c6)) ){
HXLINE(1773)			return HX_("BK",c9,39,00,00);
HXDLIN(1773)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("CAPSLOCK",8c,6c,6e,80)) ){
HXLINE(1804)			return HX_("CP",ad,3a,00,00);
HXDLIN(1804)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("COMMA",b5,69,4b,c8)) ){
HXLINE(1781)			return HX_(",",2c,00,00,00);
HXDLIN(1781)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("CONTROL",3d,3f,55,99)) ){
HXLINE(1784)			return HX_("CT",b1,3a,00,00);
HXDLIN(1784)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("DELETE",2b,6c,5b,1d)) ){
HXLINE(1772)			return HX_("DE",81,3b,00,00);
HXDLIN(1772)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("DOWN",62,c0,2e,2d)) ){
HXLINE(1788)			return HX_("DN",8a,3b,00,00);
HXDLIN(1788)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("EIGHT",2f,b9,1c,eb)) ){
HXLINE(1799)			return HX_("8",38,00,00,00);
HXDLIN(1799)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("END",bb,9f,34,00)) ){
HXLINE(1810)			return HX_("ED",5f,3c,00,00);
HXDLIN(1810)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ENTER",f8,a4,74,ee)) ){
HXLINE(1779)			return HX_("EN",69,3c,00,00);
HXDLIN(1779)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("EQUALS",3f,9a,75,72)) ){
HXLINE(1771)			return HX_("=",3d,00,00,00);
HXDLIN(1771)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ESC",15,a4,34,00)) ||  (_hx_switch_0==HX_("ESCAPE",81,ef,5c,8d)) ){
HXLINE(1768)			return HX_("EC",5e,3c,00,00);
HXDLIN(1768)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("FIVE",32,9f,7c,2e)) ){
HXLINE(1796)			return HX_("5",35,00,00,00);
HXDLIN(1796)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("FOUR",e6,2b,81,2e)) ){
HXLINE(1795)			return HX_("4",34,00,00,00);
HXDLIN(1795)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("HOME",1f,92,d3,2f)) ){
HXLINE(1806)			return HX_("HM",05,3f,00,00);
HXDLIN(1806)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("INSERT",39,ef,5f,50)) ){
HXLINE(1807)			return HX_("IN",e5,3f,00,00);
HXDLIN(1807)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("LBRACKET",3c,3b,54,16)) ){
HXLINE(1774)			return HX_("[",5b,00,00,00);
HXDLIN(1774)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("LEFT",07,d0,70,32)) ){
HXLINE(1789)			return HX_("LT",88,42,00,00);
HXDLIN(1789)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("MINUS",50,b8,56,86)) ){
HXLINE(1769)			return HX_("-",2d,00,00,00);
HXDLIN(1769)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NINE",32,4d,c6,33)) ){
HXLINE(1800)			return HX_("9",39,00,00,00);
HXDLIN(1800)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NULL",87,66,cf,33)) ){
HXLINE(1828)			return HX_(" ",20,00,00,00);
HXDLIN(1828)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM0",4a,67,cf,33)) ){
HXLINE(1813)			return HX_("N0",22,44,00,00);
HXDLIN(1813)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM1",4b,67,cf,33)) ){
HXLINE(1814)			return HX_("N1",23,44,00,00);
HXDLIN(1814)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM2",4c,67,cf,33)) ){
HXLINE(1815)			return HX_("N2",24,44,00,00);
HXDLIN(1815)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM3",4d,67,cf,33)) ){
HXLINE(1816)			return HX_("N3",25,44,00,00);
HXDLIN(1816)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM4",4e,67,cf,33)) ){
HXLINE(1817)			return HX_("N4",26,44,00,00);
HXDLIN(1817)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM5",4f,67,cf,33)) ){
HXLINE(1818)			return HX_("N5",27,44,00,00);
HXDLIN(1818)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM6",50,67,cf,33)) ){
HXLINE(1819)			return HX_("N6",28,44,00,00);
HXDLIN(1819)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM7",51,67,cf,33)) ){
HXLINE(1820)			return HX_("N7",29,44,00,00);
HXDLIN(1820)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM8",52,67,cf,33)) ){
HXLINE(1821)			return HX_("N8",2a,44,00,00);
HXDLIN(1821)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM9",53,67,cf,33)) ){
HXLINE(1822)			return HX_("N9",2b,44,00,00);
HXDLIN(1822)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMDEC",3c,b7,fe,53)) ){
HXLINE(1827)			return HX_("N.",20,44,00,00);
HXDLIN(1827)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMDIV",cb,ba,fe,53)) ){
HXLINE(1823)			return HX_("N/",21,44,00,00);
HXDLIN(1823)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMLOCK",11,e9,32,30)) ){
HXLINE(1811)			return HX_("NM",3f,44,00,00);
HXDLIN(1811)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMMINUS",6a,b4,d0,8b)) ){
HXLINE(1826)			return HX_("N-",1f,44,00,00);
HXDLIN(1826)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMMULT",16,b5,e0,30)) ){
HXLINE(1824)			return HX_("N*",1c,44,00,00);
HXDLIN(1824)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMPLUS",80,8c,d5,32)) ){
HXLINE(1825)			return HX_("N+",1d,44,00,00);
HXDLIN(1825)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ONE",46,36,3c,00)) ){
HXLINE(1792)			return HX_("1",31,00,00,00);
HXDLIN(1792)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PAGEDOWN",31,36,e2,b9)) ){
HXLINE(1809)			return HX_("PD",f4,45,00,00);
HXDLIN(1809)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PAGEUP",6a,5e,bb,98)) ){
HXLINE(1808)			return HX_("PU",05,46,00,00);
HXDLIN(1808)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PAUSEBREAK",09,c6,40,ed)) ){
HXLINE(1805)			return HX_("PB",f2,45,00,00);
HXDLIN(1805)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PERIOD",01,0d,9e,ed)) ){
HXLINE(1782)			return HX_(".",2e,00,00,00);
HXDLIN(1782)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PLUS",5a,07,1b,35)) ){
HXLINE(1770)			return HX_("+",2b,00,00,00);
HXDLIN(1770)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("QUOTE",1c,5b,e0,db)) ){
HXLINE(1778)			return HX_("\"",22,00,00,00);
HXDLIN(1778)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("RBRACKET",f6,e7,82,6d)) ){
HXLINE(1775)			return HX_("]",5d,00,00,00);
HXDLIN(1775)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("RIGHT",bc,43,52,67)) ){
HXLINE(1790)			return HX_("RT",c2,47,00,00);
HXDLIN(1790)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SCROLLLOCK",78,72,a7,0c)) ){
HXLINE(1812)			return HX_("SC",90,48,00,00);
HXDLIN(1812)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SEMICOLON",11,86,2a,49)) ){
HXLINE(1777)			return HX_(";",3b,00,00,00);
HXDLIN(1777)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SEVEN",ed,5c,1f,f8)) ){
HXLINE(1798)			return HX_("7",37,00,00,00);
HXDLIN(1798)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SHIFT",62,24,11,fa)) ){
HXLINE(1780)			return HX_("SH",95,48,00,00);
HXDLIN(1780)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SIX",02,3b,3f,00)) ){
HXLINE(1797)			return HX_("6",36,00,00,00);
HXDLIN(1797)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SLASH",1d,f8,af,fc)) ){
HXLINE(1783)			return HX_("/",2f,00,00,00);
HXDLIN(1783)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SPACE",a6,c4,54,ff)) ){
HXLINE(1786)			return HX_("SP",9d,48,00,00);
HXDLIN(1786)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("TAB",35,f6,3f,00)) ){
HXLINE(1803)			return HX_("TB",6e,49,00,00);
HXDLIN(1803)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("TEN",bd,f9,3f,00)) ){
HXLINE(1801)			return HX_("10",df,2a,00,00);
HXDLIN(1801)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("THREE",3e,8c,7e,8d)) ){
HXLINE(1794)			return HX_("3",33,00,00,00);
HXDLIN(1794)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("TWO",6c,09,40,00)) ){
HXLINE(1793)			return HX_("2",32,00,00,00);
HXDLIN(1793)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("UP",5b,4a,00,00)) ){
HXLINE(1787)			return HX_("UP",5b,4a,00,00);
HXDLIN(1787)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ZERO",28,d7,b1,3b)) ){
HXLINE(1791)			return HX_("0",30,00,00,00);
HXDLIN(1791)			goto _hx_goto_126;
            		}
            		/* default */{
HXLINE(1829)			return str;
            		}
            		_hx_goto_126:;
HXLINE(1767)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,getShortTextFromFlxKeyText,return )

::String U_obj::getFlxKeyTextFromShortText(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1833_getFlxKeyTextFromShortText)
HXLINE(1834)		str = str.toUpperCase();
HXLINE(1835)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE(1896)			return HX_(" ",20,00,00,00);
HXDLIN(1896)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE(1847)			return HX_("QUOTE",1c,5b,e0,db);
HXDLIN(1847)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("*",2a,00,00,00)) ){
HXLINE(1895)			return HX_("NUMMULT",16,b5,e0,30);
HXDLIN(1895)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE(1839)			return HX_("PLUS",5a,07,1b,35);
HXDLIN(1839)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_(",",2c,00,00,00)) ){
HXLINE(1850)			return HX_("COMMA",b5,69,4b,c8);
HXDLIN(1850)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE(1837)			return HX_("MINUS",50,b8,56,86);
HXDLIN(1837)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_(".",2e,00,00,00)) ){
HXLINE(1851)			return HX_("PERIOD",01,0d,9e,ed);
HXDLIN(1851)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("/",2f,00,00,00)) ){
HXLINE(1852)			return HX_("SLASH",1d,f8,af,fc);
HXDLIN(1852)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE(1860)			return HX_("ZERO",28,d7,b1,3b);
HXDLIN(1860)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("1",31,00,00,00)) ){
HXLINE(1861)			return HX_("ONE",46,36,3c,00);
HXDLIN(1861)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("10",df,2a,00,00)) ){
HXLINE(1870)			return HX_("TEN",bd,f9,3f,00);
HXDLIN(1870)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("2",32,00,00,00)) ){
HXLINE(1862)			return HX_("TWO",6c,09,40,00);
HXDLIN(1862)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("3",33,00,00,00)) ){
HXLINE(1863)			return HX_("THREE",3e,8c,7e,8d);
HXDLIN(1863)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("4",34,00,00,00)) ){
HXLINE(1864)			return HX_("FOUR",e6,2b,81,2e);
HXDLIN(1864)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("5",35,00,00,00)) ){
HXLINE(1865)			return HX_("FIVE",32,9f,7c,2e);
HXDLIN(1865)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("6",36,00,00,00)) ){
HXLINE(1866)			return HX_("SIX",02,3b,3f,00);
HXDLIN(1866)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("7",37,00,00,00)) ){
HXLINE(1867)			return HX_("SEVEN",ed,5c,1f,f8);
HXDLIN(1867)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("8",38,00,00,00)) ){
HXLINE(1868)			return HX_("EIGHT",2f,b9,1c,eb);
HXDLIN(1868)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("9",39,00,00,00)) ){
HXLINE(1869)			return HX_("NINE",32,4d,c6,33);
HXDLIN(1869)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_(";",3b,00,00,00)) ){
HXLINE(1846)			return HX_("SEMICOLON",11,86,2a,49);
HXDLIN(1846)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("=",3d,00,00,00)) ){
HXLINE(1838)			return HX_("EQUALS",3f,9a,75,72);
HXDLIN(1838)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("AT",f3,38,00,00)) ){
HXLINE(1854)			return HX_("ALT",09,95,31,00);
HXDLIN(1854)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("BK",c9,39,00,00)) ){
HXLINE(1841)			return HX_("BACKSPACE",1f,f5,42,c6);
HXDLIN(1841)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("CP",ad,3a,00,00)) ){
HXLINE(1845)			return HX_("CAPSLOCK",8c,6c,6e,80);
HXDLIN(1845)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("CT",b1,3a,00,00)) ){
HXLINE(1853)			return HX_("CONTROL",3d,3f,55,99);
HXDLIN(1853)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("DE",81,3b,00,00)) ){
HXLINE(1840)			return HX_("DELETE",2b,6c,5b,1d);
HXDLIN(1840)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("DN",8a,3b,00,00)) ){
HXLINE(1857)			return HX_("DOWN",62,c0,2e,2d);
HXDLIN(1857)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("EC",5e,3c,00,00)) ){
HXLINE(1836)			return HX_("ESCAPE",81,ef,5c,8d);
HXDLIN(1836)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("ED",5f,3c,00,00)) ){
HXLINE(1878)			return HX_("END",bb,9f,34,00);
HXDLIN(1878)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("EN",69,3c,00,00)) ){
HXLINE(1848)			return HX_("ENTER",f8,a4,74,ee);
HXDLIN(1848)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("HM",05,3f,00,00)) ){
HXLINE(1874)			return HX_("HOME",1f,92,d3,2f);
HXDLIN(1874)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("IN",e5,3f,00,00)) ){
HXLINE(1875)			return HX_("INSERT",39,ef,5f,50);
HXDLIN(1875)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("LT",88,42,00,00)) ){
HXLINE(1858)			return HX_("LEFT",07,d0,70,32);
HXDLIN(1858)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N+",1d,44,00,00)) ){
HXLINE(1893)			return HX_("NUMPLUS",80,8c,d5,32);
HXDLIN(1893)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N-",1f,44,00,00)) ){
HXLINE(1894)			return HX_("NUMMINUS",6a,b4,d0,8b);
HXDLIN(1894)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N.",20,44,00,00)) ){
HXLINE(1891)			return HX_("NUMDEC",3c,b7,fe,53);
HXDLIN(1891)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N/",21,44,00,00)) ){
HXLINE(1892)			return HX_("NUMDIV",cb,ba,fe,53);
HXDLIN(1892)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N0",22,44,00,00)) ){
HXLINE(1881)			return HX_("NUM0",4a,67,cf,33);
HXDLIN(1881)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N1",23,44,00,00)) ){
HXLINE(1882)			return HX_("NUM1",4b,67,cf,33);
HXDLIN(1882)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N2",24,44,00,00)) ){
HXLINE(1883)			return HX_("NUM2",4c,67,cf,33);
HXDLIN(1883)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N3",25,44,00,00)) ){
HXLINE(1884)			return HX_("NUM3",4d,67,cf,33);
HXDLIN(1884)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N4",26,44,00,00)) ){
HXLINE(1885)			return HX_("NUM4",4e,67,cf,33);
HXDLIN(1885)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N5",27,44,00,00)) ){
HXLINE(1886)			return HX_("NUM5",4f,67,cf,33);
HXDLIN(1886)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N6",28,44,00,00)) ){
HXLINE(1887)			return HX_("NUM6",50,67,cf,33);
HXDLIN(1887)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N7",29,44,00,00)) ){
HXLINE(1888)			return HX_("NUM7",51,67,cf,33);
HXDLIN(1888)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N8",2a,44,00,00)) ){
HXLINE(1889)			return HX_("NUM8",52,67,cf,33);
HXDLIN(1889)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N9",2b,44,00,00)) ){
HXLINE(1890)			return HX_("NUM9",53,67,cf,33);
HXDLIN(1890)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("NM",3f,44,00,00)) ){
HXLINE(1879)			return HX_("NUMLOCK",11,e9,32,30);
HXDLIN(1879)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("PB",f2,45,00,00)) ){
HXLINE(1873)			return HX_("PAUSEBREAK",09,c6,40,ed);
HXDLIN(1873)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("PD",f4,45,00,00)) ){
HXLINE(1877)			return HX_("PAGEDOWN",31,36,e2,b9);
HXDLIN(1877)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("PU",05,46,00,00)) ){
HXLINE(1876)			return HX_("PAGEUP",6a,5e,bb,98);
HXDLIN(1876)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("RT",c2,47,00,00)) ){
HXLINE(1859)			return HX_("RIGHT",bc,43,52,67);
HXDLIN(1859)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("SC",90,48,00,00)) ){
HXLINE(1880)			return HX_("SCROLLLOCK",78,72,a7,0c);
HXDLIN(1880)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("SH",95,48,00,00)) ){
HXLINE(1849)			return HX_("SHIFT",62,24,11,fa);
HXDLIN(1849)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("SP",9d,48,00,00)) ){
HXLINE(1855)			return HX_("SPACE",a6,c4,54,ff);
HXDLIN(1855)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("TB",6e,49,00,00)) ){
HXLINE(1872)			return HX_("TAB",35,f6,3f,00);
HXDLIN(1872)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("UP",5b,4a,00,00)) ){
HXLINE(1856)			return HX_("UP",5b,4a,00,00);
HXDLIN(1856)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("[",5b,00,00,00)) ){
HXLINE(1842)			return HX_("LBRACKET",3c,3b,54,16);
HXDLIN(1842)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE(1844)			return HX_("BACKSLASH",96,28,9e,c3);
HXDLIN(1844)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("]",5d,00,00,00)) ){
HXLINE(1843)			return HX_("RBRACKET",f6,e7,82,6d);
HXDLIN(1843)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("`",60,00,00,00)) ){
HXLINE(1871)			return HX_("ACCENT",4a,3d,89,bd);
HXDLIN(1871)			goto _hx_goto_128;
            		}
            		/* default */{
HXLINE(1897)			return str;
            		}
            		_hx_goto_128:;
HXLINE(1835)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,getFlxKeyTextFromShortText,return )

::String U_obj::formatXml( ::Xml _xml){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1902_formatXml)
HXLINE(1903)		::String s = ::haxe::xml::Printer_obj::print(_xml,null());
HXLINE(1905)		 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_(">[^`<]*<",12,f9,4b,a6),HX_("g",67,00,00,00));
HXLINE(1906)		s = r->replace(s,HX_(">___SPLITHERE___<",66,2a,ca,af));
HXLINE(1908)		r =  ::EReg_obj::__alloc( HX_CTX ,HX_("___SPLITHERE___",94,d3,9b,af),HX_("g",67,00,00,00));
HXLINE(1909)		::Array< ::String > split = r->split(s);
HXLINE(1912)		s = HX_("",00,00,00,00);
HXLINE(1913)		int childDepht = 0;
HXLINE(1914)		::String whiteSpace = HX_("\t",09,00,00,00);
HXLINE(1916)		{
HXLINE(1916)			int _g = 0;
HXDLIN(1916)			while((_g < split->length)){
HXLINE(1916)				::String str = split->__get(_g);
HXDLIN(1916)				_g = (_g + 1);
HXLINE(1918)				{
HXLINE(1918)					int _g1 = 0;
HXDLIN(1918)					int _g2 = childDepht;
HXDLIN(1918)					while((_g1 < _g2)){
HXLINE(1918)						_g1 = (_g1 + 1);
HXDLIN(1918)						int i = (_g1 - 1);
HXLINE(1920)						s = (s + whiteSpace);
            					}
            				}
HXLINE(1923)				bool _hx_tmp;
HXDLIN(1923)				if ((str.charAt(0) == HX_("<",3c,00,00,00))) {
HXLINE(1923)					_hx_tmp = (str.charAt(1) == HX_("/",2f,00,00,00));
            				}
            				else {
HXLINE(1923)					_hx_tmp = false;
            				}
HXDLIN(1923)				if (_hx_tmp) {
HXLINE(1925)					childDepht = (childDepht - 1);
HXLINE(1926)					s = s.substr(0,(s.length - whiteSpace.length));
            				}
            				else {
HXLINE(1929)					bool _hx_tmp1;
HXDLIN(1929)					bool _hx_tmp2;
HXDLIN(1929)					if ((str.charAt((str.length - 1)) == HX_(">",3e,00,00,00))) {
HXLINE(1929)						_hx_tmp2 = (str.charAt((str.length - 2)) != HX_("/",2f,00,00,00));
            					}
            					else {
HXLINE(1929)						_hx_tmp2 = false;
            					}
HXDLIN(1929)					if (_hx_tmp2) {
HXLINE(1929)						_hx_tmp1 = (str.charAt((str.length - 2)) != HX_("-",2d,00,00,00));
            					}
            					else {
HXLINE(1929)						_hx_tmp1 = false;
            					}
HXDLIN(1929)					if (_hx_tmp1) {
HXLINE(1931)						childDepht = (childDepht + 1);
            					}
            				}
HXLINE(1934)				s = (s + (str + HX_("\n",0a,00,00,00)));
            			}
            		}
HXLINE(1937)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,formatXml,return )

::String U_obj::strCase(::String str,::String code){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1941_strCase)
HXDLIN(1941)		::String _hx_switch_0 = code;
            		if (  (_hx_switch_0==HX_("fu",4f,59,00,00)) ){
HXLINE(1944)			return ::flixel::addons::ui::U_obj::FU(str);
HXDLIN(1944)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("fu_",30,cc,4d,00)) ){
HXLINE(1945)			return ::flixel::addons::ui::U_obj::FU_(str);
HXDLIN(1945)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ){
HXLINE(1943)			return str.toLowerCase();
HXDLIN(1943)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(1942)			return str.toUpperCase();
HXDLIN(1942)			goto _hx_goto_133;
            		}
            		/* default */{
HXLINE(1946)			return str;
            		}
            		_hx_goto_133:;
HXLINE(1941)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,strCase,return )

 ::Xml U_obj::unparentXML( ::Xml f){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1952_unparentXML)
HXLINE(1953)		if (::hx::IsNotNull( f->parent )) {
HXLINE(1955)			f->parent->removeChild(f);
            		}
HXLINE(1957)		return f;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,unparentXML,return )

void U_obj::setButtonLabel(::Dynamic btn,::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1962_setButtonLabel)
HXLINE(1963)		if (::hx::IsNull( btn )) {
HXLINE(1963)			return;
            		}
HXLINE(1965)		if (::Std_obj::isOfType(btn,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIButton >()) ))) {
HXLINE(1968)			( ( ::flixel::text::FlxText)(::hx::TCast<  ::flixel::ui::FlxTypedButton >::cast(btn)->label) )->set_text(str);
            		}
            		else {
HXLINE(1970)			if (::Std_obj::isOfType(btn,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >()) ))) {
HXLINE(1974)				 ::flixel::addons::ui::FlxUISpriteButton fuisb = ( ( ::flixel::addons::ui::FlxUISpriteButton)(btn) );
HXLINE(1975)				if (::hx::IsNull( fuisb->label )) {
HXLINE(1975)					return;
            				}
HXLINE(1976)				if (::Std_obj::isOfType(fuisb->label,( ( ::Dynamic)(::hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >()) ))) {
HXLINE(1978)					 ::flixel::group::FlxTypedSpriteGroup g = ( ( ::flixel::group::FlxTypedSpriteGroup)(fuisb->label) );
HXLINE(1979)					if (::hx::IsNull( g->group->members )) {
HXLINE(1979)						return;
            					}
HXLINE(1980)					{
HXLINE(1980)						int _g = 0;
HXDLIN(1980)						::Array< ::Dynamic> _g1 = g->group->members;
HXDLIN(1980)						while((_g < _g1->length)){
HXLINE(1980)							 ::flixel::FlxSprite sprite = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1980)							_g = (_g + 1);
HXLINE(1982)							if (::hx::IsNull( sprite )) {
HXLINE(1982)								continue;
            							}
HXLINE(1983)							if (::Std_obj::isOfType(sprite,( ( ::Dynamic)(::hx::ClassOf< ::flixel::text::FlxText >()) ))) {
HXLINE(1985)								::hx::TCast<  ::flixel::text::FlxText >::cast(sprite)->set_text(str);
HXLINE(1986)								return;
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,setButtonLabel,(void))

 ::openfl::geom::Matrix U_obj::getMatrix(){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1993_getMatrix)
HXLINE(1994)		if (::hx::IsNull( ::flixel::addons::ui::U_obj::_matrix )) {
HXLINE(1995)			::flixel::addons::ui::U_obj::_matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(1997)		return ::flixel::addons::ui::U_obj::_matrix;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(U_obj,getMatrix,return )

 ::openfl::geom::Matrix U_obj::_matrix;


U_obj::U_obj()
{
}

bool U_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"fs") ) { outValue = fs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"FU") ) { outValue = FU_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { outValue = xml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fsx") ) { outValue = fsx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"FUL") ) { outValue = FUL_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"FU_") ) { outValue = FU__dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gfx") ) { outValue = gfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sfx") ) { outValue = sfx_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"json") ) { outValue = json_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"xml_f") ) { outValue = xml_f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_i") ) { outValue = xml_i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"slash") ) { outValue = slash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"field") ) { outValue = field_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_font") ) { outValue = _font_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xml_pt") ) { outValue = xml_pt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"center") ) { outValue = center_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getXML") ) { outValue = getXML_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBmp") ) { outValue = getBmp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dirStr") ) { outValue = dirStr_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xml_str") ) { outValue = xml_str_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boolify") ) { outValue = boolify_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_gfx") ) { outValue = xml_gfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hex2dec") ) { outValue = hex2dec_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hex2rgb") ) { outValue = hex2rgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rgb2hex") ) { outValue = rgb2hex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyXml") ) { outValue = copyXml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readXml") ) { outValue = readXml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endline") ) { outValue = endline_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fontStr") ) { outValue = fontStr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_gfx") ) { outValue = get_gfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"strCase") ) { outValue = strCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { outValue = ( _matrix ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xml_name") ) { outValue = xml_name_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStrNum") ) { outValue = isStrNum_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStrInt") ) { outValue = isStrInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pointify") ) { outValue = pointify_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_bool") ) { outValue = xml_bool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"test_int") ) { outValue = test_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseHex") ) { outValue = parseHex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fixSlash") ) { outValue = fixSlash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeXml") ) { outValue = writeXml_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xml_color") ) { outValue = xml_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"padDigits") ) { outValue = padDigits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_blend") ) { outValue = xml_blend_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aabb_test") ) { outValue = aabb_test_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatXml") ) { outValue = formatXml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMatrix") ) { outValue = getMatrix_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xml_iArray") ) { outValue = xml_iArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_fArray") ) { outValue = xml_fArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStrFloat") ) { outValue = isStrFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"test_float") ) { outValue = test_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLocList") ) { outValue = getLocList_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"disposeXML") ) { outValue = disposeXML_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyAccess") ) { outValue = copyAccess_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readAccess") ) { outValue = readAccess_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearArray") ) { outValue = clearArray_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hexChar2dec") ) { outValue = hexChar2dec_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyResize") ) { outValue = applyResize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circle_test") ) { outValue = circle_test_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unparentXML") ) { outValue = unparentXML_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"xml_strArray") ) { outValue = xml_strArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"destroyThing") ) { outValue = destroyThing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"checkHaxedef") ) { outValue = checkHaxedef_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleTileBmp") ) { outValue = scaleTileBmp_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"perc_to_float") ) { outValue = perc_to_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bmpToCSVLayer") ) { outValue = bmpToCSVLayer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intStr_to_arr") ) { outValue = intStr_to_arr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"obj_direction") ) { outValue = obj_direction_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"xml_colorArray") ) { outValue = xml_colorArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearArraySoft") ) { outValue = clearArraySoft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copy_arr_arr_i") ) { outValue = copy_arr_arr_i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aabb_test_mult") ) { outValue = aabb_test_mult_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitBitString") ) { outValue = splitBitString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setButtonLabel") ) { outValue = setButtonLabel_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"conformToBounds") ) { outValue = conformToBounds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadScaledImage") ) { outValue = loadScaledImage_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"copy_shallow_arr") ) { outValue = copy_shallow_arr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intStr_to_arrStr") ) { outValue = intStr_to_arrStr_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"compareStringVars") ) { outValue = compareStringVars_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"point_circle_test") ) { outValue = point_circle_test_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"copy_shallow_arr_i") ) { outValue = copy_shallow_arr_i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bmpToArrayIntLayer") ) { outValue = bmpToArrayIntLayer_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"blendModeFromString") ) { outValue = blendModeFromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMonoScaledImage") ) { outValue = loadMonoScaledImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bitStringDimensions") ) { outValue = bitStringDimensions_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"copy_shallow_arr_str") ) { outValue = copy_shallow_arr_str_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleAndStoreTileset") ) { outValue = scaleAndStoreTileset_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"loadImageScaleToHeight") ) { outValue = loadImageScaleToHeight_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getShortTextFromFlxKeyText") ) { outValue = getShortTextFromFlxKeyText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFlxKeyTextFromShortText") ) { outValue = getFlxKeyTextFromShortText_dyn(); return true; }
	}
	return false;
}

bool U_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *U_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo U_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(void *) &U_obj::_matrix,HX_("_matrix",e0,47,3f,2a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void U_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(U_obj::_matrix,"_matrix");
};

#ifdef HXCPP_VISIT_ALLOCS
static void U_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(U_obj::_matrix,"_matrix");
};

#endif

::hx::Class U_obj::__mClass;

static ::String U_obj_sStaticFields[] = {
	HX_("xml_str",09,93,5f,81),
	HX_("xml_name",f3,94,e4,ae),
	HX_("xml_color",bb,a1,f5,0c),
	HX_("xml_iArray",18,dd,a6,37),
	HX_("xml_fArray",fb,c7,94,04),
	HX_("xml_strArray",d0,a9,3e,ee),
	HX_("xml_colorArray",de,15,7c,cd),
	HX_("perc_to_float",51,7e,53,6d),
	HX_("isStrNum",9f,4d,85,69),
	HX_("isStrInt",48,7c,81,69),
	HX_("isStrFloat",35,7d,85,2e),
	HX_("xml_f",be,24,74,60),
	HX_("xml_i",c1,24,74,60),
	HX_("xml_pt",ac,0a,2c,05),
	HX_("boolify",12,f8,01,7e),
	HX_("pointify",ac,e3,69,ac),
	HX_("compareStringVars",22,fa,08,21),
	HX_("xml_bool",d2,a6,00,a7),
	HX_("xml_gfx",d1,6b,56,81),
	HX_("center",d5,25,db,05),
	HX_("test_int",42,ab,74,57),
	HX_("test_float",af,de,dd,e2),
	HX_("padDigits",d9,0f,da,1d),
	HX_("conformToBounds",f6,0a,e3,ea),
	HX_("parseHex",68,4c,71,d6),
	HX_("hexChar2dec",a1,38,77,83),
	HX_("hex2dec",2b,31,32,80),
	HX_("hex2rgb",76,d2,3c,80),
	HX_("applyResize",02,1a,76,44),
	HX_("rgb2hex",76,d3,f1,41),
	HX_("interpolate",c1,d4,32,1f),
	HX_("getLocList",08,63,44,6f),
	HX_("disposeXML",78,76,df,60),
	HX_("copyAccess",39,fb,ca,c0),
	HX_("copyXml",22,e9,88,43),
	HX_("readXml",21,14,d5,02),
	HX_("readAccess",9a,79,82,04),
	HX_("fixSlash",28,aa,29,e5),
	HX_("endline",4f,a5,fe,3e),
	HX_("slash",3d,c0,c1,7e),
	HX_("writeXml",38,ce,fb,23),
	HX_("getXML",e1,8a,2a,a3),
	HX_("json",28,42,68,46),
	HX_("field",ba,94,93,00),
	HX_("xml",d7,6d,5b,00),
	HX_("clearArraySoft",d6,4b,cf,53),
	HX_("clearArray",cc,ac,99,fa),
	HX_("destroyThing",94,80,89,01),
	HX_("fontStr",22,4e,2a,96),
	HX_("font",cf,5d,c0,43),
	HX_("_font",ae,79,d1,f6),
	HX_("fsx",8b,ca,4d,00),
	HX_("fs",4d,59,00,00),
	HX_("FU",4f,3d,00,00),
	HX_("FUL",1d,68,35,00),
	HX_("getBmp",4f,f5,19,a3),
	HX_("checkHaxedef",77,59,01,f6),
	HX_("copy_shallow_arr",6c,e6,ee,eb),
	HX_("copy_arr_arr_i",e3,fb,f5,9b),
	HX_("copy_shallow_arr_i",96,ac,46,f2),
	HX_("copy_shallow_arr_str",1e,7a,c3,12),
	HX_("FU_",30,68,35,00),
	HX_("xml_blend",a9,18,8e,77),
	HX_("blendModeFromString",4f,47,9d,c2),
	HX_("scaleTileBmp",4d,f8,b7,dc),
	HX_("scaleAndStoreTileset",60,15,fd,22),
	HX_("loadScaledImage",db,79,ed,47),
	HX_("loadImageScaleToHeight",d7,87,61,93),
	HX_("loadMonoScaledImage",78,f7,80,23),
	HX_("gfx",79,81,4e,00),
	HX_("bmpToArrayIntLayer",db,47,47,bf),
	HX_("bmpToCSVLayer",6b,d9,e4,7b),
	HX_("get_gfx",10,4a,c3,26),
	HX_("sfx",85,9c,57,00),
	HX_("intStr_to_arr",3a,05,69,9f),
	HX_("intStr_to_arrStr",97,db,dd,9c),
	HX_("dirStr",64,b1,5c,bc),
	HX_("obj_direction",b7,a8,b9,31),
	HX_("circle_test",21,f8,b5,af),
	HX_("point_circle_test",72,92,34,1b),
	HX_("aabb_test_mult",9e,f8,f6,3e),
	HX_("aabb_test",91,bd,d1,b3),
	HX_("bitStringDimensions",6b,39,4d,21),
	HX_("splitBitString",44,37,3a,a7),
	HX_("getShortTextFromFlxKeyText",d7,cc,e5,76),
	HX_("getFlxKeyTextFromShortText",8f,06,64,6f),
	HX_("formatXml",e0,b2,52,19),
	HX_("strCase",01,a0,cb,df),
	HX_("unparentXML",54,a1,ff,04),
	HX_("setButtonLabel",20,0a,18,65),
	HX_("getMatrix",77,bf,1e,38),
	HX_("_matrix",e0,47,3f,2a),
	::String(null())
};

void U_obj::__register()
{
	U_obj _hx_dummy;
	U_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.U",04,06,40,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &U_obj::__GetStatic;
	__mClass->mSetStaticField = &U_obj::__SetStatic;
	__mClass->mMarkFunc = U_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(U_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< U_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = U_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = U_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = U_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void U_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_2000_boot)
HXDLIN(2000)		_matrix = null();
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
