// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_20_new,"flixel.addons.ui.FlxUI9SliceSprite","new",0x6ddf7885,"flixel.addons.ui.FlxUI9SliceSprite.new","flixel/addons/ui/FlxUI9SliceSprite.hx",20,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_125_destroy,"flixel.addons.ui.FlxUI9SliceSprite","destroy",0x52d94b9f,"flixel.addons.ui.FlxUI9SliceSprite.destroy","flixel/addons/ui/FlxUI9SliceSprite.hx",125,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_130_resize,"flixel.addons.ui.FlxUI9SliceSprite","resize",0x881d96ef,"flixel.addons.ui.FlxUI9SliceSprite.resize","flixel/addons/ui/FlxUI9SliceSprite.hx",130,0x728ef6ec)
static const int _hx_array_data_7a35d213_3[] = {
	(int)4,(int)4,(int)7,(int)7,
};
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_208_noLongerUsingCachedID,"flixel.addons.ui.FlxUI9SliceSprite","noLongerUsingCachedID",0x94bbc89c,"flixel.addons.ui.FlxUI9SliceSprite.noLongerUsingCachedID","flixel/addons/ui/FlxUI9SliceSprite.hx",208,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_223_purgeSections,"flixel.addons.ui.FlxUI9SliceSprite","purgeSections",0xa3a6749e,"flixel.addons.ui.FlxUI9SliceSprite.purgeSections","flixel/addons/ui/FlxUI9SliceSprite.hx",223,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_242_getRectFromString,"flixel.addons.ui.FlxUI9SliceSprite","getRectFromString",0x5989423a,"flixel.addons.ui.FlxUI9SliceSprite.getRectFromString","flixel/addons/ui/FlxUI9SliceSprite.hx",242,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_255_getRectIntsFromString,"flixel.addons.ui.FlxUI9SliceSprite","getRectIntsFromString",0x35da5b7e,"flixel.addons.ui.FlxUI9SliceSprite.getRectIntsFromString","flixel/addons/ui/FlxUI9SliceSprite.hx",255,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_283_paintScale9,"flixel.addons.ui.FlxUI9SliceSprite","paintScale9",0xf90375d2,"flixel.addons.ui.FlxUI9SliceSprite.paintScale9","flixel/addons/ui/FlxUI9SliceSprite.hx",283,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_384_makePaintScale9Id,"flixel.addons.ui.FlxUI9SliceSprite","makePaintScale9Id",0x83e4ddff,"flixel.addons.ui.FlxUI9SliceSprite.makePaintScale9Id","flixel/addons/ui/FlxUI9SliceSprite.hx",384,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_387_paintCompoundBitmap,"flixel.addons.ui.FlxUI9SliceSprite","paintCompoundBitmap",0xb0d9501d,"flixel.addons.ui.FlxUI9SliceSprite.paintCompoundBitmap","flixel/addons/ui/FlxUI9SliceSprite.hx",387,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_452_paintBitmapSection,"flixel.addons.ui.FlxUI9SliceSprite","paintBitmapSection",0xd9a180b3,"flixel.addons.ui.FlxUI9SliceSprite.paintBitmapSection","flixel/addons/ui/FlxUI9SliceSprite.hx",452,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_516_bitmapFillRect,"flixel.addons.ui.FlxUI9SliceSprite","bitmapFillRect",0x90ef4851,"flixel.addons.ui.FlxUI9SliceSprite.bitmapFillRect","flixel/addons/ui/FlxUI9SliceSprite.hx",516,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_22_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",22,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_26_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",26,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_46_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",46,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_47_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",47,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_48_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",48,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_50_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",50,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_51_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",51,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_53_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",53,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_54_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",54,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_57_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",57,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_58_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",58,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_59_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",59,0x728ef6ec)
HX_LOCAL_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_60_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",60,0x728ef6ec)
namespace flixel{
namespace addons{
namespace ui{

void FlxUI9SliceSprite_obj::__construct(Float X,Float Y, ::Dynamic Graphic, ::openfl::geom::Rectangle Rect,::Array< int > Slice9,::hx::Null< int >  __o_Tile,::hx::Null< bool >  __o_Smooth,::String __o_Id,::hx::Null< Float >  __o_Ratio, ::flixel::math::FlxBasePoint Resize_point,::hx::Null< int >  __o_Resize_axis,::hx::Null< bool >  __o_DeferResize,::hx::Null< int >  __o_Color){
            		int Tile = __o_Tile.Default(0);
            		bool Smooth = __o_Smooth.Default(false);
            		::String Id = __o_Id;
            		if (::hx::IsNull(__o_Id)) Id = HX_("",00,00,00,00);
            		Float Ratio = __o_Ratio.Default(-1);
            		int Resize_axis = __o_Resize_axis.Default(1);
            		bool DeferResize = __o_DeferResize.Default(false);
            		int Color = __o_Color.Default(-1);
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_20_new)
HXLINE(  41)		this->_asset_id = HX_("",00,00,00,00);
HXLINE(  39)		this->_smooth = false;
HXLINE(  38)		this->_tile = 0;
HXLINE(  36)		this->_slice9 = null();
HXLINE(  34)		this->paintScale9_id = HX_("",00,00,00,00);
HXLINE(  82)		super::__construct(X,Y,null());
HXLINE(  83)		this->set_color(Color);
HXLINE(  84)		this->_slice9 = Slice9;
HXLINE(  85)		this->_tile = Tile;
HXLINE(  86)		this->_smooth = Smooth;
HXLINE(  88)		this->_asset_id = HX_("",00,00,00,00);
HXLINE(  90)		if (::hx::IsNull( Graphic )) {
HXLINE(  91)			Graphic = HX_("flixel/flixel-ui/img/chrome.png",fe,fb,12,55);
            		}
HXLINE(  94)		if (::Std_obj::isOfType(Graphic,( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXLINE(  95)			this->_asset_id = ( (::String)(Graphic) );
HXLINE(  96)			this->_raw_pixels = null();
            		}
            		else {
HXLINE(  97)			if (::Std_obj::isOfType(Graphic,( ( ::Dynamic)(::hx::ClassOf< ::openfl::display::BitmapData >()) ))) {
HXLINE(  98)				this->_asset_id = Id;
HXLINE(  99)				this->_raw_pixels = ( ( ::openfl::display::BitmapData)(Graphic) );
            			}
            			else {
HXLINE( 100)				if (::Std_obj::isOfType(Graphic,( ( ::Dynamic)(::hx::ClassOf< ::flixel::graphics::FlxGraphic >()) ))) {
HXLINE( 101)					 ::flixel::graphics::FlxGraphic fg = ( ( ::flixel::graphics::FlxGraphic)(Graphic) );
HXLINE( 102)					this->_asset_id = fg->key;
HXLINE( 103)					this->_raw_pixels = fg->bitmap;
            				}
            			}
            		}
HXLINE( 106)		this->set_resize_ratio(Ratio);
HXLINE( 107)		this->resize_ratio_axis = Resize_axis;
HXLINE( 108)		if (::hx::IsNotNull( Resize_point )) {
HXLINE( 109)			this->set_resize_point(Resize_point);
            		}
HXLINE( 112)		if (DeferResize) {
HXLINE( 114)			 ::flixel::math::FlxBasePoint pt = ::flixel::addons::ui::U_obj::applyResize(this->resize_ratio,this->resize_ratio_axis,Rect->width,Rect->height,null());
HXLINE( 115)			this->set_width(pt->x);
HXLINE( 116)			this->set_height(pt->y);
            		}
            		else {
HXLINE( 120)			this->resize(Rect->width,Rect->height);
            		}
            	}

Dynamic FlxUI9SliceSprite_obj::__CreateEmpty() { return new FlxUI9SliceSprite_obj; }

void *FlxUI9SliceSprite_obj::_hx_vtable = 0;

Dynamic FlxUI9SliceSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxUI9SliceSprite_obj > _hx_result = new FlxUI9SliceSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12]);
	return _hx_result;
}

bool FlxUI9SliceSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x1d227259) {
			if (inClassId<=(int)0x0dc54e00) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0dc54e00;
			} else {
				return inClassId==(int)0x1d227259;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

static ::flixel::IFlxSprite_obj _hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_IFlxSprite= {
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_active,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_visible,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alive,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_exists,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::draw,
	( void (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::update,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::destroy,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::kill,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::revive,
	( ::String (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::toString,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_x,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_y,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alpha,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_angle,
	( int (::hx::Object::*)(int))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_facing,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_moves,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_immovable,
	( void (::hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::reset,
	( void (::hx::Object::*)(::hx::Null< Float > ,::hx::Null< Float > ))&::flixel::addons::ui::FlxUI9SliceSprite_obj::setPosition,
};

static ::flixel::IFlxBasic_obj _hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_IFlxBasic= {
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_active,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_visible,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alive,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_exists,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::draw,
	( void (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::update,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::destroy,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::kill,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::revive,
	( ::String (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::toString,
};

static ::flixel::addons::ui::interfaces::IFlxUIWidget_obj _hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_addons_ui_interfaces_IFlxUIWidget= {
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_active,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_visible,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alive,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_exists,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::draw,
	( void (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::update,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::destroy,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::kill,
	( void (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::revive,
	( ::String (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::toString,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_x,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_y,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alpha,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_angle,
	( int (::hx::Object::*)(int))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_facing,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_moves,
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_immovable,
	( void (::hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::reset,
	( void (::hx::Object::*)(::hx::Null< Float > ,::hx::Null< Float > ))&::flixel::addons::ui::FlxUI9SliceSprite_obj::setPosition,
	( Float (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::get_width,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_width,
	( Float (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::get_height,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_height,
};

static ::flixel::addons::ui::interfaces::IResizable_obj _hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_addons_ui_interfaces_IResizable= {
	( Float (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::get_width,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_width,
	( Float (::hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::get_height,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_height,
	( void (::hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::resize,
};

void *FlxUI9SliceSprite_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x897c83aa: return &_hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_IFlxSprite;
		case (int)0x284cfea9: return &_hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_IFlxBasic;
		case (int)0x998525de: return &_hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_addons_ui_interfaces_IFlxUIWidget;
		case (int)0x194a3c9f: return &_hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_addons_ui_interfaces_IResizable;
	}
	return super::_hx_getInterface(inHash);
}

void FlxUI9SliceSprite_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_125_destroy)
HXLINE( 126)		this->noLongerUsingCachedID(this->paintScale9_id);
HXLINE( 127)		this->super::destroy();
            	}


void FlxUI9SliceSprite_obj::resize(Float w,Float h){
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_130_resize)
HXLINE( 132)		if ((::Std_obj::_hx_int(w) < 1)) {
HXLINE( 133)			w = ( (Float)(1) );
            		}
HXLINE( 135)		if ((::Std_obj::_hx_int(h) < 1)) {
HXLINE( 136)			h = ( (Float)(1) );
            		}
HXLINE( 139)		Float old_width = this->get_width();
HXLINE( 140)		Float old_height = this->get_height();
HXLINE( 142)		 ::flixel::math::FlxBasePoint pt = ::flixel::addons::ui::U_obj::applyResize(this->resize_ratio,this->resize_ratio_axis,w,h,null());
HXLINE( 144)		w = pt->x;
HXLINE( 145)		h = pt->y;
HXLINE( 147)		int iw = ::Std_obj::_hx_int(pt->x);
HXLINE( 148)		int ih = ::Std_obj::_hx_int(pt->y);
HXLINE( 150)		bool _hx_tmp;
HXDLIN( 150)		if (::hx::IsNotNull( this->_slice9 )) {
HXLINE( 150)			_hx_tmp = ::hx::IsPointerEq( this->_slice9,::Array_obj< int >::__new(0) );
            		}
            		else {
HXLINE( 150)			_hx_tmp = true;
            		}
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 151)			this->_slice9 = ::Array_obj< int >::fromData( _hx_array_data_7a35d213_3,4);
            		}
HXLINE( 155)		::String key = (this->_asset_id + HX_("_",5f,00,00,00));
HXDLIN( 155)		::String key1 = ((((((key + this->_slice9->join(HX_(",",2c,00,00,00))) + HX_("_",5f,00,00,00)) + iw) + HX_("x",78,00,00,00)) + ih) + HX_("_",5f,00,00,00));
HXDLIN( 155)		::String key2 = ((key1 + this->_tile) + HX_("_",5f,00,00,00));
HXDLIN( 155)		::String key3 = (key2 + ::Std_obj::string(this->_smooth));
HXLINE( 158)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key3)) ) )) {
HXLINE( 161)			this->loadGraphic(key3,false,iw,ih,null(),null());
            		}
            		else {
HXLINE( 166)			int bmpCanvas = ::Std_obj::_hx_int(w);
HXDLIN( 166)			 ::openfl::display::BitmapData bmpCanvas1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bmpCanvas,::Std_obj::_hx_int(h),null(),null());
HXLINE( 167)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect->x = ( (Float)(0) );
HXLINE( 168)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect->y = ( (Float)(0) );
HXLINE( 169)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect->width = w;
HXLINE( 170)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect->height = h;
HXLINE( 172)			::String oldID = this->paintScale9_id;
HXLINE( 175)			::String newID = ::flixel::addons::ui::FlxUI9SliceSprite_obj::makePaintScale9Id(this->_asset_id,this->_slice9,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect);
HXLINE( 178)			if ((newID != oldID)) {
HXLINE( 181)				this->paintScale9_id = ::flixel::addons::ui::FlxUI9SliceSprite_obj::paintScale9(bmpCanvas1,this->_asset_id,this->_slice9,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect,this->_tile,this->_smooth,this->_raw_pixels);
HXLINE( 184)				 ::Dynamic sectionCounter = ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->get(this->paintScale9_id);
HXLINE( 185)				::hx::FieldRef((sectionCounter).mPtr,HX_("useCount",08,a7,ce,11))++;
HXLINE( 187)				this->noLongerUsingCachedID(oldID);
            			}
HXLINE( 190)			this->loadGraphic(bmpCanvas1,false,bmpCanvas1->width,bmpCanvas1->height,false,key3);
            		}
HXLINE( 193)		Float diff_w = (this->get_width() - old_width);
HXLINE( 194)		Float diff_h = (this->get_height() - old_height);
HXLINE( 196)		if (::hx::IsNotNull( this->resize_point )) {
HXLINE( 198)			Float delta_x = (diff_w * this->resize_point->x);
HXLINE( 199)			Float delta_y = (diff_h * this->resize_point->y);
HXLINE( 200)			this->set_x((this->x - delta_x));
HXLINE( 201)			this->set_y((this->y - delta_y));
            		}
            	}


void FlxUI9SliceSprite_obj::noLongerUsingCachedID(::String id){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_208_noLongerUsingCachedID)
HXDLIN( 208)		if (::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->exists(id)) {
HXLINE( 211)			 ::Dynamic oldCounter = ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->get(id);
HXLINE( 212)			::hx::FieldRef((oldCounter).mPtr,HX_("useCount",08,a7,ce,11))--;
HXLINE( 215)			if (::hx::IsLessEq( oldCounter->__Field(HX_("useCount",08,a7,ce,11),::hx::paccDynamic),0 )) {
HXLINE( 217)				this->purgeSections(id);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI9SliceSprite_obj,noLongerUsingCachedID,(void))

void FlxUI9SliceSprite_obj::purgeSections(::String id){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_223_purgeSections)
HXLINE( 225)		 ::Dynamic counter = ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->get(id);
HXLINE( 227)		if (::hx::IsNotNull( counter )) {
HXLINE( 231)			{
HXLINE( 231)				int _g = 0;
HXDLIN( 231)				::Array< ::String > _g1 = ( (::Array< ::String >)(counter->__Field(HX_("subKeys",94,77,0a,15),::hx::paccDynamic)) );
HXDLIN( 231)				while((_g < _g1->length)){
HXLINE( 231)					::String key = _g1->__get(_g);
HXDLIN( 231)					_g = (_g + 1);
HXLINE( 233)					::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache->remove(key);
            				}
            			}
HXLINE( 237)			counter->__SetField(HX_("subKeys",94,77,0a,15),null(),::hx::paccDynamic);
HXLINE( 238)			::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->remove(id);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI9SliceSprite_obj,purgeSections,(void))

int FlxUI9SliceSprite_obj::bitmapsCreated;

bool FlxUI9SliceSprite_obj::useSectionCache;

 ::haxe::ds::StringMap FlxUI9SliceSprite_obj::sectionCache;

 ::haxe::ds::StringMap FlxUI9SliceSprite_obj::cacheCounter;

 ::openfl::geom::Point FlxUI9SliceSprite_obj::_staticPoint;

 ::openfl::geom::Rectangle FlxUI9SliceSprite_obj::_staticRect;

 ::openfl::geom::Rectangle FlxUI9SliceSprite_obj::_staticRect2;

 ::openfl::geom::Point FlxUI9SliceSprite_obj::_staticPointZero;

 ::openfl::geom::Matrix FlxUI9SliceSprite_obj::_staticMatrix;

 ::flixel::math::FlxRect FlxUI9SliceSprite_obj::_staticFlxRect;

 ::flixel::math::FlxRect FlxUI9SliceSprite_obj::_staticFlxRect2;

int FlxUI9SliceSprite_obj::TILE_NONE;

int FlxUI9SliceSprite_obj::TILE_BOTH;

int FlxUI9SliceSprite_obj::TILE_H;

int FlxUI9SliceSprite_obj::TILE_V;

 ::haxe::ds::StringMap FlxUI9SliceSprite_obj::_staticRects;

 ::openfl::geom::Rectangle FlxUI9SliceSprite_obj::getRectFromString(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_242_getRectFromString)
HXLINE( 243)		::Array< ::String > coords = str.split(HX_(",",2c,00,00,00));
HXLINE( 244)		 ::openfl::geom::Rectangle rect = null();
HXLINE( 245)		bool _hx_tmp;
HXDLIN( 245)		if (::hx::IsNotNull( coords )) {
HXLINE( 245)			_hx_tmp = (coords->length == 4);
            		}
            		else {
HXLINE( 245)			_hx_tmp = false;
            		}
HXDLIN( 245)		if (_hx_tmp) {
HXLINE( 246)			int x_ = ( (int)(::Std_obj::parseInt(coords->__get(0))) );
HXLINE( 247)			int y_ = ( (int)(::Std_obj::parseInt(coords->__get(1))) );
HXLINE( 248)			int w_ = ( (int)(::Std_obj::parseInt(coords->__get(2))) );
HXLINE( 249)			int h_ = ( (int)(::Std_obj::parseInt(coords->__get(3))) );
HXLINE( 250)			rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x_,y_,w_,h_);
            		}
HXLINE( 252)		return rect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUI9SliceSprite_obj,getRectFromString,return )

::Array< int > FlxUI9SliceSprite_obj::getRectIntsFromString(::String str){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_255_getRectIntsFromString)
HXLINE( 256)		::Array< ::String > coords = str.split(HX_(",",2c,00,00,00));
HXLINE( 257)		bool _hx_tmp;
HXDLIN( 257)		if (::hx::IsNotNull( coords )) {
HXLINE( 257)			_hx_tmp = (coords->length == 4);
            		}
            		else {
HXLINE( 257)			_hx_tmp = false;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXLINE( 258)			int x1 = ( (int)(::Std_obj::parseInt(coords->__get(0))) );
HXLINE( 259)			int y1 = ( (int)(::Std_obj::parseInt(coords->__get(1))) );
HXLINE( 260)			int x2 = ( (int)(::Std_obj::parseInt(coords->__get(2))) );
HXLINE( 261)			int y2 = ( (int)(::Std_obj::parseInt(coords->__get(3))) );
HXLINE( 262)			return ::Array_obj< int >::__new(4)->init(0,x1)->init(1,y1)->init(2,x2)->init(3,y2);
            		}
HXLINE( 264)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUI9SliceSprite_obj,getRectIntsFromString,return )

::String FlxUI9SliceSprite_obj::paintScale9( ::openfl::display::BitmapData g,::String assetID,::Array< int > scale9, ::flixel::math::FlxRect rc,::hx::Null< int >  __o_tile,::hx::Null< bool >  __o_smooth, ::openfl::display::BitmapData raw){
            		int tile = __o_tile.Default(0);
            		bool smooth = __o_smooth.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_283_paintScale9)
HXLINE( 284)		if (::hx::IsNotNull( scale9 )) {
HXLINE( 286)			int w;
HXLINE( 287)			int h;
HXLINE( 288)			if (::hx::IsNull( raw )) {
HXLINE( 289)				 ::openfl::display::BitmapData assetBmp = ::flixel::addons::ui::U_obj::getBmp(assetID);
HXLINE( 290)				if (::hx::IsNotNull( assetBmp )) {
HXLINE( 292)					w = assetBmp->width;
HXLINE( 293)					h = assetBmp->height;
            				}
            				else {
HXLINE( 297)					 ::flixel::graphics::FlxGraphic assetFlx = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(assetID)) );
HXLINE( 298)					w = assetFlx->width;
HXLINE( 299)					h = assetFlx->height;
            				}
            			}
            			else {
HXLINE( 302)				w = raw->width;
HXLINE( 303)				h = raw->height;
            			}
HXLINE( 306)			int x1 = scale9->__get(0);
HXLINE( 307)			int y1 = scale9->__get(1);
HXLINE( 308)			int x2 = scale9->__get(2);
HXLINE( 309)			int y2 = scale9->__get(3);
HXLINE( 311)			if (::hx::IsNull( ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects )) {
HXLINE( 313)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 314)				{
HXLINE( 314)					::Dynamic this1 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 314)					 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 314)					_this->x = ( (Float)(0) );
HXDLIN( 314)					_this->y = ( (Float)(0) );
HXDLIN( 314)					_this->width = ( (Float)(0) );
HXDLIN( 314)					_this->height = ( (Float)(0) );
HXDLIN( 314)					 ::flixel::math::FlxRect rect = _this;
HXDLIN( 314)					rect->_inPool = false;
HXDLIN( 314)					( ( ::haxe::ds::StringMap)(this1) )->set(HX_("top.left",80,54,c1,7e),rect);
            				}
HXLINE( 315)				{
HXLINE( 315)					::Dynamic this2 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 315)					 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 315)					_this1->x = ( (Float)(0) );
HXDLIN( 315)					_this1->y = ( (Float)(0) );
HXDLIN( 315)					_this1->width = ( (Float)(0) );
HXDLIN( 315)					_this1->height = ( (Float)(0) );
HXDLIN( 315)					 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN( 315)					rect1->_inPool = false;
HXDLIN( 315)					( ( ::haxe::ds::StringMap)(this2) )->set(HX_("top",95,66,58,00),rect1);
            				}
HXLINE( 316)				{
HXLINE( 316)					::Dynamic this3 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 316)					 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 316)					_this2->x = ( (Float)(0) );
HXDLIN( 316)					_this2->y = ( (Float)(0) );
HXDLIN( 316)					_this2->width = ( (Float)(0) );
HXDLIN( 316)					_this2->height = ( (Float)(0) );
HXDLIN( 316)					 ::flixel::math::FlxRect rect2 = _this2;
HXDLIN( 316)					rect2->_inPool = false;
HXDLIN( 316)					( ( ::haxe::ds::StringMap)(this3) )->set(HX_("top.right",43,a9,75,e1),rect2);
            				}
HXLINE( 317)				{
HXLINE( 317)					::Dynamic this4 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 317)					 ::flixel::math::FlxRect _this3 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 317)					_this3->x = ( (Float)(0) );
HXDLIN( 317)					_this3->y = ( (Float)(0) );
HXDLIN( 317)					_this3->width = ( (Float)(0) );
HXDLIN( 317)					_this3->height = ( (Float)(0) );
HXDLIN( 317)					 ::flixel::math::FlxRect rect3 = _this3;
HXDLIN( 317)					rect3->_inPool = false;
HXDLIN( 317)					( ( ::haxe::ds::StringMap)(this4) )->set(HX_("left",07,08,b0,47),rect3);
            				}
HXLINE( 318)				{
HXLINE( 318)					::Dynamic this5 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 318)					 ::flixel::math::FlxRect _this4 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 318)					_this4->x = ( (Float)(0) );
HXDLIN( 318)					_this4->y = ( (Float)(0) );
HXDLIN( 318)					_this4->width = ( (Float)(0) );
HXDLIN( 318)					_this4->height = ( (Float)(0) );
HXDLIN( 318)					 ::flixel::math::FlxRect rect4 = _this4;
HXDLIN( 318)					rect4->_inPool = false;
HXDLIN( 318)					( ( ::haxe::ds::StringMap)(this5) )->set(HX_("middle",55,d3,5e,4c),rect4);
            				}
HXLINE( 319)				{
HXLINE( 319)					::Dynamic this6 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 319)					 ::flixel::math::FlxRect _this5 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 319)					_this5->x = ( (Float)(0) );
HXDLIN( 319)					_this5->y = ( (Float)(0) );
HXDLIN( 319)					_this5->width = ( (Float)(0) );
HXDLIN( 319)					_this5->height = ( (Float)(0) );
HXDLIN( 319)					 ::flixel::math::FlxRect rect5 = _this5;
HXDLIN( 319)					rect5->_inPool = false;
HXDLIN( 319)					( ( ::haxe::ds::StringMap)(this6) )->set(HX_("right",dc,0b,64,e9),rect5);
            				}
HXLINE( 320)				{
HXLINE( 320)					::Dynamic this7 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 320)					 ::flixel::math::FlxRect _this6 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 320)					_this6->x = ( (Float)(0) );
HXDLIN( 320)					_this6->y = ( (Float)(0) );
HXDLIN( 320)					_this6->width = ( (Float)(0) );
HXDLIN( 320)					_this6->height = ( (Float)(0) );
HXDLIN( 320)					 ::flixel::math::FlxRect rect6 = _this6;
HXDLIN( 320)					rect6->_inPool = false;
HXDLIN( 320)					( ( ::haxe::ds::StringMap)(this7) )->set(HX_("bottom.left",6a,dc,81,96),rect6);
            				}
HXLINE( 321)				{
HXLINE( 321)					::Dynamic this8 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 321)					 ::flixel::math::FlxRect _this7 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 321)					_this7->x = ( (Float)(0) );
HXDLIN( 321)					_this7->y = ( (Float)(0) );
HXDLIN( 321)					_this7->width = ( (Float)(0) );
HXDLIN( 321)					_this7->height = ( (Float)(0) );
HXDLIN( 321)					 ::flixel::math::FlxRect rect7 = _this7;
HXDLIN( 321)					rect7->_inPool = false;
HXDLIN( 321)					( ( ::haxe::ds::StringMap)(this8) )->set(HX_("bottom",eb,e6,78,65),rect7);
            				}
HXLINE( 322)				{
HXLINE( 322)					::Dynamic this9 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 322)					 ::flixel::math::FlxRect _this8 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 322)					_this8->x = ( (Float)(0) );
HXDLIN( 322)					_this8->y = ( (Float)(0) );
HXDLIN( 322)					_this8->width = ( (Float)(0) );
HXDLIN( 322)					_this8->height = ( (Float)(0) );
HXDLIN( 322)					 ::flixel::math::FlxRect rect8 = _this8;
HXDLIN( 322)					rect8->_inPool = false;
HXDLIN( 322)					( ( ::haxe::ds::StringMap)(this9) )->set(HX_("bottom.right",19,0e,2c,92),rect8);
            				}
            			}
HXLINE( 325)			{
HXLINE( 325)				 ::flixel::math::FlxRect _this9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top.left",80,54,c1,7e))) );
HXDLIN( 325)				_this9->x = ( (Float)(0) );
HXDLIN( 325)				_this9->y = ( (Float)(0) );
HXDLIN( 325)				_this9->width = ( (Float)(x1) );
HXDLIN( 325)				_this9->height = ( (Float)(y1) );
            			}
HXLINE( 326)			{
HXLINE( 326)				 ::flixel::math::FlxRect _this10 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top",95,66,58,00))) );
HXDLIN( 326)				_this10->x = ( (Float)(x1) );
HXDLIN( 326)				_this10->y = ( (Float)(0) );
HXDLIN( 326)				_this10->width = ( (Float)((x2 - x1)) );
HXDLIN( 326)				_this10->height = ( (Float)(y1) );
            			}
HXLINE( 327)			{
HXLINE( 327)				 ::flixel::math::FlxRect _this11 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top.right",43,a9,75,e1))) );
HXDLIN( 327)				_this11->x = ( (Float)(x2) );
HXDLIN( 327)				_this11->y = ( (Float)(0) );
HXDLIN( 327)				_this11->width = ( (Float)((w - x2)) );
HXDLIN( 327)				_this11->height = ( (Float)(y1) );
            			}
HXLINE( 329)			{
HXLINE( 329)				 ::flixel::math::FlxRect _this12 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("left",07,08,b0,47))) );
HXDLIN( 329)				_this12->x = ( (Float)(0) );
HXDLIN( 329)				_this12->y = ( (Float)(y1) );
HXDLIN( 329)				_this12->width = ( (Float)(x1) );
HXDLIN( 329)				_this12->height = ( (Float)((y2 - y1)) );
            			}
HXLINE( 330)			{
HXLINE( 330)				 ::flixel::math::FlxRect _this13 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("middle",55,d3,5e,4c))) );
HXDLIN( 330)				_this13->x = ( (Float)(x1) );
HXDLIN( 330)				_this13->y = ( (Float)(y1) );
HXDLIN( 330)				_this13->width = ( (Float)((x2 - x1)) );
HXDLIN( 330)				_this13->height = ( (Float)((y2 - y1)) );
            			}
HXLINE( 331)			{
HXLINE( 331)				 ::flixel::math::FlxRect _this14 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("right",dc,0b,64,e9))) );
HXDLIN( 331)				_this14->x = ( (Float)(x2) );
HXDLIN( 331)				_this14->y = ( (Float)(y1) );
HXDLIN( 331)				_this14->width = ( (Float)((w - x2)) );
HXDLIN( 331)				_this14->height = ( (Float)((y2 - y1)) );
            			}
HXLINE( 333)			{
HXLINE( 333)				 ::flixel::math::FlxRect _this15 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom.left",6a,dc,81,96))) );
HXDLIN( 333)				_this15->x = ( (Float)(0) );
HXDLIN( 333)				_this15->y = ( (Float)(y2) );
HXDLIN( 333)				_this15->width = ( (Float)(x1) );
HXDLIN( 333)				_this15->height = ( (Float)((h - y2)) );
            			}
HXLINE( 334)			{
HXLINE( 334)				 ::flixel::math::FlxRect _this16 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom",eb,e6,78,65))) );
HXDLIN( 334)				_this16->x = ( (Float)(x1) );
HXDLIN( 334)				_this16->y = ( (Float)(y2) );
HXDLIN( 334)				_this16->width = ( (Float)((x2 - x1)) );
HXDLIN( 334)				_this16->height = ( (Float)((h - y2)) );
            			}
HXLINE( 335)			{
HXLINE( 335)				 ::flixel::math::FlxRect _this17 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom.right",19,0e,2c,92))) );
HXDLIN( 335)				_this17->x = ( (Float)(x2) );
HXDLIN( 335)				_this17->y = ( (Float)(y2) );
HXDLIN( 335)				_this17->width = ( (Float)((w - x2)) );
HXDLIN( 335)				_this17->height = ( (Float)((h - y2)) );
            			}
HXLINE( 337)			if (::hx::IsNull( ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter )) {
HXLINE( 339)				::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 343)			::String uniqueID = ::flixel::addons::ui::FlxUI9SliceSprite_obj::makePaintScale9Id(assetID,scale9,rc);
HXLINE( 346)			 ::Dynamic sectionCounter = ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->get(uniqueID);
HXLINE( 348)			if (::hx::IsNull( sectionCounter )) {
HXLINE( 351)				sectionCounter =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("useCount",08,a7,ce,11),0)
            					->setFixed(1,HX_("subKeys",94,77,0a,15),::Array_obj< ::String >::__new(0)));
HXLINE( 353)				{
HXLINE( 353)					int _g = 0;
HXDLIN( 353)					while((_g < 9)){
HXLINE( 353)						_g = (_g + 1);
HXDLIN( 353)						int i = (_g - 1);
HXLINE( 355)						 ::flixel::math::FlxRect rect9;
HXLINE( 356)						switch((int)(i)){
            							case (int)0: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top.left",80,54,c1,7e))) );
            							}
            							break;
            							case (int)1: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top",95,66,58,00))) );
            							}
            							break;
            							case (int)2: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top.right",43,a9,75,e1))) );
            							}
            							break;
            							case (int)3: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("left",07,08,b0,47))) );
            							}
            							break;
            							case (int)4: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("middle",55,d3,5e,4c))) );
            							}
            							break;
            							case (int)5: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("right",dc,0b,64,e9))) );
            							}
            							break;
            							case (int)6: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom.left",6a,dc,81,96))) );
            							}
            							break;
            							case (int)7: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom",eb,e6,78,65))) );
            							}
            							break;
            							case (int)8: {
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom.right",19,0e,2c,92))) );
            							}
            							break;
            							default:{
HXLINE( 355)								rect9 = ( ( ::flixel::math::FlxRect)(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top.left",80,54,c1,7e))) );
            							}
            						}
HXLINE( 369)						::String cacheId = (((((((((assetID + HX_("_",5f,00,00,00)) + rect9->x) + HX_("_",5f,00,00,00)) + rect9->y) + HX_("_",5f,00,00,00)) + rect9->width) + HX_("_",5f,00,00,00)) + rect9->height) + HX_("_",5f,00,00,00));
HXLINE( 370)						( (::Array< ::String >)(sectionCounter->__Field(HX_("subKeys",94,77,0a,15),::hx::paccDynamic)) )->push(cacheId);
            					}
            				}
HXLINE( 372)				::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->set(uniqueID,sectionCounter);
            			}
HXLINE( 375)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintCompoundBitmap(g,assetID,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,rc,tile,smooth,raw);
HXLINE( 377)			return uniqueID;
            		}
HXLINE( 379)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxUI9SliceSprite_obj,paintScale9,return )

::String FlxUI9SliceSprite_obj::makePaintScale9Id(::String assetId,::Array< int > slice9, ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_384_makePaintScale9Id)
HXDLIN( 384)		::String _hx_tmp = (((assetId + HX_("_",5f,00,00,00)) + slice9->join(HX_(",",2c,00,00,00))) + HX_("_",5f,00,00,00));
HXDLIN( 384)		 ::Dynamic value = rect->x;
HXDLIN( 384)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 384)		_this->label = HX_("x",78,00,00,00);
HXDLIN( 384)		_this->value = value;
HXDLIN( 384)		 ::Dynamic value1 = rect->y;
HXDLIN( 384)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 384)		_this1->label = HX_("y",79,00,00,00);
HXDLIN( 384)		_this1->value = value1;
HXDLIN( 384)		 ::Dynamic value2 = rect->width;
HXDLIN( 384)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 384)		_this2->label = HX_("w",77,00,00,00);
HXDLIN( 384)		_this2->value = value2;
HXDLIN( 384)		 ::Dynamic value3 = rect->height;
HXDLIN( 384)		 ::flixel::util::LabelValuePair _this3 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 384)		_this3->label = HX_("h",68,00,00,00);
HXDLIN( 384)		_this3->value = value3;
HXDLIN( 384)		return (_hx_tmp + ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_this)->init(1,_this1)->init(2,_this2)->init(3,_this3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI9SliceSprite_obj,makePaintScale9Id,return )

void FlxUI9SliceSprite_obj::paintCompoundBitmap( ::openfl::display::BitmapData g,::String assetID, ::haxe::ds::StringMap sourceRects, ::flixel::math::FlxRect targetRect,::hx::Null< int >  __o_tile,::hx::Null< bool >  __o_smooth, ::openfl::display::BitmapData raw){
            		int tile = __o_tile.Default(0);
            		bool smooth = __o_smooth.Default(false);
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_387_paintCompoundBitmap)
HXLINE( 388)		targetRect->x = ( (Float)(::Std_obj::_hx_int(targetRect->x)) );
HXLINE( 389)		targetRect->y = ( (Float)(::Std_obj::_hx_int(targetRect->y)) );
HXLINE( 390)		targetRect->width = ( (Float)(::Std_obj::_hx_int(targetRect->width)) );
HXLINE( 391)		targetRect->height = ( (Float)(::Std_obj::_hx_int(targetRect->height)) );
HXLINE( 394)		 ::flixel::math::FlxRect tl = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("top.left",80,54,c1,7e))) );
HXLINE( 395)		if (::hx::IsNotNull( tl )) {
HXLINE( 396)			{
HXLINE( 396)				 ::flixel::math::FlxRect _this = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 396)				_this->x = ( (Float)(0) );
HXDLIN( 396)				_this->y = ( (Float)(0) );
HXDLIN( 396)				_this->width = tl->width;
HXDLIN( 396)				_this->height = tl->height;
            			}
HXLINE( 397)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,tl,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),0,smooth,raw);
            		}
HXLINE( 400)		 ::flixel::math::FlxRect tr = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("top.right",43,a9,75,e1))) );
HXLINE( 401)		if (::hx::IsNotNull( tr )) {
HXLINE( 402)			{
HXLINE( 402)				 ::flixel::math::FlxRect _this1 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 402)				_this1->x = (targetRect->width - tr->width);
HXDLIN( 402)				_this1->y = ( (Float)(0) );
HXDLIN( 402)				_this1->width = tr->width;
HXDLIN( 402)				_this1->height = tr->height;
            			}
HXLINE( 403)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,tr,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),0,smooth,raw);
            		}
HXLINE( 406)		 ::flixel::math::FlxRect t = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("top",95,66,58,00))) );
HXLINE( 407)		if (::hx::IsNotNull( t )) {
HXLINE( 408)			{
HXLINE( 408)				 ::flixel::math::FlxRect _this2 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 408)				_this2->x = tl->width;
HXDLIN( 408)				_this2->y = ( (Float)(0) );
HXDLIN( 408)				_this2->width = ((targetRect->width - tl->width) - tr->width);
HXDLIN( 408)				_this2->height = t->height;
            			}
HXLINE( 409)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,t,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),(tile & 16),smooth,raw);
            		}
HXLINE( 413)		 ::flixel::math::FlxRect bl = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("bottom.left",6a,dc,81,96))) );
HXLINE( 414)		if (::hx::IsNotNull( bl )) {
HXLINE( 415)			{
HXLINE( 415)				 ::flixel::math::FlxRect _this3 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 415)				_this3->x = ( (Float)(0) );
HXDLIN( 415)				_this3->y = (targetRect->height - bl->height);
HXDLIN( 415)				_this3->width = bl->width;
HXDLIN( 415)				_this3->height = bl->height;
            			}
HXLINE( 416)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,bl,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),0,smooth,raw);
            		}
HXLINE( 419)		 ::flixel::math::FlxRect br = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("bottom.right",19,0e,2c,92))) );
HXLINE( 420)		if (::hx::IsNotNull( br )) {
HXLINE( 421)			{
HXLINE( 421)				 ::flixel::math::FlxRect _this4 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 421)				_this4->x = (targetRect->width - br->width);
HXDLIN( 421)				_this4->y = (targetRect->height - br->height);
HXDLIN( 421)				_this4->width = br->width;
HXDLIN( 421)				_this4->height = br->height;
            			}
HXLINE( 422)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,br,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),0,smooth,raw);
            		}
HXLINE( 425)		 ::flixel::math::FlxRect b = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("bottom",eb,e6,78,65))) );
HXLINE( 426)		if (::hx::IsNotNull( b )) {
HXLINE( 427)			{
HXLINE( 427)				 ::flixel::math::FlxRect _this5 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 427)				_this5->x = bl->width;
HXDLIN( 427)				_this5->y = (targetRect->height - b->height);
HXDLIN( 427)				_this5->width = ((targetRect->width - bl->width) - br->width);
HXDLIN( 427)				_this5->height = b->height;
            			}
HXLINE( 428)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,b,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),(tile & 16),smooth,raw);
            		}
HXLINE( 432)		 ::flixel::math::FlxRect l = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("left",07,08,b0,47))) );
HXLINE( 433)		if (::hx::IsNotNull( l )) {
HXLINE( 434)			{
HXLINE( 434)				 ::flixel::math::FlxRect _this6 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 434)				_this6->x = ( (Float)(0) );
HXDLIN( 434)				_this6->y = tl->height;
HXDLIN( 434)				_this6->width = l->width;
HXDLIN( 434)				_this6->height = ((targetRect->height - tl->height) - bl->height);
            			}
HXLINE( 435)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,l,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),(tile & 1),smooth,raw);
            		}
HXLINE( 438)		 ::flixel::math::FlxRect r = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("right",dc,0b,64,e9))) );
HXLINE( 439)		if (::hx::IsNotNull( r )) {
HXLINE( 440)			{
HXLINE( 440)				 ::flixel::math::FlxRect _this7 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 440)				_this7->x = (targetRect->width - r->width);
HXDLIN( 440)				_this7->y = tr->height;
HXDLIN( 440)				_this7->width = r->width;
HXDLIN( 440)				_this7->height = ((targetRect->height - tl->height) - bl->height);
            			}
HXLINE( 441)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,r,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),(tile & 1),smooth,raw);
            		}
HXLINE( 444)		 ::flixel::math::FlxRect m = ( ( ::flixel::math::FlxRect)(sourceRects->get(HX_("middle",55,d3,5e,4c))) );
HXLINE( 445)		if (::hx::IsNotNull( m )) {
HXLINE( 446)			{
HXLINE( 446)				 ::flixel::math::FlxRect _this8 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 446)				_this8->x = l->width;
HXDLIN( 446)				_this8->y = t->height;
HXDLIN( 446)				_this8->width = ((targetRect->width - l->width) - r->width);
HXDLIN( 446)				_this8->height = ((targetRect->height - t->height) - b->height);
            			}
HXLINE( 447)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,m,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),tile,smooth,raw);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxUI9SliceSprite_obj,paintCompoundBitmap,(void))

void FlxUI9SliceSprite_obj::paintBitmapSection( ::openfl::display::BitmapData g,::String assetId, ::flixel::math::FlxRect src, ::flixel::math::FlxRect dst, ::openfl::display::BitmapData srcData,::hx::Null< int >  __o_tile,::hx::Null< bool >  __o_smooth, ::openfl::display::BitmapData raw){
            		int tile = __o_tile.Default(0);
            		bool smooth = __o_smooth.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_452_paintBitmapSection)
HXLINE( 453)		if (::hx::IsNull( srcData )) {
HXLINE( 455)			if (::hx::IsNotNull( raw )) {
HXLINE( 457)				srcData = raw;
            			}
            			else {
HXLINE( 461)				srcData = ::flixel::addons::ui::U_obj::getBmp(assetId);
            			}
            		}
HXLINE( 465)		src->x = ( (Float)(::Std_obj::_hx_int(src->x)) );
HXLINE( 466)		src->y = ( (Float)(::Std_obj::_hx_int(src->y)) );
HXLINE( 467)		src->width = ( (Float)(::Std_obj::_hx_int(src->width)) );
HXLINE( 468)		src->height = ( (Float)(::Std_obj::_hx_int(src->height)) );
HXLINE( 470)		dst->x = ( (Float)(::Std_obj::_hx_int(dst->x)) );
HXLINE( 471)		dst->y = ( (Float)(::Std_obj::_hx_int(dst->y)) );
HXLINE( 472)		dst->width = ( (Float)(::Std_obj::_hx_int(dst->width)) );
HXLINE( 473)		dst->height = ( (Float)(::Std_obj::_hx_int(dst->height)) );
HXLINE( 475)		 ::openfl::display::BitmapData section = null();
HXLINE( 476)		::String cacheId = null();
HXLINE( 477)		bool _hx_tmp;
HXDLIN( 477)		if ((::flixel::addons::ui::FlxUI9SliceSprite_obj::useSectionCache == true)) {
HXLINE( 477)			_hx_tmp = ::hx::IsNotNull( assetId );
            		}
            		else {
HXLINE( 477)			_hx_tmp = false;
            		}
HXDLIN( 477)		if (_hx_tmp) {
HXLINE( 479)			if (::hx::IsNull( ::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache )) {
HXLINE( 481)				::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 483)			cacheId = (((((((((assetId + HX_("_",5f,00,00,00)) + src->x) + HX_("_",5f,00,00,00)) + src->y) + HX_("_",5f,00,00,00)) + src->width) + HX_("_",5f,00,00,00)) + src->height) + HX_("_",5f,00,00,00));
HXLINE( 484)			section = ( ( ::openfl::display::BitmapData)(::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache->get(cacheId)) );
            		}
HXLINE( 487)		if (::hx::IsNull( section )) {
HXLINE( 489)			int fillcolor = 16777215;
HXLINE( 490)			int section1 = ::Std_obj::_hx_int(src->width);
HXDLIN( 490)			section =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,section1,::Std_obj::_hx_int(src->height),true,fillcolor);
HXLINE( 492)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->x = src->x;
HXLINE( 493)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->y = src->y;
HXLINE( 494)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->width = src->width;
HXLINE( 495)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->height = src->height;
HXLINE( 497)			section->copyPixels(srcData,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPointZero,null(),null(),null());
HXLINE( 499)			bool _hx_tmp1;
HXDLIN( 499)			if ((::flixel::addons::ui::FlxUI9SliceSprite_obj::useSectionCache == true)) {
HXLINE( 499)				_hx_tmp1 = ::hx::IsNotNull( cacheId );
            			}
            			else {
HXLINE( 499)				_hx_tmp1 = false;
            			}
HXDLIN( 499)			if (_hx_tmp1) {
HXLINE( 500)				::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache->set(cacheId,section);
            			}
HXLINE( 502)			::flixel::addons::ui::FlxUI9SliceSprite_obj::bitmapsCreated++;
            		}
HXLINE( 505)		bool _hx_tmp2;
HXDLIN( 505)		if ((dst->width > 0)) {
HXLINE( 505)			_hx_tmp2 = (dst->height > 0);
            		}
            		else {
HXLINE( 505)			_hx_tmp2 = false;
            		}
HXDLIN( 505)		if (_hx_tmp2) {
HXLINE( 507)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->x = dst->x;
HXLINE( 508)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->y = dst->y;
HXLINE( 509)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->width = dst->width;
HXLINE( 510)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->height = dst->height;
HXLINE( 512)			::flixel::addons::ui::FlxUI9SliceSprite_obj::bitmapFillRect(g,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2,section,tile,smooth);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(FlxUI9SliceSprite_obj,paintBitmapSection,(void))

void FlxUI9SliceSprite_obj::bitmapFillRect( ::openfl::display::BitmapData g, ::openfl::geom::Rectangle dst, ::openfl::display::BitmapData section,::hx::Null< int >  __o_tile,::hx::Null< bool >  __o_smooth_){
            		int tile = __o_tile.Default(0);
            		bool smooth_ = __o_smooth_.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_516_bitmapFillRect)
HXLINE( 523)		int final_pixels = ::Std_obj::_hx_int(dst->width);
HXDLIN( 523)		 ::openfl::display::BitmapData final_pixels1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,final_pixels,::Std_obj::_hx_int(dst->height),true,0);
HXLINE( 525)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix->identity();
HXLINE( 528)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->x = ( (Float)(0) );
HXLINE( 529)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->y = ( (Float)(0) );
HXLINE( 530)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->width = ( (Float)(section->width) );
HXLINE( 531)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->height = ( (Float)(section->height) );
HXLINE( 533)		if (((tile & 16) == 0)) {
HXLINE( 534)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix->scale((dst->width / ( (Float)(section->width) )),((Float)1.0));
HXLINE( 535)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->width = dst->width;
            		}
HXLINE( 537)		if (((tile & 1) == 0)) {
HXLINE( 538)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix->scale(((Float)1.0),(dst->height / ( (Float)(section->height) )));
HXLINE( 539)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->height = dst->height;
            		}
HXLINE( 547)		bool _hx_tmp;
HXDLIN( 547)		if ((section->width == dst->width)) {
HXLINE( 547)			_hx_tmp = (section->height == dst->height);
            		}
            		else {
HXLINE( 547)			_hx_tmp = false;
            		}
HXDLIN( 547)		if (_hx_tmp) {
HXLINE( 548)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x = ( (Float)(0) );
HXLINE( 549)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y = ( (Float)(0) );
HXLINE( 550)			final_pixels1->copyPixels(section,section->rect,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint,null(),null(),null());
            		}
            		else {
HXLINE( 552)			if (smooth_) {
HXLINE( 553)				final_pixels1->draw(section,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix,null(),null(),null(),true);
            			}
            			else {
HXLINE( 555)				final_pixels1->draw(section,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix,null(),null(),null(),false);
            			}
            		}
HXLINE( 560)		if ((tile != 0)) {
HXLINE( 564)			if (((tile & 16) == 16)) {
HXLINE( 566)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x = ( (Float)(0) );
HXLINE( 567)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y = ( (Float)(0) );
HXLINE( 569)				while((::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x < dst->width)){
HXLINE( 570)					 ::openfl::geom::Point fh = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint;
HXDLIN( 570)					fh->x = (fh->x + ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->width);
HXLINE( 573)					final_pixels1->copyPixels(final_pixels1,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint,null(),null(),null());
            				}
            			}
HXLINE( 583)			if (((tile & 1) == 1)) {
HXLINE( 585)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x = ( (Float)(0) );
HXLINE( 586)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y = ( (Float)(0) );
HXLINE( 589)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->width = ( (Float)(final_pixels1->width) );
HXLINE( 591)				while((::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y < dst->height)){
HXLINE( 592)					 ::openfl::geom::Point fh1 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint;
HXDLIN( 592)					fh1->y = (fh1->y + ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->height);
HXLINE( 596)					final_pixels1->copyPixels(final_pixels1,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint,null(),null(),null());
            				}
            			}
            		}
HXLINE( 605)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x = dst->x;
HXLINE( 606)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y = dst->y;
HXLINE( 609)		g->copyPixels(final_pixels1,final_pixels1->rect,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint,null(),null(),null());
HXLINE( 612)		final_pixels1 = ::flixel::util::FlxDestroyUtil_obj::dispose(final_pixels1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxUI9SliceSprite_obj,bitmapFillRect,(void))


::hx::ObjectPtr< FlxUI9SliceSprite_obj > FlxUI9SliceSprite_obj::__new(Float X,Float Y, ::Dynamic Graphic, ::openfl::geom::Rectangle Rect,::Array< int > Slice9,::hx::Null< int >  __o_Tile,::hx::Null< bool >  __o_Smooth,::String __o_Id,::hx::Null< Float >  __o_Ratio, ::flixel::math::FlxBasePoint Resize_point,::hx::Null< int >  __o_Resize_axis,::hx::Null< bool >  __o_DeferResize,::hx::Null< int >  __o_Color) {
	::hx::ObjectPtr< FlxUI9SliceSprite_obj > __this = new FlxUI9SliceSprite_obj();
	__this->__construct(X,Y,Graphic,Rect,Slice9,__o_Tile,__o_Smooth,__o_Id,__o_Ratio,Resize_point,__o_Resize_axis,__o_DeferResize,__o_Color);
	return __this;
}

::hx::ObjectPtr< FlxUI9SliceSprite_obj > FlxUI9SliceSprite_obj::__alloc(::hx::Ctx *_hx_ctx,Float X,Float Y, ::Dynamic Graphic, ::openfl::geom::Rectangle Rect,::Array< int > Slice9,::hx::Null< int >  __o_Tile,::hx::Null< bool >  __o_Smooth,::String __o_Id,::hx::Null< Float >  __o_Ratio, ::flixel::math::FlxBasePoint Resize_point,::hx::Null< int >  __o_Resize_axis,::hx::Null< bool >  __o_DeferResize,::hx::Null< int >  __o_Color) {
	FlxUI9SliceSprite_obj *__this = (FlxUI9SliceSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUI9SliceSprite_obj), true, "flixel.addons.ui.FlxUI9SliceSprite"));
	*(void **)__this = FlxUI9SliceSprite_obj::_hx_vtable;
	__this->__construct(X,Y,Graphic,Rect,Slice9,__o_Tile,__o_Smooth,__o_Id,__o_Ratio,Resize_point,__o_Resize_axis,__o_DeferResize,__o_Color);
	return __this;
}

FlxUI9SliceSprite_obj::FlxUI9SliceSprite_obj()
{
}

void FlxUI9SliceSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUI9SliceSprite);
	HX_MARK_MEMBER_NAME(_bmpCanvas,"_bmpCanvas");
	HX_MARK_MEMBER_NAME(paintScale9_id,"paintScale9_id");
	HX_MARK_MEMBER_NAME(_slice9,"_slice9");
	HX_MARK_MEMBER_NAME(_tile,"_tile");
	HX_MARK_MEMBER_NAME(_smooth,"_smooth");
	HX_MARK_MEMBER_NAME(_asset_id,"_asset_id");
	HX_MARK_MEMBER_NAME(_raw_pixels,"_raw_pixels");
	 ::flixel::addons::ui::FlxUISprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUI9SliceSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_bmpCanvas,"_bmpCanvas");
	HX_VISIT_MEMBER_NAME(paintScale9_id,"paintScale9_id");
	HX_VISIT_MEMBER_NAME(_slice9,"_slice9");
	HX_VISIT_MEMBER_NAME(_tile,"_tile");
	HX_VISIT_MEMBER_NAME(_smooth,"_smooth");
	HX_VISIT_MEMBER_NAME(_asset_id,"_asset_id");
	HX_VISIT_MEMBER_NAME(_raw_pixels,"_raw_pixels");
	 ::flixel::addons::ui::FlxUISprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxUI9SliceSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_tile") ) { return ::hx::Val( _tile ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_slice9") ) { return ::hx::Val( _slice9 ); }
		if (HX_FIELD_EQ(inName,"_smooth") ) { return ::hx::Val( _smooth ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_asset_id") ) { return ::hx::Val( _asset_id ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_bmpCanvas") ) { return ::hx::Val( _bmpCanvas ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_raw_pixels") ) { return ::hx::Val( _raw_pixels ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"purgeSections") ) { return ::hx::Val( purgeSections_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"paintScale9_id") ) { return ::hx::Val( paintScale9_id ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"noLongerUsingCachedID") ) { return ::hx::Val( noLongerUsingCachedID_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUI9SliceSprite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"_staticRect") ) { outValue = ( _staticRect ); return true; }
		if (HX_FIELD_EQ(inName,"paintScale9") ) { outValue = paintScale9_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sectionCache") ) { outValue = ( sectionCache ); return true; }
		if (HX_FIELD_EQ(inName,"cacheCounter") ) { outValue = ( cacheCounter ); return true; }
		if (HX_FIELD_EQ(inName,"_staticPoint") ) { outValue = ( _staticPoint ); return true; }
		if (HX_FIELD_EQ(inName,"_staticRect2") ) { outValue = ( _staticRect2 ); return true; }
		if (HX_FIELD_EQ(inName,"_staticRects") ) { outValue = ( _staticRects ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_staticMatrix") ) { outValue = ( _staticMatrix ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bitmapsCreated") ) { outValue = ( bitmapsCreated ); return true; }
		if (HX_FIELD_EQ(inName,"_staticFlxRect") ) { outValue = ( _staticFlxRect ); return true; }
		if (HX_FIELD_EQ(inName,"bitmapFillRect") ) { outValue = bitmapFillRect_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"useSectionCache") ) { outValue = ( useSectionCache ); return true; }
		if (HX_FIELD_EQ(inName,"_staticFlxRect2") ) { outValue = ( _staticFlxRect2 ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_staticPointZero") ) { outValue = ( _staticPointZero ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getRectFromString") ) { outValue = getRectFromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"makePaintScale9Id") ) { outValue = makePaintScale9Id_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"paintBitmapSection") ) { outValue = paintBitmapSection_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"paintCompoundBitmap") ) { outValue = paintCompoundBitmap_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getRectIntsFromString") ) { outValue = getRectIntsFromString_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxUI9SliceSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_tile") ) { _tile=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_slice9") ) { _slice9=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_smooth") ) { _smooth=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_asset_id") ) { _asset_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_bmpCanvas") ) { _bmpCanvas=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_raw_pixels") ) { _raw_pixels=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"paintScale9_id") ) { paintScale9_id=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxUI9SliceSprite_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"_staticRect") ) { _staticRect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sectionCache") ) { sectionCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cacheCounter") ) { cacheCounter=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticPoint") ) { _staticPoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticRect2") ) { _staticRect2=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticRects") ) { _staticRects=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_staticMatrix") ) { _staticMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bitmapsCreated") ) { bitmapsCreated=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticFlxRect") ) { _staticFlxRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"useSectionCache") ) { useSectionCache=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticFlxRect2") ) { _staticFlxRect2=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_staticPointZero") ) { _staticPointZero=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
	}
	return false;
}

void FlxUI9SliceSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_bmpCanvas",be,02,c2,94));
	outFields->push(HX_("paintScale9_id",6d,bb,fa,d2));
	outFields->push(HX_("_slice9",46,15,7b,de));
	outFields->push(HX_("_tile",0d,e7,0d,00));
	outFields->push(HX_("_smooth",cd,19,e2,75));
	outFields->push(HX_("_asset_id",69,d5,4f,11));
	outFields->push(HX_("_raw_pixels",03,05,c0,f2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxUI9SliceSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxUI9SliceSprite_obj,_bmpCanvas),HX_("_bmpCanvas",be,02,c2,94)},
	{::hx::fsString,(int)offsetof(FlxUI9SliceSprite_obj,paintScale9_id),HX_("paintScale9_id",6d,bb,fa,d2)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(FlxUI9SliceSprite_obj,_slice9),HX_("_slice9",46,15,7b,de)},
	{::hx::fsInt,(int)offsetof(FlxUI9SliceSprite_obj,_tile),HX_("_tile",0d,e7,0d,00)},
	{::hx::fsBool,(int)offsetof(FlxUI9SliceSprite_obj,_smooth),HX_("_smooth",cd,19,e2,75)},
	{::hx::fsString,(int)offsetof(FlxUI9SliceSprite_obj,_asset_id),HX_("_asset_id",69,d5,4f,11)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxUI9SliceSprite_obj,_raw_pixels),HX_("_raw_pixels",03,05,c0,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxUI9SliceSprite_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FlxUI9SliceSprite_obj::bitmapsCreated,HX_("bitmapsCreated",a4,38,f9,81)},
	{::hx::fsBool,(void *) &FlxUI9SliceSprite_obj::useSectionCache,HX_("useSectionCache",04,cd,d1,77)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FlxUI9SliceSprite_obj::sectionCache,HX_("sectionCache",1d,86,f1,9f)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FlxUI9SliceSprite_obj::cacheCounter,HX_("cacheCounter",da,e8,be,cb)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(void *) &FlxUI9SliceSprite_obj::_staticPoint,HX_("_staticPoint",c3,3e,66,41)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(void *) &FlxUI9SliceSprite_obj::_staticRect,HX_("_staticRect",11,12,dd,7f)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(void *) &FlxUI9SliceSprite_obj::_staticRect2,HX_("_staticRect2",01,bd,92,61)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(void *) &FlxUI9SliceSprite_obj::_staticPointZero,HX_("_staticPointZero",8b,97,4a,47)},
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(void *) &FlxUI9SliceSprite_obj::_staticMatrix,HX_("_staticMatrix",6e,d0,aa,bc)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(void *) &FlxUI9SliceSprite_obj::_staticFlxRect,HX_("_staticFlxRect",e9,ab,12,d4)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(void *) &FlxUI9SliceSprite_obj::_staticFlxRect2,HX_("_staticFlxRect2",29,c0,43,bc)},
	{::hx::fsInt,(void *) &FlxUI9SliceSprite_obj::TILE_NONE,HX_("TILE_NONE",a9,1c,74,5c)},
	{::hx::fsInt,(void *) &FlxUI9SliceSprite_obj::TILE_BOTH,HX_("TILE_BOTH",72,92,85,54)},
	{::hx::fsInt,(void *) &FlxUI9SliceSprite_obj::TILE_H,HX_("TILE_H",b7,8d,ab,d0)},
	{::hx::fsInt,(void *) &FlxUI9SliceSprite_obj::TILE_V,HX_("TILE_V",c5,8d,ab,d0)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FlxUI9SliceSprite_obj::_staticRects,HX_("_staticRects",42,bd,92,61)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUI9SliceSprite_obj_sMemberFields[] = {
	HX_("_bmpCanvas",be,02,c2,94),
	HX_("paintScale9_id",6d,bb,fa,d2),
	HX_("_slice9",46,15,7b,de),
	HX_("_tile",0d,e7,0d,00),
	HX_("_smooth",cd,19,e2,75),
	HX_("_asset_id",69,d5,4f,11),
	HX_("_raw_pixels",03,05,c0,f2),
	HX_("destroy",fa,2c,86,24),
	HX_("resize",f4,59,7b,08),
	HX_("noLongerUsingCachedID",37,33,42,98),
	HX_("purgeSections",39,4c,d3,23),
	::String(null()) };

static void FlxUI9SliceSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::bitmapsCreated,"bitmapsCreated");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::useSectionCache,"useSectionCache");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::sectionCache,"sectionCache");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::cacheCounter,"cacheCounter");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticPoint,"_staticPoint");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRect,"_staticRect");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRect2,"_staticRect2");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticPointZero,"_staticPointZero");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticMatrix,"_staticMatrix");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticFlxRect,"_staticFlxRect");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticFlxRect2,"_staticFlxRect2");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_NONE,"TILE_NONE");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_BOTH,"TILE_BOTH");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_H,"TILE_H");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_V,"TILE_V");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRects,"_staticRects");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUI9SliceSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::bitmapsCreated,"bitmapsCreated");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::useSectionCache,"useSectionCache");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::sectionCache,"sectionCache");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::cacheCounter,"cacheCounter");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticPoint,"_staticPoint");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRect,"_staticRect");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRect2,"_staticRect2");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticPointZero,"_staticPointZero");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticMatrix,"_staticMatrix");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticFlxRect,"_staticFlxRect");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticFlxRect2,"_staticFlxRect2");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_NONE,"TILE_NONE");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_BOTH,"TILE_BOTH");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_H,"TILE_H");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_V,"TILE_V");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRects,"_staticRects");
};

#endif

::hx::Class FlxUI9SliceSprite_obj::__mClass;

static ::String FlxUI9SliceSprite_obj_sStaticFields[] = {
	HX_("bitmapsCreated",a4,38,f9,81),
	HX_("useSectionCache",04,cd,d1,77),
	HX_("sectionCache",1d,86,f1,9f),
	HX_("cacheCounter",da,e8,be,cb),
	HX_("_staticPoint",c3,3e,66,41),
	HX_("_staticRect",11,12,dd,7f),
	HX_("_staticRect2",01,bd,92,61),
	HX_("_staticPointZero",8b,97,4a,47),
	HX_("_staticMatrix",6e,d0,aa,bc),
	HX_("_staticFlxRect",e9,ab,12,d4),
	HX_("_staticFlxRect2",29,c0,43,bc),
	HX_("TILE_NONE",a9,1c,74,5c),
	HX_("TILE_BOTH",72,92,85,54),
	HX_("TILE_H",b7,8d,ab,d0),
	HX_("TILE_V",c5,8d,ab,d0),
	HX_("_staticRects",42,bd,92,61),
	HX_("getRectFromString",55,83,89,c5),
	HX_("getRectIntsFromString",19,c6,60,39),
	HX_("paintScale9",ad,a0,ab,9e),
	HX_("makePaintScale9Id",1a,1f,e5,ef),
	HX_("paintCompoundBitmap",f8,4d,40,4e),
	HX_("paintBitmapSection",38,37,da,ed),
	HX_("bitmapFillRect",56,18,ff,37),
	::String(null())
};

void FlxUI9SliceSprite_obj::__register()
{
	FlxUI9SliceSprite_obj _hx_dummy;
	FlxUI9SliceSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxUI9SliceSprite",13,d2,35,7a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUI9SliceSprite_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxUI9SliceSprite_obj::__SetStatic;
	__mClass->mMarkFunc = FlxUI9SliceSprite_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxUI9SliceSprite_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxUI9SliceSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxUI9SliceSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUI9SliceSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUI9SliceSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUI9SliceSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUI9SliceSprite_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_22_boot)
HXDLIN(  22)		bitmapsCreated = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_26_boot)
HXDLIN(  26)		useSectionCache = true;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_46_boot)
HXDLIN(  46)		_staticPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_47_boot)
HXDLIN(  47)		_staticRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_48_boot)
HXDLIN(  48)		_staticRect2 =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_50_boot)
HXDLIN(  50)		_staticPointZero =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_51_boot)
HXDLIN(  51)		_staticMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxRect _hx_run(){
            			HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_53_boot)
HXDLIN(  53)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(  53)			_this->x = ( (Float)(0) );
HXDLIN(  53)			_this->y = ( (Float)(0) );
HXDLIN(  53)			_this->width = ( (Float)(0) );
HXDLIN(  53)			_this->height = ( (Float)(0) );
HXDLIN(  53)			 ::flixel::math::FlxRect rect = _this;
HXDLIN(  53)			rect->_inPool = false;
HXDLIN(  53)			return rect;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_53_boot)
HXDLIN(  53)		_staticFlxRect = ( ( ::flixel::math::FlxRect)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxRect _hx_run(){
            			HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_54_boot)
HXDLIN(  54)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(  54)			_this->x = ( (Float)(0) );
HXDLIN(  54)			_this->y = ( (Float)(0) );
HXDLIN(  54)			_this->width = ( (Float)(0) );
HXDLIN(  54)			_this->height = ( (Float)(0) );
HXDLIN(  54)			 ::flixel::math::FlxRect rect = _this;
HXDLIN(  54)			rect->_inPool = false;
HXDLIN(  54)			return rect;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_54_boot)
HXDLIN(  54)		_staticFlxRect2 = ( ( ::flixel::math::FlxRect)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_57_boot)
HXDLIN(  57)		TILE_NONE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_58_boot)
HXDLIN(  58)		TILE_BOTH = 17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_59_boot)
HXDLIN(  59)		TILE_H = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_60_boot)
HXDLIN(  60)		TILE_V = 1;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
