// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_ButtonLabelStyle
#include <flixel/addons/ui/ButtonLabelStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_CheckStyle
#include <flixel/addons/ui/CheckStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIBar
#include <flixel/addons/ui/FlxUIBar.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUILine
#include <flixel/addons/ui/FlxUILine.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRadioGroup
#include <flixel/addons/ui/FlxUIRadioGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRegion
#include <flixel/addons/ui/FlxUIRegion.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISpriteButton
#include <flixel/addons/ui/FlxUISpriteButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITileTest
#include <flixel/addons/ui/FlxUITileTest.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltipManager
#include <flixel/addons/ui/FlxUITooltipManager.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_LineAxis
#include <flixel/addons/ui/LineAxis.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Rounding
#include <flixel/addons/ui/Rounding.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_AttribAccess_Impl_
#include <haxe/xml/_Access/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasAttribAccess_Impl_
#include <haxe/xml/_Access/HasAttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasNodeAccess_Impl_
#include <haxe/xml/_Access/HasNodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeAccess_Impl_
#include <haxe/xml/_Access/NodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeListAccess_Impl_
#include <haxe/xml/_Access/NodeListAccess_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_61_new,"flixel.addons.ui.FlxUI","new",0x89fff7c7,"flixel.addons.ui.FlxUI.new","flixel/addons/ui/FlxUI.hx",61,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_75_get_isRoot,"flixel.addons.ui.FlxUI","get_isRoot",0x501fc66e,"flixel.addons.ui.FlxUI.get_isRoot","flixel/addons/ui/FlxUI.hx",75,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_85_get_tongue,"flixel.addons.ui.FlxUI","get_tongue",0x7aee5906,"flixel.addons.ui.FlxUI.get_tongue","flixel/addons/ui/FlxUI.hx",85,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_87_set_tongue,"flixel.addons.ui.FlxUI","set_tongue",0x7e6bf77a,"flixel.addons.ui.FlxUI.set_tongue","flixel/addons/ui/FlxUI.hx",87,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_94_set_focus,"flixel.addons.ui.FlxUI","set_focus",0xbe69d6e2,"flixel.addons.ui.FlxUI.set_focus","flixel/addons/ui/FlxUI.hx",94,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_125__tongueSet,"flixel.addons.ui.FlxUI","_tongueSet",0x62471f78,"flixel.addons.ui.FlxUI._tongueSet","flixel/addons/ui/FlxUI.hx",125,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_265_callEvent,"flixel.addons.ui.FlxUI","callEvent",0x94ea5143,"flixel.addons.ui.FlxUI.callEvent","flixel/addons/ui/FlxUI.hx",265,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_269_getEvent,"flixel.addons.ui.FlxUI","getEvent",0xd6447add,"flixel.addons.ui.FlxUI.getEvent","flixel/addons/ui/FlxUI.hx",269,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_288_getRequest,"flixel.addons.ui.FlxUI","getRequest",0x8a6908d2,"flixel.addons.ui.FlxUI.getRequest","flixel/addons/ui/FlxUI.hx",288,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_338_onFocus,"flixel.addons.ui.FlxUI","onFocus",0x59586520,"flixel.addons.ui.FlxUI.onFocus","flixel/addons/ui/FlxUI.hx",338,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_347_setWidgetSuppression,"flixel.addons.ui.FlxUI","setWidgetSuppression",0x343faf06,"flixel.addons.ui.FlxUI.setWidgetSuppression","flixel/addons/ui/FlxUI.hx",347,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_373_onFocusLost,"flixel.addons.ui.FlxUI","onFocusLost",0xfd524b24,"flixel.addons.ui.FlxUI.onFocusLost","flixel/addons/ui/FlxUI.hx",373,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_389_setSuperIndex,"flixel.addons.ui.FlxUI","setSuperIndex",0x53bc1800,"flixel.addons.ui.FlxUI.setSuperIndex","flixel/addons/ui/FlxUI.hx",389,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_392_update,"flixel.addons.ui.FlxUI","update",0x5c40b902,"flixel.addons.ui.FlxUI.update","flixel/addons/ui/FlxUI.hx",392,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_405_toggleShow,"flixel.addons.ui.FlxUI","toggleShow",0xda8bbe2a,"flixel.addons.ui.FlxUI.toggleShow","flixel/addons/ui/FlxUI.hx",405,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_425_showGroup,"flixel.addons.ui.FlxUI","showGroup",0x5b3f47a9,"flixel.addons.ui.FlxUI.showGroup","flixel/addons/ui/FlxUI.hx",425,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_442_showAsset,"flixel.addons.ui.FlxUI","showAsset",0xe783fe5a,"flixel.addons.ui.FlxUI.showAsset","flixel/addons/ui/FlxUI.hx",442,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_464_removeAsset,"flixel.addons.ui.FlxUI","removeAsset",0xe039ad73,"flixel.addons.ui.FlxUI.removeAsset","flixel/addons/ui/FlxUI.hx",464,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_485_addAsset,"flixel.addons.ui.FlxUI","addAsset",0xa03f3348,"flixel.addons.ui.FlxUI.addAsset","flixel/addons/ui/FlxUI.hx",485,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_522_replaceAsset,"flixel.addons.ui.FlxUI","replaceAsset",0xb0d588d5,"flixel.addons.ui.FlxUI.replaceAsset","flixel/addons/ui/FlxUI.hx",522,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_563_destroy,"flixel.addons.ui.FlxUI","destroy",0xe31793e1,"flixel.addons.ui.FlxUI.destroy","flixel/addons/ui/FlxUI.hx",563,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_621_load,"flixel.addons.ui.FlxUI","load",0x34adecdf,"flixel.addons.ui.FlxUI.load","flixel/addons/ui/FlxUI.hx",621,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_904_unparentXML,"flixel.addons.ui.FlxUI","unparentXML",0xc0cc07bb,"flixel.addons.ui.FlxUI.unparentXML","flixel/addons/ui/FlxUI.hx",904,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_908__loadPointSize,"flixel.addons.ui.FlxUI","_loadPointSize",0x3df8fe65,"flixel.addons.ui.FlxUI._loadPointSize","flixel/addons/ui/FlxUI.hx",908,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_932__loadSub,"flixel.addons.ui.FlxUI","_loadSub",0x43431fb4,"flixel.addons.ui.FlxUI._loadSub","flixel/addons/ui/FlxUI.hx",932,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_999__addTags,"flixel.addons.ui.FlxUI","_addTags",0xc394f454,"flixel.addons.ui.FlxUI._addTags","flixel/addons/ui/FlxUI.hx",999,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1016__loadGlobals,"flixel.addons.ui.FlxUI","_loadGlobals",0xe1eda5e4,"flixel.addons.ui.FlxUI._loadGlobals","flixel/addons/ui/FlxUI.hx",1016,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1035__postLoad,"flixel.addons.ui.FlxUI","_postLoad",0xe07320ac,"flixel.addons.ui.FlxUI._postLoad","flixel/addons/ui/FlxUI.hx",1035,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1071__sendTo,"flixel.addons.ui.FlxUI","_sendTo",0x988d3169,"flixel.addons.ui.FlxUI._sendTo","flixel/addons/ui/FlxUI.hx",1071,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1105_sendToFront,"flixel.addons.ui.FlxUI","sendToFront",0x18eb1f2d,"flixel.addons.ui.FlxUI.sendToFront","flixel/addons/ui/FlxUI.hx",1105,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1117_sendToBack,"flixel.addons.ui.FlxUI","sendToBack",0x0ea31023,"flixel.addons.ui.FlxUI.sendToBack","flixel/addons/ui/FlxUI.hx",1117,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1123_get_currMode,"flixel.addons.ui.FlxUI","get_currMode",0xd78f9337,"flixel.addons.ui.FlxUI.get_currMode","flixel/addons/ui/FlxUI.hx",1123,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1124_set_currMode,"flixel.addons.ui.FlxUI","set_currMode",0xec88b6ab,"flixel.addons.ui.FlxUI.set_currMode","flixel/addons/ui/FlxUI.hx",1124,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1133_setMode,"flixel.addons.ui.FlxUI","setMode",0xcc767b0c,"flixel.addons.ui.FlxUI.setMode","flixel/addons/ui/FlxUI.hx",1133,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1192_showThing,"flixel.addons.ui.FlxUI","showThing",0xd0d41c58,"flixel.addons.ui.FlxUI.showThing","flixel/addons/ui/FlxUI.hx",1192,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1262_getGroup,"flixel.addons.ui.FlxUI","getGroup",0xfa746602,"flixel.addons.ui.FlxUI.getGroup","flixel/addons/ui/FlxUI.hx",1262,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1272_getFlxText,"flixel.addons.ui.FlxUI","getFlxText",0x55e507c2,"flixel.addons.ui.FlxUI.getFlxText","flixel/addons/ui/FlxUI.hx",1272,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1285_getAllAssets,"flixel.addons.ui.FlxUI","getAllAssets",0xc0ca94c7,"flixel.addons.ui.FlxUI.getAllAssets","flixel/addons/ui/FlxUI.hx",1285,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1295_getAssetKeys,"flixel.addons.ui.FlxUI","getAssetKeys",0x52110047,"flixel.addons.ui.FlxUI.getAssetKeys","flixel/addons/ui/FlxUI.hx",1295,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1304_hasAsset,"flixel.addons.ui.FlxUI","hasAsset",0xb33a576f,"flixel.addons.ui.FlxUI.hasAsset","flixel/addons/ui/FlxUI.hx",1304,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1317_getAsset,"flixel.addons.ui.FlxUI","getAsset",0x86b91cb3,"flixel.addons.ui.FlxUI.getAsset","flixel/addons/ui/FlxUI.hx",1317,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1327_getAssetsWithTag,"flixel.addons.ui.FlxUI","getAssetsWithTag",0x2c689774,"flixel.addons.ui.FlxUI.getAssetsWithTag","flixel/addons/ui/FlxUI.hx",1327,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1354_getAssetGroup,"flixel.addons.ui.FlxUI","getAssetGroup",0x37c51d8c,"flixel.addons.ui.FlxUI.getAssetGroup","flixel/addons/ui/FlxUI.hx",1354,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1372_getMode,"flixel.addons.ui.FlxUI","getMode",0xd974ea00,"flixel.addons.ui.FlxUI.getMode","flixel/addons/ui/FlxUI.hx",1372,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1382_getLabelStyleFromDefinition,"flixel.addons.ui.FlxUI","getLabelStyleFromDefinition",0xade61a37,"flixel.addons.ui.FlxUI.getLabelStyleFromDefinition","flixel/addons/ui/FlxUI.hx",1382,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1396_getLabelStyleFromData,"flixel.addons.ui.FlxUI","getLabelStyleFromData",0x7750c7ce,"flixel.addons.ui.FlxUI.getLabelStyleFromData","flixel/addons/ui/FlxUI.hx",1396,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1405_checkVariable,"flixel.addons.ui.FlxUI","checkVariable",0xe5e77d4b,"flixel.addons.ui.FlxUI.checkVariable","flixel/addons/ui/FlxUI.hx",1405,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1419_setVariable,"flixel.addons.ui.FlxUI","setVariable",0x553a4265,"flixel.addons.ui.FlxUI.setVariable","flixel/addons/ui/FlxUI.hx",1419,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1423_getVariable,"flixel.addons.ui.FlxUI","getVariable",0x4acd3b59,"flixel.addons.ui.FlxUI.getVariable","flixel/addons/ui/FlxUI.hx",1423,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1433_getDefinition,"flixel.addons.ui.FlxUI","getDefinition",0xdd003ff0,"flixel.addons.ui.FlxUI.getDefinition","flixel/addons/ui/FlxUI.hx",1433,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1479_screenWidth,"flixel.addons.ui.FlxUI","screenWidth",0x3db46961,"flixel.addons.ui.FlxUI.screenWidth","flixel/addons/ui/FlxUI.hx",1479,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1488_screenHeight,"flixel.addons.ui.FlxUI","screenHeight",0x7677442c,"flixel.addons.ui.FlxUI.screenHeight","flixel/addons/ui/FlxUI.hx",1488,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1530_replaceInGroup,"flixel.addons.ui.FlxUI","replaceInGroup",0xb7beeb3f,"flixel.addons.ui.FlxUI.replaceInGroup","flixel/addons/ui/FlxUI.hx",1530,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1580_applyNodeConditionals,"flixel.addons.ui.FlxUI","applyNodeConditionals",0x57bfbe44,"flixel.addons.ui.FlxUI.applyNodeConditionals","flixel/addons/ui/FlxUI.hx",1580,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1605_applyNodeChanges,"flixel.addons.ui.FlxUI","applyNodeChanges",0x1f7e448c,"flixel.addons.ui.FlxUI.applyNodeChanges","flixel/addons/ui/FlxUI.hx",1605,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1663_loadThing,"flixel.addons.ui.FlxUI","loadThing",0xbda7028f,"flixel.addons.ui.FlxUI.loadThing","flixel/addons/ui/FlxUI.hx",1663,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1667__loadThingGetInfo,"flixel.addons.ui.FlxUI","_loadThingGetInfo",0x7a50a522,"flixel.addons.ui.FlxUI._loadThingGetInfo","flixel/addons/ui/FlxUI.hx",1667,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1705__loadTooltip,"flixel.addons.ui.FlxUI","_loadTooltip",0x38414d37,"flixel.addons.ui.FlxUI._loadTooltip","flixel/addons/ui/FlxUI.hx",1705,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1721__loadTooltipData,"flixel.addons.ui.FlxUI","_loadTooltipData",0x9fb23701,"flixel.addons.ui.FlxUI._loadTooltipData","flixel/addons/ui/FlxUI.hx",1721,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1789__loadTooltipStyle,"flixel.addons.ui.FlxUI","_loadTooltipStyle",0xcbd3807a,"flixel.addons.ui.FlxUI._loadTooltipStyle","flixel/addons/ui/FlxUI.hx",1789,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1814__loadTooltipText,"flixel.addons.ui.FlxUI","_loadTooltipText",0xaa48ad84,"flixel.addons.ui.FlxUI._loadTooltipText","flixel/addons/ui/FlxUI.hx",1814,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1863__loadAnchor,"flixel.addons.ui.FlxUI","_loadAnchor",0xa3f29cc1,"flixel.addons.ui.FlxUI._loadAnchor","flixel/addons/ui/FlxUI.hx",1863,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1877__loadThing,"flixel.addons.ui.FlxUI","_loadThing",0x7ce5f322,"flixel.addons.ui.FlxUI._loadThing","flixel/addons/ui/FlxUI.hx",1877,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1937__loadX,"flixel.addons.ui.FlxUI","_loadX",0x4a11c1ac,"flixel.addons.ui.FlxUI._loadX","flixel/addons/ui/FlxUI.hx",1937,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1942__loadY,"flixel.addons.ui.FlxUI","_loadY",0x4a11c1ad,"flixel.addons.ui.FlxUI._loadY","flixel/addons/ui/FlxUI.hx",1942,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1947__loadScale,"flixel.addons.ui.FlxUI","_loadScale",0xe62b39be,"flixel.addons.ui.FlxUI._loadScale","flixel/addons/ui/FlxUI.hx",1947,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1952__loadScaleX,"flixel.addons.ui.FlxUI","_loadScaleX",0x7fa74cda,"flixel.addons.ui.FlxUI._loadScaleX","flixel/addons/ui/FlxUI.hx",1952,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1957__loadScaleY,"flixel.addons.ui.FlxUI","_loadScaleY",0x7fa74cdb,"flixel.addons.ui.FlxUI._loadScaleY","flixel/addons/ui/FlxUI.hx",1957,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1961__loadWidth,"flixel.addons.ui.FlxUI","_loadWidth",0x37bf213a,"flixel.addons.ui.FlxUI._loadWidth","flixel/addons/ui/FlxUI.hx",1961,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1968__loadHeight,"flixel.addons.ui.FlxUI","_loadHeight",0x45cd6a33,"flixel.addons.ui.FlxUI._loadHeight","flixel/addons/ui/FlxUI.hx",1968,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1975__loadCompass,"flixel.addons.ui.FlxUI","_loadCompass",0x511db9c6,"flixel.addons.ui.FlxUI._loadCompass","flixel/addons/ui/FlxUI.hx",1975,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1993__changeParamsThing,"flixel.addons.ui.FlxUI","_changeParamsThing",0x3feee472,"flixel.addons.ui.FlxUI._changeParamsThing","flixel/addons/ui/FlxUI.hx",1993,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2009__changeThing,"flixel.addons.ui.FlxUI","_changeThing",0x32661218,"flixel.addons.ui.FlxUI._changeThing","flixel/addons/ui/FlxUI.hx",2009,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2073__alignThing,"flixel.addons.ui.FlxUI","_alignThing",0x37322a6f,"flixel.addons.ui.FlxUI._alignThing","flixel/addons/ui/FlxUI.hx",2073,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2161__doAlign,"flixel.addons.ui.FlxUI","_doAlign",0x8f1f33f4,"flixel.addons.ui.FlxUI._doAlign","flixel/addons/ui/FlxUI.hx",2161,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2275__checkFailure,"flixel.addons.ui.FlxUI","_checkFailure",0x7b6fc968,"flixel.addons.ui.FlxUI._checkFailure","flixel/addons/ui/FlxUI.hx",2275,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2339__resizeThing,"flixel.addons.ui.FlxUI","_resizeThing",0x4ba3eb14,"flixel.addons.ui.FlxUI._resizeThing","flixel/addons/ui/FlxUI.hx",2339,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2366__postLoadThing,"flixel.addons.ui.FlxUI","_postLoadThing",0x7251e7a2,"flixel.addons.ui.FlxUI._postLoadThing","flixel/addons/ui/FlxUI.hx",2366,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2483__loadTileTest,"flixel.addons.ui.FlxUI","_loadTileTest",0xb7577bec,"flixel.addons.ui.FlxUI._loadTileTest","flixel/addons/ui/FlxUI.hx",2483,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2525__loadString,"flixel.addons.ui.FlxUI","_loadString",0x54b18b1d,"flixel.addons.ui.FlxUI._loadString","flixel/addons/ui/FlxUI.hx",2525,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2534__loadText,"flixel.addons.ui.FlxUI","_loadText",0x9815c3f9,"flixel.addons.ui.FlxUI._loadText","flixel/addons/ui/FlxUI.hx",2534,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2588__loadInputText,"flixel.addons.ui.FlxUI","_loadInputText",0x30689f0b,"flixel.addons.ui.FlxUI._loadInputText","flixel/addons/ui/FlxUI.hx",2588,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2743__loadRadioGroup,"flixel.addons.ui.FlxUI","_loadRadioGroup",0x22b21c90,"flixel.addons.ui.FlxUI._loadRadioGroup","flixel/addons/ui/FlxUI.hx",2743,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2910__loadCheckBox,"flixel.addons.ui.FlxUI","_loadCheckBox",0xdd35176f,"flixel.addons.ui.FlxUI._loadCheckBox","flixel/addons/ui/FlxUI.hx",2910,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2995__loadDropDownMenu,"flixel.addons.ui.FlxUI","_loadDropDownMenu",0xfcc3a1bc,"flixel.addons.ui.FlxUI._loadDropDownMenu","flixel/addons/ui/FlxUI.hx",2995,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3107__loadTest,"flixel.addons.ui.FlxUI","_loadTest",0x9815bf9e,"flixel.addons.ui.FlxUI._loadTest","flixel/addons/ui/FlxUI.hx",3107,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3156__loadTestSub,"flixel.addons.ui.FlxUI","_loadTestSub",0x8b7ab882,"flixel.addons.ui.FlxUI._loadTestSub","flixel/addons/ui/FlxUI.hx",3156,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3246_parseVarValue,"flixel.addons.ui.FlxUI","parseVarValue",0x5226f084,"flixel.addons.ui.FlxUI.parseVarValue","flixel/addons/ui/FlxUI.hx",3246,0xf354486a)
static const ::String _hx_array_data_e9110855_177[] = {
	HX_("==",60,35,00,00),HX_("=",3d,00,00,00),HX_("!=",fc,1c,00,00),HX_("!==",c1,3f,19,00),HX_("<",3c,00,00,00),HX_(">",3e,00,00,00),HX_("<=",81,34,00,00),HX_(">=",3f,36,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3264__loadLayout,"flixel.addons.ui.FlxUI","_loadLayout",0x9c3a10f6,"flixel.addons.ui.FlxUI._loadLayout","flixel/addons/ui/FlxUI.hx",3264,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3276_addToCleanup,"flixel.addons.ui.FlxUI","addToCleanup",0x71379941,"flixel.addons.ui.FlxUI.addToCleanup","flixel/addons/ui/FlxUI.hx",3276,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3286_addToScaledAssets,"flixel.addons.ui.FlxUI","addToScaledAssets",0xf5176080,"flixel.addons.ui.FlxUI.addToScaledAssets","flixel/addons/ui/FlxUI.hx",3286,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3293_cleanup,"flixel.addons.ui.FlxUI","cleanup",0x69d3730b,"flixel.addons.ui.FlxUI.cleanup","flixel/addons/ui/FlxUI.hx",3293,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3304_createUI,"flixel.addons.ui.FlxUI","createUI",0x2c9d0b89,"flixel.addons.ui.FlxUI.createUI","flixel/addons/ui/FlxUI.hx",3304,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3307__loadTabMenu,"flixel.addons.ui.FlxUI","_loadTabMenu",0x0e83bac8,"flixel.addons.ui.FlxUI._loadTabMenu","flixel/addons/ui/FlxUI.hx",3307,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3432__loadNumericStepper,"flixel.addons.ui.FlxUI","_loadNumericStepper",0x27747c10,"flixel.addons.ui.FlxUI._loadNumericStepper","flixel/addons/ui/FlxUI.hx",3432,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3491_getResizeRatio,"flixel.addons.ui.FlxUI","getResizeRatio",0x06525d7a,"flixel.addons.ui.FlxUI.getResizeRatio","flixel/addons/ui/FlxUI.hx",3491,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3520__loadButton,"flixel.addons.ui.FlxUI","_loadButton",0x1d61c43e,"flixel.addons.ui.FlxUI._loadButton","flixel/addons/ui/FlxUI.hx",3520,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3879__loadRegion,"flixel.addons.ui.FlxUI","_loadRegion",0x440e2340,"flixel.addons.ui.FlxUI._loadRegion","flixel/addons/ui/FlxUI.hx",3879,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3899__load9SliceSprite,"flixel.addons.ui.FlxUI","_load9SliceSprite",0xb0d2f56a,"flixel.addons.ui.FlxUI._load9SliceSprite","flixel/addons/ui/FlxUI.hx",3899,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3980_load9SliceSprite_scaleSub,"flixel.addons.ui.FlxUI","load9SliceSprite_scaleSub",0x6f4e4338,"flixel.addons.ui.FlxUI.load9SliceSprite_scaleSub","flixel/addons/ui/FlxUI.hx",3980,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4017__loadTileRule,"flixel.addons.ui.FlxUI","_loadTileRule",0xb6112c96,"flixel.addons.ui.FlxUI._loadTileRule","flixel/addons/ui/FlxUI.hx",4017,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4029__loadBox,"flixel.addons.ui.FlxUI","_loadBox",0x4336343f,"flixel.addons.ui.FlxUI._loadBox","flixel/addons/ui/FlxUI.hx",4029,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4076__loadLine,"flixel.addons.ui.FlxUI","_loadLine",0x92cf0f40,"flixel.addons.ui.FlxUI._loadLine","flixel/addons/ui/FlxUI.hx",4076,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4117__loadBar,"flixel.addons.ui.FlxUI","_loadBar",0x43362807,"flixel.addons.ui.FlxUI._loadBar","flixel/addons/ui/FlxUI.hx",4117,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4219__loadSprite,"flixel.addons.ui.FlxUI","_loadSprite",0x07173e51,"flixel.addons.ui.FlxUI._loadSprite","flixel/addons/ui/FlxUI.hx",4219,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4298_loadSmooth,"flixel.addons.ui.FlxUI","loadSmooth",0xb318da6d,"flixel.addons.ui.FlxUI.loadSmooth","flixel/addons/ui/FlxUI.hx",4298,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4315_loadScaledSrc,"flixel.addons.ui.FlxUI","loadScaledSrc",0x51d86f8b,"flixel.addons.ui.FlxUI.loadScaledSrc","flixel/addons/ui/FlxUI.hx",4315,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4416_thisWidth,"flixel.addons.ui.FlxUI","thisWidth",0xcbb0796f,"flixel.addons.ui.FlxUI.thisWidth","flixel/addons/ui/FlxUI.hx",4416,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4424_thisHeight,"flixel.addons.ui.FlxUI","thisHeight",0x2509405e,"flixel.addons.ui.FlxUI.thisHeight","flixel/addons/ui/FlxUI.hx",4424,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4431__getAnchorPos,"flixel.addons.ui.FlxUI","_getAnchorPos",0xe6674faf,"flixel.addons.ui.FlxUI._getAnchorPos","flixel/addons/ui/FlxUI.hx",4431,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4466_getRound,"flixel.addons.ui.FlxUI","getRound",0x4de5ab11,"flixel.addons.ui.FlxUI.getRound","flixel/addons/ui/FlxUI.hx",4466,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4482_doRound,"flixel.addons.ui.FlxUI","doRound",0xdf243faa,"flixel.addons.ui.FlxUI.doRound","flixel/addons/ui/FlxUI.hx",4482,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4493_calcMaxMinSize,"flixel.addons.ui.FlxUI","calcMaxMinSize",0x437b661d,"flixel.addons.ui.FlxUI.calcMaxMinSize","flixel/addons/ui/FlxUI.hx",4493,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4582__getDataSize,"flixel.addons.ui.FlxUI","_getDataSize",0xaed2247b,"flixel.addons.ui.FlxUI._getDataSize","flixel/addons/ui/FlxUI.hx",4582,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4660__getOperation,"flixel.addons.ui.FlxUI","_getOperation",0x2685c1b7,"flixel.addons.ui.FlxUI._getOperation","flixel/addons/ui/FlxUI.hx",4660,0xf354486a)
static const ::String _hx_array_data_e9110855_239[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),HX_("^",5e,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4727__doOperation,"flixel.addons.ui.FlxUI","_doOperation",0xf65624d6,"flixel.addons.ui.FlxUI._doOperation","flixel/addons/ui/FlxUI.hx",4727,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4740__getStretch,"flixel.addons.ui.FlxUI","_getStretch",0xd40af795,"flixel.addons.ui.FlxUI._getStretch","flixel/addons/ui/FlxUI.hx",4740,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4779_getAssetProperty,"flixel.addons.ui.FlxUI","getAssetProperty",0xd3eb8c28,"flixel.addons.ui.FlxUI.getAssetProperty","flixel/addons/ui/FlxUI.hx",4779,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4879__loadCursor,"flixel.addons.ui.FlxUI","_loadCursor",0x8269f122,"flixel.addons.ui.FlxUI._loadCursor","flixel/addons/ui/FlxUI.hx",4879,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4907__loadPosition,"flixel.addons.ui.FlxUI","_loadPosition",0xfb522df5,"flixel.addons.ui.FlxUI._loadPosition","flixel/addons/ui/FlxUI.hx",4907,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5011__loadBorder,"flixel.addons.ui.FlxUI","_loadBorder",0xa79baf38,"flixel.addons.ui.FlxUI._loadBorder","flixel/addons/ui/FlxUI.hx",5011,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5023__loadColor,"flixel.addons.ui.FlxUI","_loadColor",0xb7b8dc97,"flixel.addons.ui.FlxUI._loadColor","flixel/addons/ui/FlxUI.hx",5023,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5033__loadFontDef,"flixel.addons.ui.FlxUI","_loadFontDef",0x63d37f6a,"flixel.addons.ui.FlxUI._loadFontDef","flixel/addons/ui/FlxUI.hx",5033,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5041__loadFontFace,"flixel.addons.ui.FlxUI","_loadFontFace",0xf68b5f58,"flixel.addons.ui.FlxUI._loadFontFace","flixel/addons/ui/FlxUI.hx",5041,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5051__onFinishLoad,"flixel.addons.ui.FlxUI","_onFinishLoad",0x23246f1e,"flixel.addons.ui.FlxUI._onFinishLoad","flixel/addons/ui/FlxUI.hx",5051,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5059_getText,"flixel.addons.ui.FlxUI","getText",0xde0de34a,"flixel.addons.ui.FlxUI.getText","flixel/addons/ui/FlxUI.hx",5059,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5072_formatFromCode,"flixel.addons.ui.FlxUI","formatFromCode",0x3be1ae07,"flixel.addons.ui.FlxUI.formatFromCode","flixel/addons/ui/FlxUI.hx",5072,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5139_formatButtonText,"flixel.addons.ui.FlxUI","formatButtonText",0xeca59e0f,"flixel.addons.ui.FlxUI.formatButtonText","flixel/addons/ui/FlxUI.hx",5139,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_146_event,"flixel.addons.ui.FlxUI","event",0xe056d741,"flixel.addons.ui.FlxUI.event","flixel/addons/ui/FlxUI.hx",146,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_164_fontStr,"flixel.addons.ui.FlxUI","fontStr",0x54bbb509,"flixel.addons.ui.FlxUI.fontStr","flixel/addons/ui/FlxUI.hx",164,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_178_fontSize,"flixel.addons.ui.FlxUI","fontSize",0xcf7a6169,"flixel.addons.ui.FlxUI.fontSize","flixel/addons/ui/FlxUI.hx",178,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_193_font,"flixel.addons.ui.FlxUI","font",0x30b6b088,"flixel.addons.ui.FlxUI.font","flixel/addons/ui/FlxUI.hx",193,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_201___getTongue,"flixel.addons.ui.FlxUI","__getTongue",0xfa337e41,"flixel.addons.ui.FlxUI.__getTongue","flixel/addons/ui/FlxUI.hx",201,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_217_forceFocus,"flixel.addons.ui.FlxUI","forceFocus",0x91e0ed66,"flixel.addons.ui.FlxUI.forceFocus","flixel/addons/ui/FlxUI.hx",217,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_229_getLeafUIState,"flixel.addons.ui.FlxUI","getLeafUIState",0xebda1e42,"flixel.addons.ui.FlxUI.getLeafUIState","flixel/addons/ui/FlxUI.hx",229,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_254_request,"flixel.addons.ui.FlxUI","request",0x03164636,"flixel.addons.ui.FlxUI.request","flixel/addons/ui/FlxUI.hx",254,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1460__delta,"flixel.addons.ui.FlxUI","_delta",0xa8496232,"flixel.addons.ui.FlxUI._delta","flixel/addons/ui/FlxUI.hx",1460,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1472__center,"flixel.addons.ui.FlxUI","_center",0x32e39e5b,"flixel.addons.ui.FlxUI._center","flixel/addons/ui/FlxUI.hx",1472,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2675_consolidateData,"flixel.addons.ui.FlxUI","consolidateData",0x9bb7ebba,"flixel.addons.ui.FlxUI.consolidateData","flixel/addons/ui/FlxUI.hx",2675,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3870__loadBitmapRect,"flixel.addons.ui.FlxUI","_loadBitmapRect",0xdc5324ff,"flixel.addons.ui.FlxUI._loadBitmapRect","flixel/addons/ui/FlxUI.hx",3870,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5088_getParams,"flixel.addons.ui.FlxUI","getParams",0xfcb7b323,"flixel.addons.ui.FlxUI.getParams","flixel/addons/ui/FlxUI.hx",5088,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5132_sortParams,"flixel.addons.ui.FlxUI","sortParams",0x40e314bd,"flixel.addons.ui.FlxUI.sortParams","flixel/addons/ui/FlxUI.hx",5132,0xf354486a)
namespace flixel{
namespace addons{
namespace ui{

void FlxUI_obj::__construct( ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_){
            		::String liveFilePath_ = __o_liveFilePath_;
            		if (::hx::IsNull(__o_liveFilePath_)) liveFilePath_ = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_61_new)
HXLINE(1521)		this->_scaledAssets = ::Array_obj< ::String >::__new(0);
HXLINE(1520)		this->_assetsToCleanUp = ::Array_obj< ::String >::__new(0);
HXLINE(1516)		this->_safe_input_delay_elapsed = ((Float)0.0);
HXLINE(1511)		this->_curr_mode = HX_("",00,00,00,00);
HXLINE(1502)		this->_pointY = ((Float)1);
HXLINE(1501)		this->_pointX = ((Float)1);
HXLINE(1499)		this->_postLoaded = false;
HXLINE( 115)		this->cursorLists = null();
HXLINE( 106)		this->getTextFallback = null();
HXLINE(  69)		this->failed_by = ((Float)0);
HXLINE(  68)		this->failed = false;
HXLINE(  66)		this->safe_input_delay_time = ((Float)0.01);
HXLINE(  65)		this->do_safe_input_delay = true;
HXLINE( 308)		super::__construct(null(),null());
HXLINE( 309)		this->_ptr_tongue = tongue_;
HXLINE( 317)		this->_ptr = ptr;
HXLINE( 318)		if (::hx::IsNotNull( superIndex_ )) {
HXLINE( 319)			this->setSuperIndex(superIndex_);
            		}
HXLINE( 323)		if (::hx::IsNotNull( uiVars_ )) {
HXLINE( 325)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 326)			{
HXLINE( 326)				 ::Dynamic key = uiVars_->keys();
HXDLIN( 326)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 326)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 328)					{
HXLINE( 328)						::Dynamic this1 = this->_variable_index;
HXDLIN( 328)						( ( ::haxe::ds::StringMap)(this1) )->set(key1,uiVars_->get_string(key1));
            					}
            				}
            			}
            		}
HXLINE( 332)		if (::hx::IsNotNull( data )) {
HXLINE( 333)			this->load(data);
            		}
            	}

Dynamic FlxUI_obj::__CreateEmpty() { return new FlxUI_obj; }

void *FlxUI_obj::_hx_vtable = 0;

Dynamic FlxUI_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxUI_obj > _hx_result = new FlxUI_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxUI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x398eb8dc) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x398eb8dc;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x39f54363 || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getEvent,
	(  ::Dynamic (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getRequest,
};

void *FlxUI_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter;
	}
	return super::_hx_getInterface(inHash);
}

bool FlxUI_obj::get_isRoot(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_75_get_isRoot)
HXDLIN(  75)		if (::hx::IsNotNull( this->_ptr )) {
HXDLIN(  75)			::Dynamic _hx_tmp = this->_ptr;
HXDLIN(  75)			return ::hx::IsInstanceEq( _hx_tmp,::flixel::addons::ui::FlxUI_obj::getLeafUIState() );
            		}
            		else {
HXDLIN(  75)			return false;
            		}
HXDLIN(  75)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_isRoot,return )

::Dynamic FlxUI_obj::get_tongue(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_85_get_tongue)
HXDLIN(  85)		return this->_ptr_tongue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_tongue,return )

::Dynamic FlxUI_obj::set_tongue(::Dynamic t){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_87_set_tongue)
HXLINE(  88)		this->_ptr_tongue = t;
HXLINE(  89)		this->_tongueSet(this->group->members,t);
HXLINE(  90)		return this->_ptr_tongue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_tongue,return )

::Dynamic FlxUI_obj::set_focus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_94_set_focus)
HXLINE(  95)		if (::hx::IsNotNull( this->focus )) {
HXLINE(  96)			this->onFocusLost(this->focus);
            		}
HXLINE(  98)		this->focus = widget;
HXLINE(  99)		if (::hx::IsNotNull( this->focus )) {
HXLINE( 100)			this->onFocus(this->focus);
            		}
HXLINE( 102)		return widget;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_focus,return )

void FlxUI_obj::_tongueSet(::Array< ::Dynamic> list,::Dynamic tongue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_125__tongueSet)
HXDLIN( 125)		int _g = 0;
HXDLIN( 125)		while((_g < list->length)){
HXDLIN( 125)			 ::flixel::FlxSprite fs = list->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 125)			_g = (_g + 1);
HXLINE( 126)			if (::Std_obj::isOfType(fs,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >()) ))) {
HXLINE( 127)				 ::flixel::addons::ui::FlxUIGroup g = ::hx::TCast<  ::flixel::addons::ui::FlxUIGroup >::cast(fs);
HXLINE( 128)				this->_tongueSet(g->group->members,tongue);
            			}
            			else {
HXLINE( 129)				if (::Std_obj::isOfType(fs,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUI >()) ))) {
HXLINE( 130)					 ::flixel::addons::ui::FlxUI fu = ::hx::TCast<  ::flixel::addons::ui::FlxUI >::cast(fs);
HXLINE( 131)					fu->set_tongue(tongue);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_tongueSet,(void))

void FlxUI_obj::callEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_265_callEvent)
HXDLIN( 265)		this->getEvent(name,sender,data,params);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,callEvent,(void))

void FlxUI_obj::getEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_269_getEvent)
HXDLIN( 269)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE( 271)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,name,sender,data,params);
HXLINE( 272)			if ((name == HX_("post_load",a5,55,d0,20))) {
HXLINE( 275)				 ::Dynamic key = this->_asset_index->keys();
HXDLIN( 275)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 275)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 277)					::Dynamic thing = this->_asset_index->get(key1);
HXLINE( 278)					if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUI >()) ))) {
HXLINE( 280)						 ::flixel::addons::ui::FlxUI fui = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE( 281)						fui->getEvent(HX_("post_load",a5,55,d0,20),sender,data,null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getEvent,(void))

 ::Dynamic FlxUI_obj::getRequest(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_288_getRequest)
HXLINE( 289)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE( 290)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,name,sender,data,params);
            		}
HXLINE( 292)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getRequest,return )

void FlxUI_obj::onFocus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_338_onFocus)
HXDLIN( 338)		if (::Std_obj::isOfType(widget,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >()) ))) {
HXLINE( 340)			int _g = 0;
HXDLIN( 340)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 340)			while((_g < _g1->length)){
HXLINE( 340)				 ::flixel::FlxSprite asset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 340)				_g = (_g + 1);
HXLINE( 341)				this->setWidgetSuppression(asset,widget,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocus,(void))

void FlxUI_obj::setWidgetSuppression( ::flixel::FlxSprite asset,::Dynamic butNotThisOne,::hx::Null< bool >  __o_suppressed){
            		bool suppressed = __o_suppressed.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_347_setWidgetSuppression)
HXDLIN( 347)		if (::Std_obj::isOfType(asset,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIClickable >()) ))) {
HXLINE( 348)			bool skip = false;
HXLINE( 349)			if (::Std_obj::isOfType(asset,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >()) ))) {
HXLINE( 350)				 ::flixel::addons::ui::FlxUIDropDownMenu ddasset = ( ( ::flixel::addons::ui::FlxUIDropDownMenu)(asset) );
HXLINE( 351)				if (::hx::IsInstanceEq( ddasset,butNotThisOne )) {
HXLINE( 352)					skip = true;
            				}
            			}
HXLINE( 355)			if (!(skip)) {
HXLINE( 356)				::Dynamic ibtn = asset;
HXLINE( 357)				::flixel::addons::ui::interfaces::IFlxUIClickable_obj::set_skipButtonUpdate(ibtn,suppressed);
            			}
            		}
            		else {
HXLINE( 359)			if (::Std_obj::isOfType(asset,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >()) ))) {
HXLINE( 360)				 ::flixel::addons::ui::FlxUIGroup g = ( ( ::flixel::addons::ui::FlxUIGroup)(asset) );
HXLINE( 361)				{
HXLINE( 361)					int _g = 0;
HXDLIN( 361)					::Array< ::Dynamic> _g1 = g->group->members;
HXDLIN( 361)					while((_g < _g1->length)){
HXLINE( 361)						 ::flixel::FlxSprite groupAsset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 361)						_g = (_g + 1);
HXLINE( 362)						this->setWidgetSuppression(groupAsset,butNotThisOne,suppressed);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,setWidgetSuppression,(void))

void FlxUI_obj::onFocusLost(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_373_onFocusLost)
HXDLIN( 373)		if (::Std_obj::isOfType(widget,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >()) ))) {
HXLINE( 377)			int _g = 0;
HXDLIN( 377)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 377)			while((_g < _g1->length)){
HXLINE( 377)				 ::flixel::FlxSprite asset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 377)				_g = (_g + 1);
HXLINE( 378)				this->setWidgetSuppression(asset,null(),false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocusLost,(void))

void FlxUI_obj::setSuperIndex( ::flixel::addons::ui::FlxUI flxUI){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_389_setSuperIndex)
HXDLIN( 389)		this->_superIndexUI = flxUI;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,setSuperIndex,(void))

void FlxUI_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_392_update)
HXLINE( 393)		if (this->do_safe_input_delay) {
HXLINE( 394)			 ::flixel::addons::ui::FlxUI _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 394)			_hx_tmp->_safe_input_delay_elapsed = (_hx_tmp->_safe_input_delay_elapsed + ::flixel::FlxG_obj::elapsed);
HXLINE( 395)			if ((this->_safe_input_delay_elapsed > this->safe_input_delay_time)) {
HXLINE( 396)				this->do_safe_input_delay = false;
            			}
            			else {
HXLINE( 398)				return;
            			}
            		}
HXLINE( 401)		this->super::update(elapsed);
            	}


bool FlxUI_obj::toggleShow(::String key){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_405_toggleShow)
HXLINE( 406)		::Dynamic thing = this->getAsset(key,false);
HXLINE( 407)		if (::hx::IsNull( thing )) {
HXLINE( 409)			 ::flixel::addons::ui::FlxUIGroup group = this->getGroup(key,false);
HXLINE( 410)			if (::hx::IsNotNull( group )) {
HXLINE( 412)				group->set_visible(!(group->visible));
HXLINE( 413)				return group->visible;
            			}
            		}
            		else {
HXLINE( 418)			::flixel::IFlxBasic_obj::set_visible(thing,!(( (bool)(thing->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic)) )));
HXLINE( 419)			return ( (bool)(thing->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic)) );
            		}
HXLINE( 421)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,toggleShow,return )

void FlxUI_obj::showGroup(::String key,bool Show, ::Dynamic Active){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_425_showGroup)
HXLINE( 426)		 ::flixel::addons::ui::FlxUIGroup group = this->getGroup(key,false);
HXLINE( 427)		if (::hx::IsNotNull( group )) {
HXLINE( 429)			group->set_visible(Show);
HXLINE( 430)			if (::hx::IsNull( Active )) {
HXLINE( 432)				group->set_active(Show);
            			}
            			else {
HXLINE( 436)				group->set_active(( (bool)(Active) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showGroup,(void))

void FlxUI_obj::showAsset(::String key,bool Show, ::Dynamic Active){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_442_showAsset)
HXLINE( 443)		::Dynamic asset = this->getAsset(key,false);
HXLINE( 444)		if (::hx::IsNotNull( asset )) {
HXLINE( 445)			::flixel::IFlxBasic_obj::set_visible(asset,Show);
HXLINE( 446)			if (::hx::IsNull( Active )) {
HXLINE( 448)				::flixel::IFlxBasic_obj::set_active(asset,Show);
            			}
            			else {
HXLINE( 452)				::flixel::IFlxBasic_obj::set_active(asset,Active);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showAsset,(void))

::Dynamic FlxUI_obj::removeAsset(::String key,::hx::Null< bool >  __o_destroy){
            		bool destroy = __o_destroy.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_464_removeAsset)
HXLINE( 465)		::Dynamic asset = this->getAsset(key,false);
HXLINE( 466)		if (::hx::IsNotNull( asset )) {
HXLINE( 467)			this->replaceInGroup(( ( ::flixel::FlxSprite)(asset) ),null(),true);
HXLINE( 468)			this->_asset_index->remove(key);
            		}
HXLINE( 470)		bool _hx_tmp;
HXDLIN( 470)		if (destroy) {
HXLINE( 470)			_hx_tmp = ::hx::IsNotNull( asset );
            		}
            		else {
HXLINE( 470)			_hx_tmp = false;
            		}
HXDLIN( 470)		if (_hx_tmp) {
HXLINE( 471)			::flixel::IFlxBasic_obj::destroy(asset);
HXLINE( 472)			asset = null();
            		}
HXLINE( 474)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,removeAsset,return )

bool FlxUI_obj::addAsset(::Dynamic asset,::String key,::String __o_group_name,::hx::Null< bool >  __o_recursive){
            		::String group_name = __o_group_name;
            		if (::hx::IsNull(__o_group_name)) group_name = HX_("",00,00,00,00);
            		bool recursive = __o_recursive.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_485_addAsset)
HXLINE( 486)		if (this->_asset_index->exists(key)) {
HXLINE( 488)			if ((key == HX_("screen",6c,3b,5d,47))) {
HXLINE( 490)				::flixel::FlxG_obj::log->advanced(HX_("Failed to add a widget with the name 'screen', that is reserved by the system for the screen itself",a1,98,88,7b),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            			}
            			else {
HXLINE( 494)				::flixel::FlxG_obj::log->advanced(((HX_("Duplicate screen name '",d1,0b,e0,7e) + key) + HX_("'",27,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            			}
HXLINE( 496)			return false;
            		}
HXLINE( 499)		 ::flixel::addons::ui::FlxUIGroup g = this->getGroup(group_name,recursive);
HXLINE( 500)		if (::hx::IsNotNull( g )) {
HXLINE( 502)			g->add(( ( ::flixel::FlxSprite)(asset) )).StaticCast<  ::flixel::FlxSprite >();
            		}
            		else {
HXLINE( 506)			this->add(( ( ::flixel::FlxSprite)(asset) ));
            		}
HXLINE( 509)		this->_asset_index->set(key,asset);
HXLINE( 511)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,addAsset,return )

::Dynamic FlxUI_obj::replaceAsset(::String key,::Dynamic replace,::hx::Null< bool >  __o_center_x,::hx::Null< bool >  __o_center_y,::hx::Null< bool >  __o_destroy_old){
            		bool center_x = __o_center_x.Default(true);
            		bool center_y = __o_center_y.Default(true);
            		bool destroy_old = __o_destroy_old.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_522_replaceAsset)
HXLINE( 524)		::Dynamic original = this->getAsset(key,false);
HXLINE( 526)		if (::hx::IsNotNull( original )) {
HXLINE( 528)			if (!(center_x)) {
HXLINE( 529)				::flixel::IFlxSprite_obj::set_x(replace, ::Dynamic(original->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)));
            			}
            			else {
HXLINE( 531)				Float original1 = ( (Float)(original->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 531)				Float _hx_tmp = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(original);
HXDLIN( 531)				::flixel::IFlxSprite_obj::set_x(replace,(original1 + ((_hx_tmp - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(replace)) / ( (Float)(2) ))));
            			}
HXLINE( 533)			if (!(center_y)) {
HXLINE( 534)				::flixel::IFlxSprite_obj::set_y(replace, ::Dynamic(original->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)));
            			}
            			else {
HXLINE( 536)				Float original2 = ( (Float)(original->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 536)				Float _hx_tmp1 = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(original);
HXDLIN( 536)				::flixel::IFlxSprite_obj::set_y(replace,(original2 + ((_hx_tmp1 - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(replace)) / ( (Float)(2) ))));
            			}
HXLINE( 540)			this->replaceInGroup(( ( ::flixel::FlxSprite)(original) ),( ( ::flixel::FlxSprite)(replace) ),null());
HXLINE( 543)			this->_asset_index->remove(key);
HXLINE( 546)			this->_asset_index->set(key,replace);
HXLINE( 549)			if (destroy_old) {
HXLINE( 550)				::flixel::IFlxBasic_obj::destroy(original);
HXLINE( 551)				original = null();
            			}
            		}
HXLINE( 555)		return original;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,replaceAsset,return )

void FlxUI_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_563_destroy)
HXLINE( 564)		if (::hx::IsNotNull( this->_group_index )) {
HXLINE( 565)			{
HXLINE( 565)				 ::Dynamic key = this->_group_index->keys();
HXDLIN( 565)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 565)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 566)					this->_group_index->remove(key1);
            				}
            			}
HXLINE( 567)			this->_group_index = null();
            		}
HXLINE( 569)		if (::hx::IsNotNull( this->_asset_index )) {
HXLINE( 570)			{
HXLINE( 570)				 ::Dynamic key2 = this->_asset_index->keys();
HXDLIN( 570)				while(( (bool)(key2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 570)					::String key3 = ( (::String)(key2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 571)					this->_asset_index->remove(key3);
            				}
            			}
HXLINE( 572)			this->_asset_index = null();
            		}
HXLINE( 574)		if (::hx::IsNotNull( this->_tag_index )) {
HXLINE( 575)			{
HXLINE( 575)				 ::Dynamic key4 = this->_tag_index->keys();
HXDLIN( 575)				while(( (bool)(key4->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 575)					::String key5 = ( (::String)(key4->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 576)					::flixel::util::FlxArrayUtil_obj::clearArray(( (::cpp::VirtualArray)(this->_tag_index->get(key5)) ),null());
HXLINE( 577)					this->_tag_index->remove(key5);
            				}
            			}
HXLINE( 578)			this->_tag_index = null();
            		}
HXLINE( 580)		if (::hx::IsNotNull( this->_definition_index )) {
HXLINE( 581)			{
HXLINE( 581)				 ::Dynamic key6 = this->_definition_index->keys();
HXDLIN( 581)				while(( (bool)(key6->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 581)					::String key7 = ( (::String)(key6->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 582)					this->_definition_index->remove(key7);
            				}
            			}
HXLINE( 583)			this->_definition_index = null();
            		}
HXLINE( 585)		if (::hx::IsNotNull( this->_variable_index )) {
HXLINE( 586)			{
HXLINE( 586)				 ::Dynamic key8 = this->_variable_index->keys();
HXDLIN( 586)				while(( (bool)(key8->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 586)					::String key9 = ( (::String)(key8->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 587)					this->_variable_index->remove(key9);
            				}
            			}
HXLINE( 588)			this->_variable_index = null();
            		}
HXLINE( 590)		if (::hx::IsNotNull( this->_mode_index )) {
HXLINE( 591)			{
HXLINE( 591)				 ::Dynamic key10 = this->_mode_index->keys();
HXDLIN( 591)				while(( (bool)(key10->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 591)					::String key11 = ( (::String)(key10->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 592)					this->_mode_index->remove(key11);
            				}
            			}
HXLINE( 593)			this->_mode_index = null();
            		}
HXLINE( 595)		this->_ptr = null();
HXLINE( 596)		this->_superIndexUI = null();
HXLINE( 597)		this->_ptr_tongue = null();
HXLINE( 598)		if (::hx::IsNotNull( this->cursorLists )) {
HXLINE( 600)			{
HXLINE( 600)				int _g = 0;
HXDLIN( 600)				::Array< ::Dynamic> _g1 = this->cursorLists;
HXDLIN( 600)				while((_g < _g1->length)){
HXLINE( 600)					::Array< ::Dynamic> arr = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 600)					_g = (_g + 1);
HXLINE( 602)					::flixel::util::FlxArrayUtil_obj::clearArray(arr,null());
            				}
            			}
HXLINE( 604)			::flixel::util::FlxArrayUtil_obj::clearArray(this->cursorLists,null());
            		}
HXLINE( 606)		this->cursorLists = null();
HXLINE( 607)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_failure_checks,null());
HXDLIN( 607)		this->_failure_checks = null();
HXLINE( 608)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_assetsToCleanUp,null());
HXDLIN( 608)		this->_assetsToCleanUp = null();
HXLINE( 609)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_scaledAssets,null());
HXDLIN( 609)		this->_scaledAssets = null();
HXLINE( 610)		this->super::destroy();
            	}


void FlxUI_obj::load( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_621_load)
HXLINE( 622)		this->_group_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 623)		this->_asset_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 624)		this->_tag_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 625)		this->_definition_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 626)		if (::hx::IsNull( this->_variable_index )) {
HXLINE( 628)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 630)		this->_mode_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 632)		if (::hx::IsNotNull( data )) {
HXLINE( 634)			if (::hx::IsNull( this->_superIndexUI )) {
HXLINE( 637)				 ::flixel::addons::ui::FlxUIRegion screenRegion =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 638)				screenRegion->name = HX_("screen",6c,3b,5d,47);
HXLINE( 639)				this->addAsset(screenRegion,HX_("screen",6c,3b,5d,47),null(),null());
HXLINE( 641)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e))) {
HXLINE( 643)					if (this->_loadTest(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e)))) {
HXLINE( 645)						 ::Xml screenNode = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e));
HXLINE( 646)						this->_loadPosition(screenNode,screenRegion);
HXLINE( 647)						screenRegion->set_width(this->_loadWidth(screenNode,::flixel::FlxG_obj::width,null(),null()));
HXLINE( 648)						screenRegion->set_height(this->_loadHeight(screenNode,::flixel::FlxG_obj::height,null(),null()));
            					}
            				}
            			}
HXLINE( 654)			this->_data = data;
HXLINE( 657)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97))) {
HXLINE( 659)				while(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97))){
HXLINE( 661)					 ::Xml inj_data = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97));
HXLINE( 662)					::String inj_name = ::flixel::addons::ui::U_obj::xml_name(inj_data);
HXLINE( 663)					 ::Xml payload = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(inj_name,HX_("xml",d7,6d,5b,00),false,null())) );
HXLINE( 664)					if (::hx::IsNotNull( payload )) {
HXLINE( 666)						 ::Xml parent = inj_data->parent;
HXLINE( 667)						int i = 0;
HXLINE( 668)						{
HXLINE( 668)							int _g = 0;
HXDLIN( 668)							::Array< ::Dynamic> _g1 = parent->children;
HXDLIN( 668)							while((_g < _g1->length)){
HXLINE( 668)								 ::Xml child = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 668)								_g = (_g + 1);
HXLINE( 670)								if (::hx::IsInstanceEq( child,inj_data )) {
HXLINE( 672)									goto _hx_goto_35;
            								}
HXLINE( 674)								i = (i + 1);
            							}
            							_hx_goto_35:;
            						}
HXLINE( 677)						if (parent->removeChild(inj_data)) {
HXLINE( 679)							int j = 0;
HXLINE( 680)							{
HXLINE( 680)								 ::Dynamic e = payload->elements();
HXDLIN( 680)								while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 680)									 ::Xml e1 = ( ( ::Xml)(e->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 682)									parent->insertChild(e1,(i + j));
HXLINE( 683)									j = (j + 1);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 691)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("include",28,fe,f6,51))) {
HXLINE( 693)				int _g2 = 0;
HXDLIN( 693)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("include",28,fe,f6,51));
HXDLIN( 693)				while((_g2 < _g3->length)){
HXLINE( 693)					 ::Xml inc_data = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN( 693)					_g2 = (_g2 + 1);
HXLINE( 695)					::String inc_name = ::flixel::addons::ui::U_obj::xml_name(inc_data);
HXLINE( 697)					 ::Xml liveFile = null();
HXLINE( 714)					 ::Xml inc_xml = null();
HXLINE( 715)					if (::hx::IsNull( liveFile )) {
HXLINE( 717)						inc_xml = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(inc_name,null(),null(),null())) );
            					}
            					else {
HXLINE( 721)						inc_xml = liveFile;
            					}
HXLINE( 724)					if (::hx::IsNotNull( inc_xml )) {
HXLINE( 726)						{
HXLINE( 726)							int _g4 = 0;
HXDLIN( 726)							::Array< ::Dynamic> _g5 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(inc_xml,HX_("definition",93,d5,0d,ec));
HXDLIN( 726)							while((_g4 < _g5->length)){
HXLINE( 726)								 ::Xml def_data = _g5->__get(_g4).StaticCast<  ::Xml >();
HXDLIN( 726)								_g4 = (_g4 + 1);
HXLINE( 729)								::String def_name = (HX_("include:",12,65,27,66) + ::flixel::addons::ui::U_obj::xml_name(def_data));
HXLINE( 731)								this->unparentXML(def_data);
HXLINE( 733)								this->_definition_index->set(def_name,def_data);
            							}
            						}
HXLINE( 739)						if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(inc_xml,HX_("point_size",50,66,f5,4b))) {
HXLINE( 741)							this->_loadPointSize(inc_xml);
            						}
HXLINE( 744)						if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(inc_xml,HX_("default",c1,d8,c3,9b))) {
HXLINE( 746)							int _g6 = 0;
HXDLIN( 746)							::Array< ::Dynamic> _g7 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(inc_xml,HX_("default",c1,d8,c3,9b));
HXDLIN( 746)							while((_g6 < _g7->length)){
HXLINE( 746)								 ::Xml defaultNode = _g7->__get(_g6).StaticCast<  ::Xml >();
HXDLIN( 746)								_g6 = (_g6 + 1);
HXLINE( 748)								if (this->_loadTest(defaultNode)) {
HXLINE( 750)									::String defaultName = ::flixel::addons::ui::U_obj::xml_name(defaultNode);
HXLINE( 752)									this->unparentXML(defaultNode);
HXLINE( 754)									this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName),defaultNode);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 764)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b))) {
HXLINE( 766)				this->_loadPointSize(data);
            			}
HXLINE( 770)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("definition",93,d5,0d,ec))) {
HXLINE( 772)				int _g8 = 0;
HXDLIN( 772)				::Array< ::Dynamic> _g9 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("definition",93,d5,0d,ec));
HXDLIN( 772)				while((_g8 < _g9->length)){
HXLINE( 772)					 ::Xml def_data1 = _g9->__get(_g8).StaticCast<  ::Xml >();
HXDLIN( 772)					_g8 = (_g8 + 1);
HXLINE( 774)					if (this->_loadTest(def_data1)) {
HXLINE( 776)						::String def_name1 = ::flixel::addons::ui::U_obj::xml_name(def_data1);
HXLINE( 777)						::String error = HX_("",00,00,00,00);
HXLINE( 778)						if ((def_name1.indexOf(HX_("default:",59,d0,99,af),null()) != -1)) {
HXLINE( 780)							error = HX_("'default:'",a7,c0,54,42);
            						}
HXLINE( 782)						if ((def_name1.indexOf(HX_("include:",12,65,27,66),null()) != -1)) {
HXLINE( 784)							error = HX_("'include:'",ce,4d,a9,47);
            						}
HXLINE( 786)						if ((error != HX_("",00,00,00,00))) {
HXLINE( 788)							::flixel::FlxG_obj::log->advanced(((((HX_("Can't create FlxUI definition '",b5,82,49,00) + def_name1) + HX_("', because '",92,6b,a1,0c)) + error) + HX_("' is a reserved name prefix!",16,78,51,ae)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            						else {
HXLINE( 792)							this->unparentXML(def_data1);
HXLINE( 794)							this->_definition_index->set(def_name1,def_data1);
            						}
            					}
            				}
            			}
HXLINE( 800)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("default",c1,d8,c3,9b))) {
HXLINE( 802)				int _g10 = 0;
HXDLIN( 802)				::Array< ::Dynamic> _g11 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("default",c1,d8,c3,9b));
HXDLIN( 802)				while((_g10 < _g11->length)){
HXLINE( 802)					 ::Xml defaultNode1 = _g11->__get(_g10).StaticCast<  ::Xml >();
HXDLIN( 802)					_g10 = (_g10 + 1);
HXLINE( 804)					if (this->_loadTest(defaultNode1)) {
HXLINE( 806)						::String defaultName1 = ::flixel::addons::ui::U_obj::xml_name(defaultNode1);
HXLINE( 808)						this->unparentXML(defaultNode1);
HXLINE( 810)						this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName1),defaultNode1);
            					}
            				}
            			}
HXLINE( 816)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("variable",3c,12,0d,69))) {
HXLINE( 818)				int _g12 = 0;
HXDLIN( 818)				::Array< ::Dynamic> _g13 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("variable",3c,12,0d,69));
HXDLIN( 818)				while((_g12 < _g13->length)){
HXLINE( 818)					 ::Xml var_data = _g13->__get(_g12).StaticCast<  ::Xml >();
HXDLIN( 818)					_g12 = (_g12 + 1);
HXLINE( 820)					if (this->_loadTest(var_data)) {
HXLINE( 822)						::String var_name = ::flixel::addons::ui::U_obj::xml_name(var_data);
HXLINE( 823)						::String var_value = ::flixel::addons::ui::U_obj::xml_str(var_data,HX_("value",71,7f,b8,31),null(),null());
HXLINE( 824)						if ((var_name != HX_("",00,00,00,00))) {
HXLINE( 826)							this->_variable_index->set(var_name,var_value);
            						}
            					}
            				}
            			}
HXLINE( 833)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48))) {
HXLINE( 835)				int _g14 = 0;
HXDLIN( 835)				::Array< ::Dynamic> _g15 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48));
HXDLIN( 835)				while((_g14 < _g15->length)){
HXLINE( 835)					 ::Xml mode_data = _g15->__get(_g14).StaticCast<  ::Xml >();
HXDLIN( 835)					_g14 = (_g14 + 1);
HXLINE( 837)					if (this->_loadTest(mode_data)) {
HXLINE( 839)						 ::Xml mode_data2 = this->applyNodeConditionals(mode_data);
HXLINE( 840)						::String mode_name = ::flixel::addons::ui::U_obj::xml_name(mode_data);
HXLINE( 843)						this->unparentXML(mode_data2);
HXLINE( 845)						this->_mode_index->set(mode_name,mode_data2);
            					}
            				}
            			}
HXLINE( 851)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99))) {
HXLINE( 853)				int _g16 = 0;
HXDLIN( 853)				::Array< ::Dynamic> _g17 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99));
HXDLIN( 853)				while((_g16 < _g17->length)){
HXLINE( 853)					 ::Xml group_data = _g17->__get(_g16).StaticCast<  ::Xml >();
HXDLIN( 853)					_g16 = (_g16 + 1);
HXLINE( 855)					if (this->_loadTest(group_data)) {
HXLINE( 858)						::String name = ::flixel::addons::ui::U_obj::xml_name(group_data);
HXLINE( 859)						::String custom = ::flixel::addons::ui::U_obj::xml_str(group_data,HX_("custom",b1,87,92,3f),null(),null());
HXLINE( 861)						 ::flixel::addons::ui::FlxUIGroup tempGroup = null();
HXLINE( 864)						if ((custom != HX_("",00,00,00,00))) {
HXLINE( 866)							 ::Dynamic result = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,HX_("ui_get_group:",2f,b3,b6,b7),::hx::ObjectPtr<OBJ_>(this),custom,null());
HXLINE( 867)							bool _hx_tmp;
HXDLIN( 867)							if (::hx::IsNotNull( result )) {
HXLINE( 867)								_hx_tmp = ::Std_obj::isOfType(result,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >()) ));
            							}
            							else {
HXLINE( 867)								_hx_tmp = false;
            							}
HXDLIN( 867)							if (_hx_tmp) {
HXLINE( 869)								tempGroup = ( ( ::flixel::addons::ui::FlxUIGroup)(result) );
            							}
            						}
HXLINE( 873)						if (::hx::IsNull( tempGroup )) {
HXLINE( 875)							tempGroup =  ::flixel::addons::ui::FlxUIGroup_obj::__alloc( HX_CTX ,null(),null());
            						}
HXLINE( 878)						tempGroup->name = name;
HXLINE( 879)						this->_group_index->set(name,tempGroup);
HXLINE( 880)						this->add(tempGroup);
            					}
            				}
            			}
HXLINE( 885)			if (::hx::IsNotNull( data->firstElement() )) {
HXLINE( 888)				 ::Dynamic node = data->elements();
HXDLIN( 888)				while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 888)					 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 890)					this->_loadSub(node1,null());
            				}
            			}
HXLINE( 894)			this->_postLoad(data);
            		}
            		else {
HXLINE( 898)			this->_onFinishLoad();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,load,(void))

 ::Xml FlxUI_obj::unparentXML( ::Xml f){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_904_unparentXML)
HXDLIN( 904)		return ::flixel::addons::ui::U_obj::unparentXML(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,unparentXML,return )

void FlxUI_obj::_loadPointSize( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_908__loadPointSize)
HXLINE( 909)		Float ptx = this->_loadWidth(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("x",78,00,00,00),null());
HXLINE( 910)		Float pty = this->_loadHeight(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("y",79,00,00,00),null());
HXLINE( 913)		bool _hx_tmp;
HXDLIN( 913)		if ((pty < 1)) {
HXLINE( 913)			_hx_tmp = (ptx < 1);
            		}
            		else {
HXLINE( 913)			_hx_tmp = false;
            		}
HXDLIN( 913)		if (_hx_tmp) {
HXLINE( 915)			pty = this->_loadHeight(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),-1,HX_("value",71,7f,b8,31),null());
HXLINE( 916)			ptx = pty;
            		}
HXLINE( 920)		if ((pty > 0)) {
HXLINE( 922)			this->_pointX = ptx;
            		}
HXLINE( 924)		if ((ptx > 0)) {
HXLINE( 926)			this->_pointY = pty;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadPointSize,(void))

void FlxUI_obj::_loadSub( ::Xml node,::hx::Null< int >  __o_iteration){
            		int iteration = __o_iteration.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_932__loadSub)
HXLINE( 933)		if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE( 933)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType)));
            		}
HXDLIN( 933)		::String type = node->nodeName;
HXLINE( 934)		type.toLowerCase();
HXLINE( 935)		bool _hx_tmp;
HXDLIN( 935)		if ((node->nodeType != ::Xml_obj::Document)) {
HXLINE( 935)			_hx_tmp = (node->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 935)			_hx_tmp = false;
            		}
HXDLIN( 935)		if (_hx_tmp) {
HXLINE( 935)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType)));
            		}
HXDLIN( 935)		 ::Xml obj = node;
HXLINE( 939)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE( 941)			if (this->_loadTest(obj)) {
HXLINE( 943)				if (::hx::IsNotNull( node->firstElement() )) {
HXLINE( 945)					 ::Dynamic subNode = node->elements();
HXDLIN( 945)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 945)						 ::Xml subNode1 = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 947)						this->_loadSub(subNode1,(iteration + 1));
            					}
            				}
            			}
HXLINE( 952)			return;
            		}
HXLINE( 955)		::String group_name = HX_("",00,00,00,00);
HXLINE( 956)		 ::flixel::addons::ui::FlxUIGroup tempGroup = null();
HXLINE( 958)		::String thing_name = ::flixel::addons::ui::U_obj::xml_name(obj);
HXLINE( 960)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(obj,HX_("group",3f,b3,f4,99))) {
HXLINE( 961)			group_name = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(obj,HX_("group",3f,b3,f4,99));
HXLINE( 962)			tempGroup = this->getGroup(group_name,null());
            		}
HXLINE( 966)		::Dynamic thing = this->_loadThing(type,obj);
HXLINE( 968)		if (::hx::IsNotNull( thing )) {
HXLINE( 969)			this->_loadGlobals(obj,thing);
HXLINE( 971)			bool _hx_tmp1;
HXDLIN( 971)			if (::hx::IsNotNull( thing_name )) {
HXLINE( 971)				_hx_tmp1 = (thing_name != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 971)				_hx_tmp1 = false;
            			}
HXDLIN( 971)			if (_hx_tmp1) {
HXLINE( 972)				this->_asset_index->set(thing_name,thing);
HXLINE( 975)				thing->__SetField(HX_("name",4b,72,ff,48),thing_name,::hx::paccDynamic);
HXLINE( 977)				::String thing_tags = ::flixel::addons::ui::U_obj::xml_str(obj,HX_("tags",d9,b4,f6,4c),null(),null());
HXLINE( 978)				if ((thing_tags != HX_("",00,00,00,00))) {
HXLINE( 980)					::Array< ::String > tagArr = thing_tags.split(HX_(",",2c,00,00,00));
HXLINE( 981)					this->_addTags(tagArr,thing_name);
            				}
            			}
HXLINE( 985)			this->_loadTooltip(thing,obj);
HXLINE( 987)			if (::hx::IsNotNull( tempGroup )) {
HXLINE( 988)				tempGroup->add(( ( ::flixel::FlxSprite)(thing) )).StaticCast<  ::flixel::FlxSprite >();
            			}
            			else {
HXLINE( 990)				this->add(( ( ::flixel::FlxSprite)(thing) ));
            			}
HXLINE( 993)			this->_loadPosition(obj,thing);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadSub,(void))

void FlxUI_obj::_addTags(::Array< ::String > arr,::String thingName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_999__addTags)
HXDLIN( 999)		int _g = 0;
HXDLIN( 999)		while((_g < arr->length)){
HXDLIN( 999)			::String tag = arr->__get(_g);
HXDLIN( 999)			_g = (_g + 1);
HXLINE(1001)			::Array< ::String > list = null();
HXLINE(1002)			if (!(this->_tag_index->exists(tag))) {
HXLINE(1004)				this->_tag_index->set(tag,::Array_obj< ::String >::__new(0));
            			}
HXLINE(1006)			list = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE(1007)			if ((list->indexOf(thingName,null()) == -1)) {
HXLINE(1009)				list->push(thingName);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_addTags,(void))

void FlxUI_obj::_loadGlobals( ::Xml data, ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1016__loadGlobals)
HXDLIN(1016)		if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::FlxBasic >()) ))) {
HXLINE(1018)			bool isVis = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("visible",72,78,24,a3),true);
HXLINE(1019)			bool isActive = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("active",c6,41,46,16),true);
HXLINE(1020)			int numID = ::flixel::addons::ui::U_obj::xml_i(data,HX_("num_id",74,43,78,a1),null());
HXLINE(1022)			thing->__SetField(HX_("visible",72,78,24,a3),isVis,::hx::paccDynamic);
HXLINE(1023)			thing->__SetField(HX_("active",c6,41,46,16),isActive,::hx::paccDynamic);
HXLINE(1024)			thing->__SetField(HX_("ID",db,3f,00,00),numID,::hx::paccDynamic);
HXLINE(1025)			if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::FlxSprite >()) ))) {
HXLINE(1027)				Float alpha = ::flixel::addons::ui::U_obj::xml_f(data,HX_("alpha",5e,a7,96,21),((Float)1.0));
HXLINE(1028)				 ::flixel::FlxSprite s = ( ( ::flixel::FlxSprite)(thing) );
HXLINE(1029)				s->set_alpha(alpha);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadGlobals,(void))

void FlxUI_obj::_postLoad( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1035__postLoad)
HXLINE(1036)		this->_postLoaded = true;
HXLINE(1037)		if (::hx::IsNotNull( data->firstElement() )) {
HXLINE(1039)			 ::Dynamic node = data->elements();
HXDLIN(1039)			while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1039)				 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1041)				if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE(1041)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node1->nodeType)));
            				}
HXDLIN(1041)				::String _hx_tmp = node1->nodeName.toLowerCase();
HXDLIN(1041)				bool _hx_tmp1;
HXDLIN(1041)				if ((node1->nodeType != ::Xml_obj::Document)) {
HXLINE(1041)					_hx_tmp1 = (node1->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(1041)					_hx_tmp1 = false;
            				}
HXDLIN(1041)				if (_hx_tmp1) {
HXLINE(1041)					HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(node1->nodeType)));
            				}
HXDLIN(1041)				this->_postLoadThing(_hx_tmp,node1);
            			}
            		}
HXLINE(1045)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48))) {
HXLINE(1046)			int _g = 0;
HXDLIN(1046)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48));
HXDLIN(1046)			while((_g < _g1->length)){
HXLINE(1046)				 ::Xml mode_node = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(1046)				_g = (_g + 1);
HXLINE(1047)				bool is_default = ::flixel::addons::ui::U_obj::xml_bool(mode_node,HX_("is_default",2c,88,79,76),null());
HXLINE(1048)				if (is_default) {
HXLINE(1049)					::String mode_name = ::flixel::addons::ui::U_obj::xml_name(mode_node);
HXLINE(1050)					this->setMode(mode_name,null());
HXLINE(1051)					goto _hx_goto_55;
            				}
            			}
            			_hx_goto_55:;
            		}
HXLINE(1056)		if (::hx::IsNotNull( this->_failure_checks )) {
HXLINE(1057)			{
HXLINE(1057)				int _g2 = 0;
HXDLIN(1057)				::Array< ::Dynamic> _g3 = this->_failure_checks;
HXDLIN(1057)				while((_g2 < _g3->length)){
HXLINE(1057)					 ::Xml data1 = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(1057)					_g2 = (_g2 + 1);
HXLINE(1058)					if (this->_checkFailure(data1)) {
HXLINE(1059)						this->failed = true;
HXLINE(1060)						goto _hx_goto_56;
            					}
            				}
            				_hx_goto_56:;
            			}
HXLINE(1063)			::flixel::addons::ui::U_obj::clearArraySoft(this->_failure_checks);
HXLINE(1064)			this->_failure_checks = null();
            		}
HXLINE(1067)		this->_onFinishLoad();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_postLoad,(void))

void FlxUI_obj::_sendTo(::Dynamic thing,int dir){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1071__sendTo)
HXLINE(1072)		 ::flixel::addons::ui::FlxUIGroup group = this->getAssetGroup(null(),thing);
HXLINE(1073)		if (::hx::IsNull( group )) {
HXLINE(1075)			if ((this->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != -1)) {
HXLINE(1077)				group = ::hx::ObjectPtr<OBJ_>(this);
            			}
            			else {
HXLINE(1081)				return;
            			}
            		}
HXLINE(1084)		bool _hx_tmp;
HXDLIN(1084)		if ((dir != -1)) {
HXLINE(1084)			_hx_tmp = (dir != 1);
            		}
            		else {
HXLINE(1084)			_hx_tmp = false;
            		}
HXDLIN(1084)		if (_hx_tmp) {
HXLINE(1086)			return;
            		}
HXLINE(1089)		group->group->members->remove(( ( ::flixel::FlxSprite)(thing) ));
HXLINE(1091)		switch((int)(dir)){
            			case (int)-1: {
HXLINE(1093)				group->group->members->insert(0,( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            			case (int)1: {
HXLINE(1094)				group->group->members->push(( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_sendTo,(void))

void FlxUI_obj::sendToFront(::String name,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1105_sendToFront)
HXLINE(1106)		::Dynamic thing = this->getAsset(name,recursive);
HXLINE(1107)		if (::hx::IsNotNull( thing )) {
HXLINE(1107)			this->_sendTo(thing,1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sendToFront,(void))

void FlxUI_obj::sendToBack(::String name,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1117_sendToBack)
HXLINE(1118)		::Dynamic thing = this->getAsset(name,recursive);
HXLINE(1119)		if (::hx::IsNotNull( thing )) {
HXLINE(1119)			this->_sendTo(thing,-1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sendToBack,(void))

::String FlxUI_obj::get_currMode(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1123_get_currMode)
HXDLIN(1123)		return this->_curr_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_currMode,return )

::String FlxUI_obj::set_currMode(::String m){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1124_set_currMode)
HXDLIN(1124)		this->setMode(m,null());
HXDLIN(1124)		return this->_curr_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_currMode,return )

void FlxUI_obj::setMode(::String mode_name,::String __o_target_name){
            		::String target_name = __o_target_name;
            		if (::hx::IsNull(__o_target_name)) target_name = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1133_setMode)
HXLINE(1134)		if ((this->_curr_mode == mode_name)) {
HXLINE(1136)			return;
            		}
HXLINE(1138)		 ::Xml mode = this->getMode(mode_name,null());
HXLINE(1139)		this->_curr_mode = mode_name;
HXLINE(1140)		::String name = HX_("",00,00,00,00);
HXLINE(1141)		::Dynamic thing;
HXLINE(1142)		if ((target_name == HX_("",00,00,00,00))) {
HXLINE(1143)			if (::hx::IsNotNull( mode )) {
HXLINE(1145)				 ::Xml xml;
HXLINE(1146)				{
HXLINE(1146)					 ::Dynamic node = mode->elements();
HXDLIN(1146)					while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1146)						 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1148)						 ::Xml node2 = this->applyNodeConditionals(node1);
HXLINE(1149)						xml = node2;
HXLINE(1151)						if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE(1151)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            						}
HXDLIN(1151)						::String nodeName = xml->nodeName;
HXLINE(1154)						 ::Dynamic activeStatus;
HXDLIN(1154)						if ((::flixel::addons::ui::U_obj::xml_str(xml,HX_("active",c6,41,46,16),null(),null()) == HX_("",00,00,00,00))) {
HXLINE(1154)							activeStatus = null();
            						}
            						else {
HXLINE(1154)							activeStatus = true;
            						}
HXLINE(1155)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1157)							activeStatus = ::flixel::addons::ui::U_obj::xml_bool(xml,HX_("active",c6,41,46,16),null());
            						}
HXLINE(1160)						if (this->_loadTest(node2)) {
HXLINE(1162)							::String _hx_switch_0 = nodeName;
            							if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(1168)								this->_alignThing(node2,null());
HXDLIN(1168)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(1170)								this->_changeThing(node2);
HXDLIN(1170)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("hide",c2,34,0e,45)) ){
HXLINE(1166)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),false,activeStatus);
HXDLIN(1166)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(1172)								name = ::flixel::addons::ui::U_obj::xml_name(xml);
HXLINE(1173)								thing = this->getAsset(name,null());
HXLINE(1174)								if (::hx::IsNotNull( thing )) {
HXLINE(1175)									this->_loadPosition(node2,thing);
            								}
HXLINE(1171)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("show",fd,d4,52,4c)) ){
HXLINE(1164)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),true,activeStatus);
HXDLIN(1164)								goto _hx_goto_64;
            							}
            							_hx_goto_64:;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1182)			::Dynamic target = this->getAsset(target_name,null());
HXLINE(1183)			bool _hx_tmp;
HXDLIN(1183)			if (::hx::IsNotNull( target )) {
HXLINE(1183)				_hx_tmp = ::Std_obj::isOfType(target,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUI >()) ));
            			}
            			else {
HXLINE(1183)				_hx_tmp = false;
            			}
HXDLIN(1183)			if (_hx_tmp) {
HXLINE(1184)				 ::flixel::addons::ui::FlxUI targetUI = ::hx::TCast<  ::flixel::addons::ui::FlxUI >::cast(target);
HXLINE(1185)				targetUI->setMode(mode_name,HX_("",00,00,00,00));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setMode,(void))

void FlxUI_obj::showThing(::String name,::hx::Null< bool >  __o_visibleStatus, ::Dynamic activeStatus){
            		bool visibleStatus = __o_visibleStatus.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1192_showThing)
HXDLIN(1192)		if ((name.indexOf(HX_(",",2c,00,00,00),null()) != -1)) {
HXLINE(1194)			::Array< ::String > names = name.split(HX_(",",2c,00,00,00));
HXLINE(1195)			{
HXLINE(1195)				int _g = 0;
HXDLIN(1195)				while((_g < names->length)){
HXLINE(1195)					::String each_name = names->__get(_g);
HXDLIN(1195)					_g = (_g + 1);
HXLINE(1197)					::Dynamic thing = this->getAsset(each_name,null());
HXLINE(1198)					if (::hx::IsNotNull( thing )) {
HXLINE(1200)						::flixel::IFlxBasic_obj::set_visible(thing,visibleStatus);
HXLINE(1201)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1203)							::flixel::IFlxBasic_obj::set_active(thing,activeStatus);
            						}
            					}
            					else {
HXLINE(1208)						 ::flixel::addons::ui::FlxUIGroup group = this->getGroup(each_name,null());
HXLINE(1209)						if (::hx::IsNotNull( group )) {
HXLINE(1211)							group->set_visible(visibleStatus);
HXLINE(1212)							if (::hx::IsNotNull( activeStatus )) {
HXLINE(1214)								group->set_active(( (bool)(activeStatus) ));
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1222)			if ((name != HX_("*",2a,00,00,00))) {
HXLINE(1224)				::Dynamic thing1 = this->getAsset(name,null());
HXLINE(1225)				if (::hx::IsNotNull( thing1 )) {
HXLINE(1227)					::flixel::IFlxBasic_obj::set_visible(thing1,visibleStatus);
HXLINE(1228)					if (::hx::IsNotNull( activeStatus )) {
HXLINE(1230)						::flixel::IFlxBasic_obj::set_active(thing1,activeStatus);
            					}
            				}
            				else {
HXLINE(1235)					 ::flixel::addons::ui::FlxUIGroup group1 = this->getGroup(name,null());
HXLINE(1236)					if (::hx::IsNotNull( group1 )) {
HXLINE(1238)						group1->set_visible(visibleStatus);
HXLINE(1239)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1241)							group1->set_active(( (bool)(activeStatus) ));
            						}
            					}
            				}
            			}
            			else {
HXLINE(1248)				 ::Dynamic asset_name = this->_asset_index->keys();
HXDLIN(1248)				while(( (bool)(asset_name->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1248)					::String asset_name1 = ( (::String)(asset_name->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1250)					if ((asset_name1 != HX_("*",2a,00,00,00))) {
HXLINE(1252)						this->showThing(asset_name1,visibleStatus,activeStatus);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showThing,(void))

 ::flixel::addons::ui::FlxUIGroup FlxUI_obj::getGroup(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1262_getGroup)
HXLINE(1263)		 ::flixel::addons::ui::FlxUIGroup tempGroup = ( ( ::flixel::addons::ui::FlxUIGroup)(this->_group_index->get(key)) );
HXLINE(1264)		bool _hx_tmp;
HXDLIN(1264)		bool _hx_tmp1;
HXDLIN(1264)		if (::hx::IsNull( tempGroup )) {
HXLINE(1264)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1264)			_hx_tmp1 = false;
            		}
HXDLIN(1264)		if (_hx_tmp1) {
HXLINE(1264)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1264)			_hx_tmp = false;
            		}
HXDLIN(1264)		if (_hx_tmp) {
HXLINE(1266)			return this->_superIndexUI->getGroup(key,recursive);
            		}
HXLINE(1268)		return tempGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getGroup,return )

 ::flixel::text::FlxText FlxUI_obj::getFlxText(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1272_getFlxText)
HXLINE(1273)		::Dynamic asset = this->getAsset(key,recursive);
HXLINE(1274)		if (::hx::IsNotNull( asset )) {
HXLINE(1276)			if (::Std_obj::isOfType(asset,( ( ::Dynamic)(::hx::ClassOf< ::flixel::text::FlxText >()) ))) {
HXLINE(1278)				return ::hx::TCast<  ::flixel::text::FlxText >::cast(asset);
            			}
            		}
HXLINE(1281)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getFlxText,return )

::Array< ::Dynamic> FlxUI_obj::getAllAssets(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1285_getAllAssets)
HXLINE(1286)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1287)		{
HXLINE(1287)			 ::Dynamic key = this->_asset_index->keys();
HXDLIN(1287)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1287)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1289)				arr->push(this->getAsset(key1,null()));
            			}
            		}
HXLINE(1291)		return arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getAllAssets,return )

::Array< ::String > FlxUI_obj::getAssetKeys(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1295_getAssetKeys)
HXLINE(1296)		::Array< ::String > arr = ::Array_obj< ::String >::__new(0);
HXLINE(1297)		{
HXLINE(1297)			 ::Dynamic key = this->_asset_index->keys();
HXDLIN(1297)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1297)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1298)				arr->push(key1);
            			}
            		}
HXLINE(1300)		return arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getAssetKeys,return )

bool FlxUI_obj::hasAsset(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1304_hasAsset)
HXLINE(1305)		if (this->_asset_index->exists(key)) {
HXLINE(1307)			return true;
            		}
HXLINE(1309)		bool _hx_tmp;
HXDLIN(1309)		if (recursive) {
HXLINE(1309)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1309)			_hx_tmp = false;
            		}
HXDLIN(1309)		if (_hx_tmp) {
HXLINE(1311)			return this->_superIndexUI->hasAsset(key,recursive);
            		}
HXLINE(1313)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,hasAsset,return )

::Dynamic FlxUI_obj::getAsset(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1317_getAsset)
HXLINE(1318)		::Dynamic asset = this->_asset_index->get(key);
HXLINE(1319)		bool _hx_tmp;
HXDLIN(1319)		bool _hx_tmp1;
HXDLIN(1319)		if (::hx::IsNull( asset )) {
HXLINE(1319)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1319)			_hx_tmp1 = false;
            		}
HXDLIN(1319)		if (_hx_tmp1) {
HXLINE(1319)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1319)			_hx_tmp = false;
            		}
HXDLIN(1319)		if (_hx_tmp) {
HXLINE(1321)			return this->_superIndexUI->getAsset(key,recursive);
            		}
HXLINE(1323)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAsset,return )

::Array< ::Dynamic> FlxUI_obj::getAssetsWithTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1327_getAssetsWithTag)
HXLINE(1328)		if (this->_tag_index->exists(tag)) {
HXLINE(1330)			::Array< ::String > list = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE(1331)			bool _hx_tmp;
HXDLIN(1331)			if (::hx::IsNotNull( list )) {
HXLINE(1331)				_hx_tmp = (list->length == 0);
            			}
            			else {
HXLINE(1331)				_hx_tmp = true;
            			}
HXDLIN(1331)			if (_hx_tmp) {
HXLINE(1331)				return null();
            			}
HXLINE(1332)			::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1333)			{
HXLINE(1333)				int _g = 0;
HXDLIN(1333)				while((_g < list->length)){
HXLINE(1333)					::String key = list->__get(_g);
HXDLIN(1333)					_g = (_g + 1);
HXLINE(1335)					::Dynamic widget = this->getAsset(key,null());
HXLINE(1336)					if (::hx::IsNotNull( widget )) {
HXLINE(1338)						arr->push(widget);
            					}
            				}
            			}
HXLINE(1341)			return arr;
            		}
HXLINE(1343)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getAssetsWithTag,return )

 ::flixel::addons::ui::FlxUIGroup FlxUI_obj::getAssetGroup(::String key,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1354_getAssetGroup)
HXLINE(1355)		bool _hx_tmp;
HXDLIN(1355)		if (::hx::IsNull( thing )) {
HXLINE(1355)			if (::hx::IsNotNull( key )) {
HXLINE(1355)				_hx_tmp = (key == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1355)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1355)			_hx_tmp = false;
            		}
HXDLIN(1355)		if (_hx_tmp) {
HXLINE(1355)			return null();
            		}
HXLINE(1356)		if (::hx::IsNull( thing )) {
HXLINE(1356)			thing = this->getAsset(key,null());
            		}
HXLINE(1357)		if (::hx::IsNull( thing )) {
HXLINE(1357)			return null();
            		}
HXLINE(1359)		{
HXLINE(1359)			 ::Dynamic key1 = this->_group_index->keys();
HXDLIN(1359)			while(( (bool)(key1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1359)				::String key2 = ( (::String)(key1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1361)				 ::flixel::addons::ui::FlxUIGroup g = ( ( ::flixel::addons::ui::FlxUIGroup)(this->_group_index->get(key2)) );
HXLINE(1362)				if ((g->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != -1)) {
HXLINE(1364)					return g;
            				}
            			}
            		}
HXLINE(1368)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAssetGroup,return )

 ::Xml FlxUI_obj::getMode(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1372_getMode)
HXLINE(1373)		 ::Xml mode = ( ( ::Xml)(this->_mode_index->get(key)) );
HXLINE(1374)		bool _hx_tmp;
HXDLIN(1374)		bool _hx_tmp1;
HXDLIN(1374)		if (::hx::IsNull( mode )) {
HXLINE(1374)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1374)			_hx_tmp1 = false;
            		}
HXDLIN(1374)		if (_hx_tmp1) {
HXLINE(1374)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1374)			_hx_tmp = false;
            		}
HXDLIN(1374)		if (_hx_tmp) {
HXLINE(1376)			return this->_superIndexUI->getMode(key,recursive);
            		}
HXLINE(1378)		return mode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getMode,return )

 ::flixel::addons::ui::ButtonLabelStyle FlxUI_obj::getLabelStyleFromDefinition(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1382_getLabelStyleFromDefinition)
HXLINE(1383)		 ::Xml definition = this->getDefinition(key,recursive);
HXLINE(1384)		if (::hx::IsNotNull( definition )) {
HXLINE(1386)			 ::flixel::addons::ui::FontDef fontDef = this->_loadFontDef(definition);
HXLINE(1387)			::String align = ::flixel::addons::ui::U_obj::xml_str(definition,HX_("align",c5,56,91,21),null(),null());
HXDLIN(1387)			if ((align == HX_("",00,00,00,00))) {
HXLINE(1387)				align = null();
            			}
HXLINE(1388)			int color = this->_loadColor(definition,null(),null());
HXLINE(1389)			 ::flixel::addons::ui::BorderDef border = this->_loadBorder(definition);
HXLINE(1390)			return  ::flixel::addons::ui::ButtonLabelStyle_obj::__alloc( HX_CTX ,fontDef,align,color,border);
            		}
HXLINE(1392)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getLabelStyleFromDefinition,return )

 ::flixel::addons::ui::ButtonLabelStyle FlxUI_obj::getLabelStyleFromData( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1396_getLabelStyleFromData)
HXLINE(1397)		 ::flixel::addons::ui::FontDef fontDef = this->_loadFontDef(data);
HXLINE(1398)		::String align = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXDLIN(1398)		if ((align == HX_("",00,00,00,00))) {
HXLINE(1398)			align = null();
            		}
HXLINE(1399)		int color = this->_loadColor(data,null(),null());
HXLINE(1400)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(1401)		return  ::flixel::addons::ui::ButtonLabelStyle_obj::__alloc( HX_CTX ,fontDef,align,color,border);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getLabelStyleFromData,return )

bool FlxUI_obj::checkVariable(::String key,::String otherValue,::String type,::String __o_op,::hx::Null< bool >  __o_recursive){
            		::String op = __o_op;
            		if (::hx::IsNull(__o_op)) op = HX_("==",60,35,00,00);
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1405_checkVariable)
HXLINE(1406)		::String variable = this->getVariable(key,recursive);
HXLINE(1407)		if (::hx::IsNotNull( variable )) {
HXLINE(1409)			return ::flixel::addons::ui::U_obj::compareStringVars(variable,otherValue,type,op);
            		}
            		else {
HXLINE(1413)			return ::flixel::addons::ui::U_obj::compareStringVars(HX_("",00,00,00,00),otherValue,type,op);
            		}
HXLINE(1407)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,checkVariable,return )

void FlxUI_obj::setVariable(::String key,::String value){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1419_setVariable)
HXDLIN(1419)		this->_variable_index->set(key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setVariable,(void))

::String FlxUI_obj::getVariable(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1423_getVariable)
HXLINE(1424)		::String variable = this->_variable_index->get_string(key);
HXLINE(1425)		bool _hx_tmp;
HXDLIN(1425)		bool _hx_tmp1;
HXDLIN(1425)		if (::hx::IsNull( variable )) {
HXLINE(1425)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1425)			_hx_tmp1 = false;
            		}
HXDLIN(1425)		if (_hx_tmp1) {
HXLINE(1425)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1425)			_hx_tmp = false;
            		}
HXDLIN(1425)		if (_hx_tmp) {
HXLINE(1427)			variable = this->_superIndexUI->getVariable(key,recursive);
            		}
HXLINE(1429)		return variable;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getVariable,return )

 ::Xml FlxUI_obj::getDefinition(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1433_getDefinition)
HXLINE(1434)		 ::Xml definition = ( ( ::Xml)(this->_definition_index->get(key)) );
HXLINE(1435)		bool _hx_tmp;
HXDLIN(1435)		bool _hx_tmp1;
HXDLIN(1435)		if (::hx::IsNull( definition )) {
HXLINE(1435)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1435)			_hx_tmp1 = false;
            		}
HXDLIN(1435)		if (_hx_tmp1) {
HXLINE(1435)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1435)			_hx_tmp = false;
            		}
HXDLIN(1435)		if (_hx_tmp) {
HXLINE(1437)			definition = this->_superIndexUI->getDefinition(key,recursive);
            		}
HXLINE(1439)		if (::hx::IsNull( definition )) {
HXLINE(1441)			if ((key.indexOf(HX_("include:",12,65,27,66),null()) == -1)) {
HXLINE(1445)				definition = this->getDefinition((HX_("include:",12,65,27,66) + key),recursive);
            			}
            		}
HXLINE(1449)		return definition;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getDefinition,return )

int FlxUI_obj::screenWidth(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1479_screenWidth)
HXLINE(1480)		if (this->hasAsset(HX_("screen",6c,3b,5d,47),null())) {
HXLINE(1482)			return ::Std_obj::_hx_int(::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(this->getAsset(HX_("screen",6c,3b,5d,47),null())));
            		}
HXLINE(1484)		return ::flixel::FlxG_obj::width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,screenWidth,return )

Float FlxUI_obj::screenHeight(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1488_screenHeight)
HXLINE(1489)		if (this->hasAsset(HX_("height",e7,07,4c,02),null())) {
HXLINE(1491)			return ( (Float)(::Std_obj::_hx_int(::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(this->getAsset(HX_("screen",6c,3b,5d,47),null())))) );
            		}
HXLINE(1493)		return ( (Float)(::flixel::FlxG_obj::height) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,screenHeight,return )

void FlxUI_obj::replaceInGroup( ::flixel::FlxSprite original, ::flixel::FlxSprite replace,::hx::Null< bool >  __o_splice){
            		bool splice = __o_splice.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1530_replaceInGroup)
HXLINE(1533)		if (::hx::IsNotNull( this->_group_index )) {
HXLINE(1534)			 ::Dynamic key = this->_group_index->keys();
HXDLIN(1534)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1534)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1535)				 ::flixel::addons::ui::FlxUIGroup tempGroup = ( ( ::flixel::addons::ui::FlxUIGroup)(this->_group_index->get(key1)) );
HXLINE(1536)				if (::hx::IsNotNull( tempGroup->group->members )) {
HXLINE(1537)					int i = 0;
HXLINE(1538)					{
HXLINE(1538)						int _g = 0;
HXDLIN(1538)						::Array< ::Dynamic> _g1 = tempGroup->group->members;
HXDLIN(1538)						while((_g < _g1->length)){
HXLINE(1538)							 ::flixel::FlxSprite member = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1538)							_g = (_g + 1);
HXLINE(1539)							if (::hx::IsNotNull( member )) {
HXLINE(1540)								if (::hx::IsInstanceEq( member,original )) {
HXLINE(1541)									tempGroup->group->members->set(i,replace);
HXLINE(1542)									if (::hx::IsNull( replace )) {
HXLINE(1543)										if (splice) {
HXLINE(1544)											tempGroup->group->members->splice(i,1);
HXLINE(1545)											i = (i - 1);
            										}
            									}
HXLINE(1548)									return;
            								}
HXLINE(1550)								i = (i + 1);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1558)		if (::hx::IsNotNull( this->group->members )) {
HXLINE(1559)			int i1 = 0;
HXLINE(1560)			{
HXLINE(1560)				int _g2 = 0;
HXDLIN(1560)				::Array< ::Dynamic> _g3 = this->group->members;
HXDLIN(1560)				while((_g2 < _g3->length)){
HXLINE(1560)					 ::flixel::FlxSprite member1 = _g3->__get(_g2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1560)					_g2 = (_g2 + 1);
HXLINE(1561)					if (::hx::IsNotNull( member1 )) {
HXLINE(1562)						if (::hx::IsInstanceEq( member1,original )) {
HXLINE(1563)							this->group->members->set(i1,replace);
HXLINE(1564)							if (::hx::IsNull( replace )) {
HXLINE(1565)								if (splice) {
HXLINE(1566)									this->group->members->splice(i1,1);
HXLINE(1567)									i1 = (i1 - 1);
            								}
            							}
HXLINE(1570)							return;
            						}
            					}
HXLINE(1573)					i1 = (i1 + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,replaceInGroup,(void))

 ::Xml FlxUI_obj::applyNodeConditionals( ::Xml info){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1580_applyNodeConditionals)
HXLINE(1581)		bool _hx_tmp;
HXDLIN(1581)		if (!(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("locale",9a,74,bf,59)))) {
HXLINE(1581)			_hx_tmp = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("haxedef",5f,a1,7a,08));
            		}
            		else {
HXLINE(1581)			_hx_tmp = true;
            		}
HXDLIN(1581)		if (_hx_tmp) {
HXLINE(1582)			 ::Xml x = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(info,null()))->firstElement();
HXDLIN(1582)			bool info1;
HXDLIN(1582)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE(1582)				info1 = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(1582)				info1 = false;
            			}
HXDLIN(1582)			if (info1) {
HXLINE(1582)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            			}
HXDLIN(1582)			info = x;
HXLINE(1584)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("locale",9a,74,bf,59))) {
HXLINE(1585)				info = this->applyNodeChanges(info,HX_("locale",9a,74,bf,59));
            			}
HXLINE(1588)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1589)				info = this->applyNodeChanges(info,HX_("haxedef",5f,a1,7a,08));
            			}
HXLINE(1592)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("window",f0,93,8c,52))) {
HXLINE(1593)				info = this->applyNodeChanges(info,HX_("window",f0,93,8c,52));
            			}
            		}
HXLINE(1596)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,applyNodeConditionals,return )

 ::Xml FlxUI_obj::applyNodeChanges( ::Xml data,::String nodeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1605_applyNodeChanges)
HXLINE(1608)		::String nodeValue = HX_("",00,00,00,00);
HXLINE(1611)		if ((nodeName == HX_("locale",9a,74,bf,59))) {
HXLINE(1612)			if (::hx::IsNull( this->_ptr_tongue )) {
HXLINE(1613)				return data;
            			}
HXLINE(1615)			nodeValue = ( (::String)(this->_ptr_tongue->__Field(HX_("locale",9a,74,bf,59),::hx::paccDynamic)) ).toLowerCase();
            		}
HXLINE(1619)		bool haxedef = false;
HXLINE(1620)		if ((nodeName == HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1621)			haxedef = true;
            		}
HXLINE(1625)		if ((nodeName == HX_("window",f0,93,8c,52))) {
HXLINE(1626)			nodeValue = ((::flixel::FlxG_obj::width + HX_(",",2c,00,00,00)) + ::flixel::FlxG_obj::height);
            		}
HXLINE(1629)		{
HXLINE(1629)			int _g = 0;
HXDLIN(1629)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,nodeName);
HXDLIN(1629)			while((_g < _g1->length)){
HXLINE(1629)				 ::Xml cNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(1629)				_g = (_g + 1);
HXLINE(1630)				::String cname = ::flixel::addons::ui::U_obj::xml_name(cNode);
HXLINE(1632)				if (haxedef) {
HXLINE(1633)					nodeValue = HX_("",00,00,00,00);
HXLINE(1634)					if (::flixel::addons::ui::U_obj::checkHaxedef(cname)) {
HXLINE(1635)						nodeValue = cname;
            					}
            				}
HXLINE(1639)				if ((cname == nodeValue)) {
HXLINE(1640)					if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(cNode,HX_("change",70,91,72,b7))) {
HXLINE(1641)						int _g2 = 0;
HXDLIN(1641)						::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(cNode,HX_("change",70,91,72,b7));
HXDLIN(1641)						while((_g2 < _g3->length)){
HXLINE(1641)							 ::Xml change = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(1641)							_g2 = (_g2 + 1);
HXLINE(1642)							{
HXLINE(1642)								 ::Dynamic att = change->attributes();
HXDLIN(1642)								while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1642)									::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1643)									::String value = change->get(att1);
HXLINE(1644)									data->set(att1,value);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1651)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,applyNodeChanges,return )

::Dynamic FlxUI_obj::loadThing(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1663_loadThing)
HXDLIN(1663)		return this->_loadThing(type,data);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadThing,return )

 ::Xml FlxUI_obj::_loadThingGetInfo( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1667__loadThingGetInfo)
HXLINE(1668)		 ::Xml _this = data;
HXDLIN(1668)		if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(1668)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(1668)		::String nodeName = _this->nodeName;
HXLINE(1669)		 ::Xml defaultDef = this->getDefinition((HX_("default:",59,d0,99,af) + nodeName),null());
HXLINE(1674)		 ::Xml info = null();
HXLINE(1675)		if (::hx::IsNotNull( defaultDef )) {
HXLINE(1677)			info = ::flixel::addons::ui::FlxUI_obj::consolidateData(data,defaultDef,true);
            		}
HXLINE(1680)		if (::hx::IsNull( info )) {
HXLINE(1682)			info = data;
            		}
HXLINE(1685)		::String use_def = ::flixel::addons::ui::U_obj::xml_str(info,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1686)		 ::Xml definition = null();
HXLINE(1687)		if ((use_def != HX_("",00,00,00,00))) {
HXLINE(1689)			definition = this->getDefinition(use_def,null());
            		}
HXLINE(1692)		info = ::flixel::addons::ui::FlxUI_obj::consolidateData(info,definition,null());
HXLINE(1693)		info = this->applyNodeConditionals(info);
HXLINE(1695)		if ((this->_loadTest(info) == false)) {
HXLINE(1697)			return null();
            		}
HXLINE(1700)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadThingGetInfo,return )

void FlxUI_obj::_loadTooltip(::Dynamic thing, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1705__loadTooltip)
HXDLIN(1705)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tooltip",03,ad,8c,6a))) {
HXLINE(1707)			 ::Dynamic tt = this->_loadTooltipData(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("tooltip",03,ad,8c,6a)));
HXLINE(1708)			::Dynamic state = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE(1710)			if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >()) ))) {
HXLINE(1712)				 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(thing) );
HXLINE(1713)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),::hx::paccDynamic)) )->add(check->button,tt);
            			}
            			else {
HXLINE(1715)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),::hx::paccDynamic)) )->add(( ( ::flixel::FlxObject)(thing) ),tt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltip,(void))

 ::Dynamic FlxUI_obj::_loadTooltipData( ::Xml tNode){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1721__loadTooltipData)
HXLINE(1722)		 ::Dynamic tt =  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("style",31,a5,1d,84), ::Dynamic(::hx::Anon_obj::Create(18)
            				->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),-1)
            				->setFixed(1,HX_("titleFormat",ef,5a,1a,94),null())
            				->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f),null())
            				->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),null())
            				->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),null())
            				->setFixed(5,HX_("rightPadding",55,e9,2b,bb),-1)
            				->setFixed(6,HX_("leftPadding",8a,98,10,d0),-1)
            				->setFixed(7,HX_("borderColor",d7,3c,d5,d6),null())
            				->setFixed(8,HX_("titleWidth",4e,c9,47,dc),-1)
            				->setFixed(9,HX_("titleOffset",4b,63,cb,f6),null())
            				->setFixed(10,HX_("titleBorder",a4,18,a6,fa),null())
            				->setFixed(11,HX_("borderSize",cd,ff,ed,06),-1)
            				->setFixed(12,HX_("arrow",c9,79,8f,25),null())
            				->setFixed(13,HX_("background",ee,93,1d,26),null())
            				->setFixed(14,HX_("bottomPadding",26,1e,2d,2b),-1)
            				->setFixed(15,HX_("topPadding",bc,47,4b,3c),-1)
            				->setFixed(16,HX_("bodyFormat",79,23,ab,44),null())
            				->setFixed(17,HX_("autoSizeVertical",66,58,0d,52),null())))
            			->setFixed(1,HX_("title",98,15,3b,10),HX_("",00,00,00,00))
            			->setFixed(2,HX_("body",a2,7a,1b,41),HX_("",00,00,00,00))
            			->setFixed(3,HX_("anchor",75,3a,71,60),null()));
HXLINE(1751)		 ::Xml defaultDef = this->getDefinition(HX_("default:tooltip",ca,89,56,af),null());
HXLINE(1752)		if (::hx::IsNotNull( defaultDef )) {
HXLINE(1754)			tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,defaultDef,true);
            		}
HXLINE(1757)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tNode,HX_("use_def",8d,da,e9,62))) {
HXLINE(1759)			::String defStr = ::flixel::addons::ui::U_obj::xml_str(tNode,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1760)			 ::Xml def = this->getDefinition(defStr,null());
HXLINE(1761)			if (::hx::IsNotNull( def )) {
HXLINE(1763)				tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,def,true);
            			}
            		}
HXLINE(1767)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tNode,HX_("text",ad,cc,f9,4c))) {
HXLINE(1769)			this->_loadTooltipText(tNode,HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1772)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tNode,HX_("title",98,15,3b,10))) {
HXLINE(1774)			this->_loadTooltipText(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(tNode,HX_("title",98,15,3b,10)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1776)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tNode,HX_("body",a2,7a,1b,41))) {
HXLINE(1778)			this->_loadTooltipText(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(tNode,HX_("body",a2,7a,1b,41)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1781)		tt->__SetField(HX_("anchor",75,3a,71,60),this->_loadAnchor(tNode),::hx::paccDynamic);
HXLINE(1783)		this->_loadTooltipStyle(tNode,tt);
HXLINE(1785)		return tt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTooltipData,return )

void FlxUI_obj::_loadTooltipStyle( ::Xml node, ::Dynamic tt){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1789__loadTooltipStyle)
HXLINE(1790)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("background",ee,93,1d,26),::flixel::addons::ui::U_obj::xml_color(node,HX_("background",ee,93,1d,26),null(),null()),::hx::paccDynamic);
HXLINE(1791)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("borderSize",cd,ff,ed,06),::flixel::addons::ui::U_obj::xml_i(node,HX_("border",ec,4c,1a,64),-1),::hx::paccDynamic);
HXLINE(1792)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(node,HX_("border_color",90,7e,e8,6e),null(),null()),::hx::paccDynamic);
HXLINE(1794)		 ::Dynamic _hx_tmp;
HXDLIN(1794)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("arrow",c9,79,8f,25))) {
HXLINE(1794)			 ::Xml data = node;
HXDLIN(1794)			::String str = HX_("",00,00,00,00);
HXDLIN(1794)			if (::hx::IsNotNull( data->get(HX_("arrow",c9,79,8f,25)) )) {
HXLINE(1794)				str = data->get(HX_("arrow",c9,79,8f,25));
HXDLIN(1794)				bool _hx_tmp1;
HXDLIN(1794)				if ((str != HX_("",00,00,00,00))) {
HXLINE(1794)					_hx_tmp1 = ::hx::IsNull( str );
            				}
            				else {
HXLINE(1794)					_hx_tmp1 = true;
            				}
HXDLIN(1794)				if (_hx_tmp1) {
HXLINE(1794)					str = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(1794)					str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(1794)					try {
            						HX_STACK_CATCHABLE(::String, 0);
            						HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(1794)						if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(1794)							HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("arrow",c9,79,8f,25)) + HX_("\"",22,00,00,00)));
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            							HX_STACK_BEGIN_CATCH
            							::String msg1 = _hx_e;
HXLINE(1794)							 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(1794)							_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            						}
            						else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::ValueException _g = _hx_e;
HXLINE( 384)							{
HXLINE( 384)								null();
            							}
HXLINE(1794)							if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 384)								::String msg1 = ( (::String)(_g->value) );
HXLINE(1794)								{
HXLINE(1794)									 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(1794)									_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            								}
            							}
            							else {
HXLINE(1794)								HX_STACK_DO_THROW(_g);
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXDLIN(1794)			_hx_tmp = str;
            		}
            		else {
HXLINE(1794)			_hx_tmp = null();
            		}
HXDLIN(1794)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("arrow",c9,79,8f,25),_hx_tmp,::hx::paccDynamic);
HXLINE(1796)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),::flixel::addons::ui::U_obj::xml_bool(node,HX_("auto_size_horizontal",d2,fe,ab,ff),true),::hx::paccDynamic);
HXLINE(1797)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("autoSizeVertical",66,58,0d,52),::flixel::addons::ui::U_obj::xml_bool(node,HX_("auto_size_vertical",e4,c6,93,30),true),::hx::paccDynamic);
HXLINE(1799)		int padAll = ::Std_obj::_hx_int(this->_loadHeight(node,-1,HX_("pad_all",f5,34,29,cd),null()));
HXLINE(1800)		if ((padAll != -1)) {
HXLINE(1802)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),padAll,::hx::paccDynamic)),::hx::paccDynamic)),::hx::paccDynamic)),::hx::paccDynamic);
            		}
            		else {
HXLINE(1806)			Float _hx_tmp2 = this->_loadWidth(node,0,HX_("pad_left",b3,25,25,be),null());
HXDLIN(1806)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),::Std_obj::_hx_int(_hx_tmp2),::hx::paccDynamic);
HXLINE(1807)			Float _hx_tmp3 = this->_loadWidth(node,0,HX_("pad_right",b0,e4,68,19),null());
HXDLIN(1807)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),::Std_obj::_hx_int(_hx_tmp3),::hx::paccDynamic);
HXLINE(1808)			Float _hx_tmp4 = this->_loadHeight(node,0,HX_("pad_top",69,a2,37,cd),null());
HXDLIN(1808)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),::Std_obj::_hx_int(_hx_tmp4),::hx::paccDynamic);
HXLINE(1809)			Float _hx_tmp5 = this->_loadHeight(node,0,HX_("pad_bottom",97,c7,b1,39),null());
HXDLIN(1809)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),::Std_obj::_hx_int(_hx_tmp5),::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltipStyle,(void))

void FlxUI_obj::_loadTooltipText( ::Xml node,::String fieldName, ::Dynamic tt){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1814__loadTooltipText)
HXLINE(1815)		::String nodeName;
HXDLIN(1815)		if ((node->nodeType == ::Xml_obj::Document)) {
HXLINE(1815)			nodeName = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE(1815)			if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE(1815)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType)));
            			}
HXDLIN(1815)			nodeName = node->nodeName;
            		}
HXLINE(1816)		::String text = this->_loadString(node,fieldName);
HXLINE(1818)		Float x = this->_loadWidth(node,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXDLIN(1818)		 ::flixel::math::FlxBasePoint offset =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,x,this->_loadHeight(node,( (Float)(0) ),HX_("y",79,00,00,00),null()));
HXLINE(1820)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("use_def",8d,da,e9,62))) {
HXLINE(1822)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(node,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1823)			 ::Xml the_def = this->getDefinition(use_def,null());
HXLINE(1824)			if (::hx::IsNotNull( the_def )) {
HXLINE(1826)				node = ::flixel::addons::ui::FlxUI_obj::consolidateData(node,the_def,null());
            			}
            		}
HXLINE(1830)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(node);
HXLINE(1831)		 ::flixel::addons::ui::FontDef format = this->_loadFontDef(node);
HXLINE(1832)		 ::Dynamic color = ::flixel::addons::ui::U_obj::xml_color(node,HX_("color",63,71,5c,4a),true,-16777216);
HXLINE(1833)		format->format->color = color;
HXLINE(1835)		int W = ::Std_obj::_hx_int(this->_loadWidth(node,-1,HX_("width",06,b6,62,ca),null()));
HXLINE(1837)		::String _hx_switch_0 = nodeName;
            		if (  (_hx_switch_0==HX_("body",a2,7a,1b,41)) ){
HXLINE(1849)			if ((text != HX_("",00,00,00,00))) {
HXLINE(1851)				tt->__SetField(HX_("body",a2,7a,1b,41),text,::hx::paccDynamic);
            			}
HXLINE(1853)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyOffset",d5,2b,5c,a7),offset,::hx::paccDynamic);
HXLINE(1854)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyFormat",79,23,ab,44),format,::hx::paccDynamic);
HXLINE(1855)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyWidth",04,e0,6a,8a),W,::hx::paccDynamic);
HXLINE(1856)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyBorder",2e,e1,36,ab),border,::hx::paccDynamic);
HXLINE(1848)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("title",98,15,3b,10)) ||  (_hx_switch_0==HX_("tooltip",03,ad,8c,6a)) ){
HXLINE(1840)			if ((text != HX_("",00,00,00,00))) {
HXLINE(1842)				tt->__SetField(HX_("title",98,15,3b,10),text,::hx::paccDynamic);
            			}
HXLINE(1844)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleOffset",4b,63,cb,f6),offset,::hx::paccDynamic);
HXLINE(1845)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleFormat",ef,5a,1a,94),format,::hx::paccDynamic);
HXLINE(1846)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleWidth",4e,c9,47,dc),W,::hx::paccDynamic);
HXLINE(1847)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleBorder",a4,18,a6,fa),border,::hx::paccDynamic);
HXLINE(1839)			goto _hx_goto_104;
            		}
            		/* default */{
            		}
            		_hx_goto_104:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadTooltipText,(void))

 ::flixel::addons::ui::Anchor FlxUI_obj::_loadAnchor( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1863__loadAnchor)
HXLINE(1864)		Float xOff = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(1865)		Float yOff = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(1866)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60))) {
HXLINE(1868)			::String xSide = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x",78,00,00,00),true,HX_("right",dc,0b,64,e9));
HXLINE(1869)			::String ySide = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y",79,00,00,00),true,HX_("top",95,66,58,00));
HXLINE(1870)			::String xFlush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x-flush",ef,49,ba,7e),true,HX_("left",07,08,b0,47));
HXLINE(1871)			::String yFlush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y-flush",b0,c0,4f,a8),true,HX_("top",95,66,58,00));
HXLINE(1872)			return  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,xOff,yOff,xSide,ySide,xFlush,yFlush);
            		}
HXLINE(1874)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadAnchor,return )

::Dynamic FlxUI_obj::_loadThing(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1877__loadThing)
HXLINE(1879)		 ::Xml info = this->_loadThingGetInfo(data);
HXLINE(1880)		if (::hx::IsNull( info )) {
HXLINE(1882)			return null();
            		}
HXLINE(1885)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(1911)			this->_alignThing(info,true);
HXLINE(1912)			return null();
HXLINE(1911)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("bar",d3,b1,4a,00)) ){
HXLINE(1892)			return this->_loadBar(info);
HXDLIN(1892)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("box",0b,be,4a,00)) ){
HXLINE(1890)			return this->_loadBox(info);
HXDLIN(1890)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("button",f2,61,e0,d9)) ){
HXLINE(1896)			return this->_loadButton(info,null(),null(),null());
HXDLIN(1896)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("button_toggle",81,71,c8,4e)) ){
HXLINE(1897)			return this->_loadButton(info,true,true,null());
HXDLIN(1897)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(1916)			this->_changeThing(info);
HXLINE(1917)			return null();
HXLINE(1915)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("checkbox",43,d2,f5,ac)) ){
HXLINE(1904)			return this->_loadCheckBox(info);
HXDLIN(1904)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("failure",4a,70,fa,16)) ){
HXLINE(1907)			if (::hx::IsNull( this->_failure_checks )) {
HXLINE(1907)				this->_failure_checks = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(1908)			this->unparentXML(info);
HXLINE(1909)			this->_failure_checks->push(info);
HXLINE(1910)			return null();
HXLINE(1907)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("input_text",42,40,18,eb)) ){
HXLINE(1894)			return this->_loadInputText(info);
HXDLIN(1894)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("line",f4,17,b3,47)) ){
HXLINE(1889)			return this->_loadLine(info);
HXDLIN(1889)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("default",c1,d8,c3,9b)) ||  (_hx_switch_0==HX_("group",3f,b3,f4,99)) ||  (_hx_switch_0==HX_("include",28,fe,f6,51)) ||  (_hx_switch_0==HX_("inject",91,4a,ea,97)) ||  (_hx_switch_0==HX_("load_if",96,33,eb,08)) ||  (_hx_switch_0==HX_("mode",63,d3,60,48)) ){
HXLINE(1914)			return null();
HXDLIN(1914)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("chrome",7a,f9,af,c2)) ||  (_hx_switch_0==HX_("nine_slice",45,82,57,9b)) ||  (_hx_switch_0==HX_("nine_slice_sprite",ff,6d,22,c8)) ||  (_hx_switch_0==HX_("nineslice",e0,29,78,d8)) ||  (_hx_switch_0==HX_("nineslicesprite",e5,ad,da,98)) ){
HXLINE(1887)			return this->_load9SliceSprite(info,null());
HXDLIN(1887)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("num_stepper",d8,f2,7c,cd)) ||  (_hx_switch_0==HX_("numeric_stepper",5f,56,dc,30)) ||  (_hx_switch_0==HX_("numstepper",8b,1b,2f,e4)) ){
HXLINE(1895)			return this->_loadNumericStepper(info,null());
HXDLIN(1895)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(1919)			this->name = ::flixel::addons::ui::U_obj::xml_name(info);
HXLINE(1920)			::Dynamic thing = this->getAsset(this->name,null());
HXLINE(1921)			if (::hx::IsNotNull( thing )) {
HXLINE(1922)				this->_loadPosition(info,thing);
            			}
HXLINE(1924)			return null();
HXLINE(1918)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("dropdown",11,74,2f,fd)) ||  (_hx_switch_0==HX_("dropdown_menu",cd,8f,c7,05)) ||  (_hx_switch_0==HX_("pulldown",a7,ca,a0,a7)) ||  (_hx_switch_0==HX_("pulldown_menu",77,99,46,8c)) ){
HXLINE(1902)			return this->_loadDropDownMenu(info);
HXDLIN(1902)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("radio_group",bb,79,eb,b8)) ){
HXLINE(1905)			return this->_loadRadioGroup(info);
HXDLIN(1905)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(1886)			return this->_loadRegion(info);
HXDLIN(1886)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(1891)			return this->_loadSprite(info);
HXDLIN(1891)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("tab_menu",09,73,e1,d6)) ){
HXLINE(1899)			return this->_loadTabMenu(info);
HXDLIN(1899)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(1893)			return this->_loadText(info);
HXDLIN(1893)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("tile_test",43,d2,38,f8)) ){
HXLINE(1888)			return this->_loadTileTest(info);
HXDLIN(1888)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("layout",aa,ae,b8,58)) ||  (_hx_switch_0==HX_("ui",54,66,00,00)) ){
HXLINE(1906)			return this->_loadLayout(info);
HXDLIN(1906)			goto _hx_goto_107;
            		}
            		/* default */{
HXLINE(1928)			::Dynamic result = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,(HX_("ui_get:",ef,47,3b,f4) + type),::hx::ObjectPtr<OBJ_>(this),info,::cpp::VirtualArray_obj::__new(1)->init(0,data));
HXLINE(1929)			return result;
            		}
            		_hx_goto_107:;
HXLINE(1885)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadThing,return )

Float FlxUI_obj::_loadX( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1937__loadX)
HXDLIN(1937)		return this->_loadWidth(data,default_,HX_("x",78,00,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadX,return )

Float FlxUI_obj::_loadY( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1942__loadY)
HXDLIN(1942)		return this->_loadHeight(data,default_,HX_("y",79,00,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadY,return )

Float FlxUI_obj::_loadScale( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str){
            		Float default_ = __o_default_.Default(((Float)1.0));
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("scale",8a,ce,ce,78);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1947__loadScale)
HXDLIN(1947)		return this->_loadHeight(data,default_,str,HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadScale,return )

Float FlxUI_obj::_loadScaleX( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1952__loadScaleX)
HXDLIN(1952)		return this->_loadWidth(data,default_,HX_("scale_x",43,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleX,return )

Float FlxUI_obj::_loadScaleY( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1957__loadScaleY)
HXDLIN(1957)		return this->_loadHeight(data,default_,HX_("scale_y",44,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleY,return )

Float FlxUI_obj::_loadWidth( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
            		Float default_ = __o_default_.Default(10);
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("width",06,b6,62,ca);
            		::String defaultRound = __o_defaultRound;
            		if (::hx::IsNull(__o_defaultRound)) defaultRound = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1961__loadWidth)
HXLINE(1962)		::String ws = ::flixel::addons::ui::U_obj::xml_str(data,str,true,::Std_obj::string(default_));
HXLINE(1963)		 ::flixel::addons::ui::Rounding round = this->getRound(data,defaultRound);
HXLINE(1964)		return this->doRound(this->_getDataSize(HX_("w",77,00,00,00),ws,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadWidth,return )

Float FlxUI_obj::_loadHeight( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
            		Float default_ = __o_default_.Default(10);
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("height",e7,07,4c,02);
            		::String defaultRound = __o_defaultRound;
            		if (::hx::IsNull(__o_defaultRound)) defaultRound = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1968__loadHeight)
HXLINE(1969)		::String hs = ::flixel::addons::ui::U_obj::xml_str(data,str,true,::Std_obj::string(default_));
HXLINE(1970)		 ::flixel::addons::ui::Rounding round = this->getRound(data,defaultRound);
HXLINE(1971)		return this->doRound(this->_getDataSize(HX_("h",68,00,00,00),hs,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadHeight,return )

 ::flixel::math::FlxBasePoint FlxUI_obj::_loadCompass( ::Xml data,::String __o_str){
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("resize_point",85,44,f0,71);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1975__loadCompass)
HXLINE(1976)		::String cs = ::flixel::addons::ui::U_obj::xml_str(data,str,true,HX_("nw",49,60,00,00));
HXLINE(1977)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1977)		point->_inPool = false;
HXDLIN(1977)		 ::flixel::math::FlxBasePoint fp = point;
HXLINE(1978)		::String _hx_switch_0 = cs;
            		if (  (_hx_switch_0==HX_("c",63,00,00,00)) ||  (_hx_switch_0==HX_("center",d5,25,db,05)) ||  (_hx_switch_0==HX_("m",6d,00,00,00)) ||  (_hx_switch_0==HX_("mid",88,11,53,00)) ){
HXLINE(1987)			fp->set_x(((Float)0.5));
HXDLIN(1987)			fp->set_y(((Float)0.5));
HXDLIN(1987)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("ll",80,5e,00,00)) ||  (_hx_switch_0==HX_("sw",a4,64,00,00)) ){
HXLINE(1985)			fp->set_x(( (Float)(0) ));
HXDLIN(1985)			fp->set_y(( (Float)(1) ));
HXDLIN(1985)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("lr",86,5e,00,00)) ||  (_hx_switch_0==HX_("se",92,64,00,00)) ){
HXLINE(1983)			fp->set_x(( (Float)(1) ));
HXDLIN(1983)			fp->set_y(( (Float)(1) ));
HXDLIN(1983)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("e",65,00,00,00)) ||  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE(1982)			fp->set_x(( (Float)(1) ));
HXDLIN(1982)			fp->set_y(((Float)0.5));
HXDLIN(1982)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("s",73,00,00,00)) ){
HXLINE(1984)			fp->set_x(((Float)0.5));
HXDLIN(1984)			fp->set_y(( (Float)(1) ));
HXDLIN(1984)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("n",6e,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(1980)			fp->set_x(((Float)0.5));
HXDLIN(1980)			fp->set_y(( (Float)(0) ));
HXDLIN(1980)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("nw",49,60,00,00)) ||  (_hx_switch_0==HX_("ul",57,66,00,00)) ){
HXLINE(1979)			fp->set_x(( (Float)(0) ));
HXDLIN(1979)			fp->set_y(( (Float)(0) ));
HXDLIN(1979)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("ne",37,60,00,00)) ||  (_hx_switch_0==HX_("ur",5d,66,00,00)) ){
HXLINE(1981)			fp->set_x(( (Float)(1) ));
HXDLIN(1981)			fp->set_y(( (Float)(0) ));
HXDLIN(1981)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ){
HXLINE(1986)			fp->set_x(((Float)0.5));
HXDLIN(1986)			fp->set_y(( (Float)(0) ));
HXDLIN(1986)			goto _hx_goto_116;
            		}
            		_hx_goto_116:;
HXLINE(1989)		return fp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadCompass,return )

void FlxUI_obj::_changeParamsThing( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1993__changeParamsThing)
HXLINE(1994)		::String name = ::flixel::addons::ui::U_obj::xml_name(data);
HXLINE(1995)		::Dynamic thing = this->getAsset(name,null());
HXLINE(1996)		if (::hx::IsNull( thing )) {
HXLINE(1997)			return;
            		}
HXLINE(2000)		if (!(::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >()) )))) {
HXLINE(2001)			return;
            		}
HXLINE(2004)		::Dynamic ihp = thing;
HXLINE(2005)		::cpp::VirtualArray params = null();
HXDLIN(2005)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2005)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2005)			{
HXLINE(2005)				int _g = 0;
HXDLIN(2005)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2005)				while((_g < _g1->length)){
HXLINE(2005)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2005)					_g = (_g + 1);
HXDLIN(2005)					bool _hx_tmp;
HXDLIN(2005)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2005)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2005)						_hx_tmp = false;
            					}
HXDLIN(2005)					if (_hx_tmp) {
HXLINE(2005)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2005)						type = type.toLowerCase();
HXDLIN(2005)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2005)						 ::Dynamic value = valueStr;
HXDLIN(2005)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2005)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2005)							::String str = ::String(valueStr);
HXDLIN(2005)							str = str.toLowerCase();
HXDLIN(2005)							bool _hx_tmp1;
HXDLIN(2005)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2005)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2005)								_hx_tmp1 = true;
            							}
HXDLIN(2005)							if (_hx_tmp1) {
HXLINE(2005)								value = true;
            							}
            							else {
HXLINE(2005)								value = false;
            							}
HXDLIN(2005)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2005)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2005)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2005)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2005)							if (::hx::IsNull( return_val )) {
HXLINE(2005)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2005)							value = return_val;
HXDLIN(2005)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2005)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2005)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2005)							value = ::String(valueStr);
HXDLIN(2005)							goto _hx_goto_119;
            						}
            						_hx_goto_119:;
HXDLIN(2005)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2005)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2005)			{
HXLINE(2005)				int _g2 = 0;
HXDLIN(2005)				int _g3 = params->get_length();
HXDLIN(2005)				while((_g2 < _g3)){
HXLINE(2005)					_g2 = (_g2 + 1);
HXDLIN(2005)					int i = (_g2 - 1);
HXDLIN(2005)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(2005)		::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeParamsThing,(void))

void FlxUI_obj::_changeThing( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2009__changeThing)
HXLINE(2010)		::String name = ::flixel::addons::ui::U_obj::xml_name(data);
HXLINE(2011)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2012)		if (::hx::IsNull( thing )) {
HXLINE(2014)			return;
            		}
HXLINE(2017)		Float new_width = ( (Float)(-1) );
HXLINE(2018)		Float new_height = ( (Float)(-1) );
HXLINE(2020)		::String context = HX_("",00,00,00,00);
HXLINE(2021)		::String code = HX_("",00,00,00,00);
HXLINE(2023)		{
HXLINE(2023)			 ::Dynamic attribute = data->attributes();
HXDLIN(2023)			while(( (bool)(attribute->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2023)				::String attribute1 = ( (::String)(attribute->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2025)				::String _hx_switch_0 = attribute1;
            				if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2045)					new_height = this->_loadHeight(data,null(),null(),null());
HXDLIN(2045)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("label",f4,0d,af,6f)) ){
HXLINE(2035)					::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2036)					context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2037)					code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2038)					label = this->getText(label,context,true,code);
HXLINE(2039)					if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::ILabeled >()) ))) {
HXLINE(2041)						::Dynamic b = thing;
HXLINE(2042)						::flixel::addons::ui::interfaces::ILabeled_obj::getLabel(b)->set_text(label);
            					}
HXLINE(2035)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(2027)					if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIText >()) ))) {
HXLINE(2029)						::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2030)						context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2031)						 ::flixel::addons::ui::FlxUIText t = ( ( ::flixel::addons::ui::FlxUIText)(thing) );
HXLINE(2032)						code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2033)						t->set_text(this->getText(text,context,true,code));
            					}
HXLINE(2027)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2044)					new_width = this->_loadWidth(data,null(),null(),null());
HXDLIN(2044)					goto _hx_goto_123;
            				}
            				_hx_goto_123:;
            			}
            		}
HXLINE(2048)		if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >()) ))) {
HXLINE(2050)			::Dynamic ir = thing;
HXLINE(2051)			bool _hx_tmp;
HXDLIN(2051)			if ((new_width == -1)) {
HXLINE(2051)				_hx_tmp = (new_height != -1);
            			}
            			else {
HXLINE(2051)				_hx_tmp = true;
            			}
HXDLIN(2051)			if (_hx_tmp) {
HXLINE(2053)				if ((new_width == -1)) {
HXLINE(2053)					new_width = ::flixel::addons::ui::interfaces::IResizable_obj::get_width(ir);
            				}
HXLINE(2054)				if ((new_height == -1)) {
HXLINE(2054)					new_height = ::flixel::addons::ui::interfaces::IResizable_obj::get_height(ir);
            				}
HXLINE(2055)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,new_width,new_height);
            			}
            		}
HXLINE(2059)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2061)			if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >()) ))) {
HXLINE(2063)				::Dynamic ihp = thing;
HXLINE(2064)				::cpp::VirtualArray params = null();
HXDLIN(2064)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2064)					params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2064)					{
HXLINE(2064)						int _g = 0;
HXDLIN(2064)						::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2064)						while((_g < _g1->length)){
HXLINE(2064)							 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2064)							_g = (_g + 1);
HXDLIN(2064)							bool _hx_tmp1;
HXDLIN(2064)							if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2064)								_hx_tmp1 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            							}
            							else {
HXLINE(2064)								_hx_tmp1 = false;
            							}
HXDLIN(2064)							if (_hx_tmp1) {
HXLINE(2064)								::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2064)								type = type.toLowerCase();
HXDLIN(2064)								::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2064)								 ::Dynamic value = valueStr;
HXDLIN(2064)								int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2064)								::String _hx_switch_1 = type;
            								if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2064)									::String str = ::String(valueStr);
HXDLIN(2064)									str = str.toLowerCase();
HXDLIN(2064)									bool _hx_tmp2;
HXDLIN(2064)									if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2064)										_hx_tmp2 = (str == HX_("1",31,00,00,00));
            									}
            									else {
HXLINE(2064)										_hx_tmp2 = true;
            									}
HXDLIN(2064)									if (_hx_tmp2) {
HXLINE(2064)										value = true;
            									}
            									else {
HXLINE(2064)										value = false;
            									}
HXDLIN(2064)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(2064)									value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2064)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(2064)									 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2064)									if (::hx::IsNull( return_val )) {
HXLINE(2064)										HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            									}
HXDLIN(2064)									value = return_val;
HXDLIN(2064)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(2064)									value = ::Std_obj::parseInt(valueStr);
HXDLIN(2064)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(2064)									value = ::String(valueStr);
HXDLIN(2064)									goto _hx_goto_125;
            								}
            								_hx_goto_125:;
HXDLIN(2064)								params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("value",71,7f,b8,31),value)
            									->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            							}
            						}
            					}
HXDLIN(2064)					params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2064)					{
HXLINE(2064)						int _g2 = 0;
HXDLIN(2064)						int _g3 = params->get_length();
HXDLIN(2064)						while((_g2 < _g3)){
HXLINE(2064)							_g2 = (_g2 + 1);
HXDLIN(2064)							int i = (_g2 - 1);
HXDLIN(2064)							params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            						}
            					}
            				}
HXDLIN(2064)				::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeThing,(void))

void FlxUI_obj::_alignThing( ::Xml data,::hx::Null< bool >  __o_suppressError){
            		bool suppressError = __o_suppressError.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2073__alignThing)
HXDLIN(2073)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("objects",d4,68,4f,82))) {
HXLINE(2075)			int _g = 0;
HXDLIN(2075)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("objects",d4,68,4f,82));
HXDLIN(2075)			while((_g < _g1->length)){
HXLINE(2075)				 ::Xml objectNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2075)				_g = (_g + 1);
HXLINE(2077)				::Array< ::String > objects = ::flixel::addons::ui::U_obj::xml_str(objectNode,HX_("value",71,7f,b8,31),true,HX_("",00,00,00,00)).split(HX_(",",2c,00,00,00));
HXLINE(2079)				::String axis = ::flixel::addons::ui::U_obj::xml_str(data,HX_("axis",a1,1c,79,40),true,null());
HXLINE(2080)				bool _hx_tmp;
HXDLIN(2080)				if ((axis != HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2080)					_hx_tmp = (axis != HX_("vertical",76,bc,15,6a));
            				}
            				else {
HXLINE(2080)					_hx_tmp = false;
            				}
HXDLIN(2080)				if (_hx_tmp) {
HXLINE(2082)					HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): axis must be \"horizontal\" or \"vertical\"!",a0,ea,67,82),null()));
            				}
HXLINE(2086)				Float spacing = ( (Float)(-1) );
HXLINE(2087)				if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2089)					spacing = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,null()),-1);
            				}
            				else {
HXLINE(2093)					spacing = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,null()),-1);
            				}
HXLINE(2096)				bool resize = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("resize",f4,59,7b,08),null());
HXLINE(2098)				bool grow = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("grow",13,dc,6b,44),true);
HXLINE(2099)				bool shrink = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("shrink",c9,32,61,28),true);
HXLINE(2101)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(-1,-1);
HXDLIN(2101)				point->_inPool = false;
HXDLIN(2101)				 ::flixel::math::FlxBasePoint bounds = point;
HXLINE(2103)				::String boundsError = HX_("",00,00,00,00);
HXLINE(2105)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66))) {
HXLINE(2107)					if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2108)						bounds->set_x(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("left",07,08,b0,47),null(),null()),-1));
HXLINE(2109)						bounds->set_y(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("right",dc,0b,64,e9),null(),null()),-1));
            					}
            					else {
HXLINE(2110)						if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2111)							bounds->set_x(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("top",95,66,58,00),null(),null()),-1));
HXLINE(2112)							bounds->set_y(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("bottom",eb,e6,78,65),null(),null()),-1));
            						}
            					}
            				}
HXLINE(2116)				bool _hx_tmp1;
HXDLIN(2116)				if ((bounds->x != -1)) {
HXLINE(2116)					_hx_tmp1 = (bounds->y != -1);
            				}
            				else {
HXLINE(2116)					_hx_tmp1 = false;
            				}
HXDLIN(2116)				if (_hx_tmp1) {
HXLINE(2118)					if ((bounds->y <= bounds->x)) {
HXLINE(2120)						boundsError = ((((HX_("bounds max must be > bounds min! (max=",4c,8b,2f,26) + bounds->y) + HX_(" min=",8b,de,2e,b5)) + bounds->x) + HX_(")",29,00,00,00));
            					}
            				}
            				else {
HXLINE(2125)					boundsError = HX_("missing bound!",9d,f7,06,0b);
            				}
HXLINE(2128)				if ((boundsError == HX_("",00,00,00,00))) {
HXLINE(2130)					this->_doAlign(objects,axis,spacing,resize,bounds,grow,shrink);
            				}
HXLINE(2133)				bool _hx_tmp2;
HXDLIN(2133)				bool _hx_tmp3;
HXDLIN(2133)				if (!(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)))) {
HXLINE(2133)					_hx_tmp3 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("x",78,00,00,00));
            				}
            				else {
HXLINE(2133)					_hx_tmp3 = true;
            				}
HXDLIN(2133)				if (!(_hx_tmp3)) {
HXLINE(2133)					_hx_tmp2 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("y",79,00,00,00));
            				}
            				else {
HXLINE(2133)					_hx_tmp2 = true;
            				}
HXDLIN(2133)				if (_hx_tmp2) {
HXLINE(2135)					int _g2 = 0;
HXDLIN(2135)					while((_g2 < objects->length)){
HXLINE(2135)						::String object = objects->__get(_g2);
HXDLIN(2135)						_g2 = (_g2 + 1);
HXLINE(2137)						::Dynamic thing = this->getAsset(object,null());
HXLINE(2138)						this->_loadPosition(data,thing);
            					}
            				}
            				else {
HXLINE(2143)					if ((boundsError != HX_("",00,00,00,00))) {
HXLINE(2145)						if (!(suppressError)) {
HXLINE(2147)							::flixel::FlxG_obj::log->advanced(boundsError,::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(2155)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): <objects> node not found!",e9,2b,f0,7a),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_alignThing,(void))

void FlxUI_obj::_doAlign(::Array< ::String > objects,::String axis,Float spacing,bool resize, ::flixel::math::FlxBasePoint bounds,::hx::Null< bool >  __o_allowGrow,::hx::Null< bool >  __o_allowShrink){
            		bool allowGrow = __o_allowGrow.Default(true);
            		bool allowShrink = __o_allowShrink.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2161__doAlign)
HXLINE(2162)		Float total_spacing = ( (Float)(0) );
HXLINE(2163)		Float total_size = ( (Float)(0) );
HXLINE(2165)		Float bound_range = (bounds->y - bounds->x);
HXLINE(2167)		Float spaces = ( (Float)((objects->length - 1)) );
HXLINE(2168)		Float space_size = ( (Float)(0) );
HXLINE(2169)		Float object_size = ( (Float)(0) );
HXLINE(2171)		::String size_prop = HX_("width",06,b6,62,ca);
HXLINE(2172)		::String pos_prop = HX_("x",78,00,00,00);
HXLINE(2173)		if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2175)			size_prop = HX_("height",e7,07,4c,02);
HXLINE(2176)			pos_prop = HX_("y",79,00,00,00);
            		}
HXLINE(2180)		{
HXLINE(2180)			int _g = 0;
HXDLIN(2180)			while((_g < objects->length)){
HXLINE(2180)				::String nameStr = objects->__get(_g);
HXDLIN(2180)				_g = (_g + 1);
HXLINE(2182)				::Dynamic widget = this->getAsset(nameStr,null());
HXLINE(2183)				if (::hx::IsNotNull( widget )) {
HXLINE(2185)					Float theval = ( (Float)(0) );
HXLINE(2186)					::String _hx_switch_0 = size_prop;
            					if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2188)						theval = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(widget);
HXDLIN(2188)						goto _hx_goto_132;
            					}
            					if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2187)						theval = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(widget);
HXDLIN(2187)						goto _hx_goto_132;
            					}
            					_hx_goto_132:;
HXLINE(2191)					total_size = (total_size + theval);
            				}
            			}
            		}
HXLINE(2195)		if ((resize == false)) {
HXLINE(2197)			total_spacing = (bound_range - total_size);
HXLINE(2198)			space_size = (total_spacing / spaces);
            		}
            		else {
HXLINE(2202)			space_size = spacing;
HXLINE(2203)			total_spacing = (spacing * spaces);
HXLINE(2204)			object_size = ((bound_range - total_spacing) / ( (Float)(objects->length) ));
            		}
HXLINE(2207)		object_size = ( (Float)(::Std_obj::_hx_int(object_size)) );
HXLINE(2208)		space_size = ( (Float)(::Std_obj::_hx_int(space_size)) );
HXLINE(2210)		Float last_pos = bounds->x;
HXLINE(2211)		{
HXLINE(2211)			int _g1 = 0;
HXDLIN(2211)			while((_g1 < objects->length)){
HXLINE(2211)				::String nameStr1 = objects->__get(_g1);
HXDLIN(2211)				_g1 = (_g1 + 1);
HXLINE(2213)				::Dynamic widget1 = this->getAsset(nameStr1,null());
HXLINE(2214)				if (::hx::IsNotNull( widget1 )) {
HXLINE(2215)					Float pos = last_pos;
HXLINE(2216)					if (!(resize)) {
HXLINE(2218)						::String _hx_switch_1 = size_prop;
            						if (  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2221)							object_size = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(widget1);
HXDLIN(2221)							goto _hx_goto_134;
            						}
            						if (  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2220)							object_size = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(widget1);
HXDLIN(2220)							goto _hx_goto_134;
            						}
            						_hx_goto_134:;
            					}
            					else {
HXLINE(2227)						if (::Std_obj::isOfType(widget1,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >()) ))) {
HXLINE(2229)							bool allow = true;
HXLINE(2230)							::Dynamic widgetr = widget1;
HXLINE(2231)							if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2233)								if ((object_size > ::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr))) {
HXLINE(2235)									allow = allowGrow;
            								}
            								else {
HXLINE(2237)									if ((object_size < ::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr))) {
HXLINE(2239)										allow = allowShrink;
            									}
            								}
HXLINE(2241)								if (allow) {
HXLINE(2243)									::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr),object_size);
            								}
            							}
            							else {
HXLINE(2246)								if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2248)									if ((object_size > ::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr))) {
HXLINE(2250)										allow = allowGrow;
            									}
            									else {
HXLINE(2252)										if ((object_size < ::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr))) {
HXLINE(2254)											allow = allowShrink;
            										}
            									}
HXLINE(2256)									if (allow) {
HXLINE(2258)										::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,object_size,::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr));
            									}
            								}
            							}
            						}
            					}
HXLINE(2264)					last_pos = ((pos + object_size) + space_size);
HXLINE(2266)					::String _hx_switch_2 = pos_prop;
            					if (  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(2268)						::flixel::IFlxSprite_obj::set_x(widget1,pos);
HXDLIN(2268)						goto _hx_goto_135;
            					}
            					if (  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(2269)						::flixel::IFlxSprite_obj::set_y(widget1,pos);
HXDLIN(2269)						goto _hx_goto_135;
            					}
            					_hx_goto_135:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxUI_obj,_doAlign,(void))

bool FlxUI_obj::_checkFailure( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2275__checkFailure)
HXLINE(2276)		::String target = ::flixel::addons::ui::U_obj::xml_str(data,HX_("target",51,f3,ec,86),true,null());
HXLINE(2277)		::String property = ::flixel::addons::ui::U_obj::xml_str(data,HX_("property",55,48,38,ac),true,null());
HXLINE(2278)		::String compare = ::flixel::addons::ui::U_obj::xml_str(data,HX_("compare",a5,18,69,83),true,null());
HXLINE(2279)		::String value = ::flixel::addons::ui::U_obj::xml_str(data,HX_("value",71,7f,b8,31),true,null());
HXLINE(2281)		::Dynamic thing = this->getAsset(target,null());
HXLINE(2283)		if (::hx::IsNull( thing )) {
HXLINE(2284)			return false;
            		}
HXLINE(2287)		Float prop_f = ( (Float)(0) );
HXLINE(2288)		Float val_f = ( (Float)(0) );
HXLINE(2290)		Float p = ::flixel::addons::ui::U_obj::perc_to_float(value);
HXLINE(2292)		::String _hx_switch_0 = property;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2294)			prop_f = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing);
HXDLIN(2294)			goto _hx_goto_137;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2293)			prop_f = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing);
HXDLIN(2293)			goto _hx_goto_137;
            		}
            		_hx_goto_137:;
HXLINE(2297)		if (::Math_obj::isNaN(p)) {
HXLINE(2298)			if (::flixel::addons::ui::U_obj::isStrNum(value)) {
HXLINE(2299)				val_f = ::Std_obj::parseFloat(value);
            			}
            			else {
HXLINE(2301)				return false;
            			}
            		}
            		else {
HXLINE(2304)			::String _hx_switch_1 = property;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2306)				val_f = (p * this->screenHeight());
HXDLIN(2306)				goto _hx_goto_138;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2305)				val_f = (p * ( (Float)(this->screenWidth()) ));
HXDLIN(2305)				goto _hx_goto_138;
            			}
            			_hx_goto_138:;
            		}
HXLINE(2310)		bool return_val = false;
HXLINE(2312)		::String _hx_switch_2 = compare;
            		if (  (_hx_switch_2==HX_("<",3c,00,00,00)) ){
HXLINE(2313)			if ((prop_f < val_f)) {
HXLINE(2314)				this->failed_by = (val_f - prop_f);
HXLINE(2315)				return_val = true;
            			}
HXLINE(2313)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_("<=",81,34,00,00)) ){
HXLINE(2325)			if ((prop_f <= val_f)) {
HXLINE(2326)				this->failed_by = (val_f - prop_f);
HXLINE(2327)				return_val = true;
            			}
HXLINE(2325)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_("=",3d,00,00,00)) ||  (_hx_switch_2==HX_("==",60,35,00,00)) ){
HXLINE(2321)			if ((prop_f == val_f)) {
HXLINE(2322)				this->failed_by = ::Math_obj::abs((prop_f - val_f));
HXLINE(2323)				return_val = true;
            			}
HXLINE(2321)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_(">",3e,00,00,00)) ){
HXLINE(2317)			if ((prop_f > val_f)) {
HXLINE(2318)				this->failed_by = (prop_f - val_f);
HXLINE(2319)				return_val = true;
            			}
HXLINE(2317)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_(">=",3f,36,00,00)) ){
HXLINE(2329)			if ((prop_f >= val_f)) {
HXLINE(2330)				this->failed_by = (prop_f - val_f);
HXLINE(2331)				return_val = true;
            			}
HXLINE(2329)			goto _hx_goto_139;
            		}
            		_hx_goto_139:;
HXLINE(2335)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_checkFailure,return )

void FlxUI_obj::_resizeThing(::Dynamic fo_r, ::Dynamic bounds){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2339__resizeThing)
HXLINE(2340)		bool do_resize = false;
HXLINE(2341)		Float ww = ::flixel::addons::ui::interfaces::IResizable_obj::get_width(fo_r);
HXLINE(2342)		Float hh = ::flixel::addons::ui::interfaces::IResizable_obj::get_height(fo_r);
HXLINE(2344)		if (::hx::IsLess( ww,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2345)			do_resize = true;
HXLINE(2346)			ww = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2347)			if (::hx::IsGreater( ww,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2348)				do_resize = true;
HXLINE(2349)				ww = ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) );
            			}
            		}
HXLINE(2352)		if (::hx::IsLess( hh,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2353)			do_resize = true;
HXLINE(2354)			hh = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2355)			if (::hx::IsGreater( hh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2356)				do_resize = true;
HXLINE(2357)				hh = ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) );
            			}
            		}
HXLINE(2360)		if (do_resize) {
HXLINE(2361)			::flixel::addons::ui::interfaces::IResizable_obj::resize(fo_r,ww,hh);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_resizeThing,(void))

void FlxUI_obj::_postLoadThing(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2366__postLoadThing)
HXLINE(2367)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE(2369)			if (this->_loadTest(data)) {
HXLINE(2371)				if (::hx::IsNotNull( data->firstElement() )) {
HXLINE(2373)					 ::Dynamic subNode = data->elements();
HXDLIN(2373)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2373)						 ::Xml subNode1 = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2375)						if ((subNode1->nodeType != ::Xml_obj::Element)) {
HXLINE(2375)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(subNode1->nodeType)));
            						}
HXDLIN(2375)						::String nodeType = subNode1->nodeName.toLowerCase();
HXLINE(2376)						bool _hx_tmp;
HXDLIN(2376)						if ((subNode1->nodeType != ::Xml_obj::Document)) {
HXLINE(2376)							_hx_tmp = (subNode1->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE(2376)							_hx_tmp = false;
            						}
HXDLIN(2376)						if (_hx_tmp) {
HXLINE(2376)							HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(subNode1->nodeType)));
            						}
HXDLIN(2376)						this->_postLoadThing(nodeType,subNode1);
            					}
            				}
            			}
HXLINE(2380)			return;
            		}
HXLINE(2383)		if ((this->_loadTest(data) == false)) {
HXLINE(2385)			return;
            		}
HXLINE(2388)		::String name = ::flixel::addons::ui::U_obj::xml_name(data);
HXLINE(2390)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2391)		bool isGroup = (type == HX_("group",3f,b3,f4,99));
HXLINE(2392)		if (isGroup) {
HXLINE(2394)			thing = this->getGroup(name,null());
            		}
HXLINE(2397)		if ((type == HX_("align",c5,56,91,21))) {
HXLINE(2398)			this->_alignThing(data,null());
            		}
HXLINE(2401)		if ((type == HX_("change",70,91,72,b7))) {
HXLINE(2402)			this->_changeThing(data);
            		}
HXLINE(2405)		if ((type == HX_("position",a9,a0,fa,ca))) {
HXLINE(2406)			this->_loadPosition(data,thing);
HXLINE(2407)			return;
            		}
HXLINE(2410)		if ((type == HX_("cursor",d6,8e,e8,3e))) {
HXLINE(2411)			this->_loadCursor(data);
            		}
HXLINE(2414)		bool _hx_tmp1;
HXDLIN(2414)		if (::hx::IsNull( thing )) {
HXLINE(2414)			_hx_tmp1 = !(isGroup);
            		}
            		else {
HXLINE(2414)			_hx_tmp1 = false;
            		}
HXDLIN(2414)		if (_hx_tmp1) {
HXLINE(2415)			return;
            		}
HXLINE(2418)		if (!(isGroup)) {
HXLINE(2420)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(2421)			 ::Xml definition = null();
HXLINE(2422)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(2423)				definition = this->getDefinition(use_def,null());
            			}
HXLINE(2426)			if (::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >()) ))) {
HXLINE(2428)				 ::Dynamic ww = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("width",06,b6,62,ca),null(),null()),null());
HXLINE(2429)				 ::Dynamic hh = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("height",e7,07,4c,02),null(),null()),null());
HXLINE(2430)				bool _hx_tmp2;
HXDLIN(2430)				if (::hx::IsNotEq( ww,0 )) {
HXLINE(2430)					_hx_tmp2 = ::hx::IsEq( ww,::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing) );
            				}
            				else {
HXLINE(2430)					_hx_tmp2 = true;
            				}
HXDLIN(2430)				if (_hx_tmp2) {
HXLINE(2432)					ww = null();
            				}
HXLINE(2434)				bool _hx_tmp3;
HXDLIN(2434)				if (::hx::IsNotEq( hh,0 )) {
HXLINE(2434)					_hx_tmp3 = ::hx::IsEq( hh,::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing) );
            				}
            				else {
HXLINE(2434)					_hx_tmp3 = true;
            				}
HXDLIN(2434)				if (_hx_tmp3) {
HXLINE(2436)					hh = null();
            				}
HXLINE(2439)				 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(2441)				if (::hx::IsNotNull( bounds )) {
HXLINE(2443)					if (::hx::IsNotNull( ww )) {
HXLINE(2444)						if (::hx::IsLess( ww,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2444)							ww = bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic);
            						}
HXLINE(2445)						if (::hx::IsGreater( ww,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2445)							ww = bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic);
            						}
HXLINE(2446)						bounds->__SetField(HX_("min_width",59,88,fd,ea),(bounds->__SetField(HX_("max_width",eb,9a,40,c1),ww,::hx::paccDynamic)),::hx::paccDynamic);
            					}
HXLINE(2448)					if (::hx::IsNotNull( hh )) {
HXLINE(2449)						if (::hx::IsLess( hh,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2449)							hh = bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic);
            						}
HXLINE(2450)						if (::hx::IsGreater( hh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2450)							hh = bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic);
            						}
HXLINE(2451)						bounds->__SetField(HX_("min_height",34,3e,29,69),(bounds->__SetField(HX_("max_height",62,6b,96,0d),hh,::hx::paccDynamic)),::hx::paccDynamic);
            					}
HXLINE(2454)					this->_resizeThing(thing,bounds);
            				}
            			}
HXLINE(2458)			{
HXLINE(2458)				Float Y = -(( (Float)(thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
HXDLIN(2458)				::flixel::IFlxSprite_obj::set_x(thing, ::Dynamic((thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + -(( (Float)(thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) )))));
HXDLIN(2458)				::flixel::IFlxSprite_obj::set_y(thing, ::Dynamic((thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + Y)));
            			}
HXLINE(2459)			this->_loadPosition(data,thing);
            		}
HXLINE(2462)		::String send_to = ::flixel::addons::ui::U_obj::xml_str(data,HX_("send_to",52,6b,a5,a8),true,HX_("",00,00,00,00));
HXLINE(2463)		if ((send_to != HX_("",00,00,00,00))) {
HXLINE(2465)			::String _hx_switch_0 = send_to;
            			if (  (_hx_switch_0==HX_("back",27,da,10,41)) ||  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(2467)				this->_sendTo(thing,-1);
HXDLIN(2467)				goto _hx_goto_143;
            			}
            			if (  (_hx_switch_0==HX_("front",a9,18,8e,06)) ||  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(2468)				this->_sendTo(thing,1);
HXDLIN(2468)				goto _hx_goto_143;
            			}
            			_hx_goto_143:;
            		}
HXLINE(2472)		bool _hx_tmp4;
HXDLIN(2472)		if (!(isGroup)) {
HXLINE(2472)			_hx_tmp4 = ::Std_obj::isOfType(thing,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUI >()) ));
            		}
            		else {
HXLINE(2472)			_hx_tmp4 = false;
            		}
HXDLIN(2472)		if (_hx_tmp4) {
HXLINE(2474)			 ::flixel::addons::ui::FlxUI fui_thing = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE(2475)			if ((fui_thing->_postLoaded == false)) {
HXLINE(2477)				fui_thing->getEvent(HX_("post_load",a5,55,d0,20),::hx::ObjectPtr<OBJ_>(this),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_postLoadThing,(void))

 ::flixel::addons::ui::FlxUITileTest FlxUI_obj::_loadTileTest( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2483__loadTileTest)
HXLINE(2484)		int tiles_w = ::flixel::addons::ui::U_obj::xml_i(data,HX_("tiles_w",fd,7b,93,45),2);
HXLINE(2485)		int tiles_h = ::flixel::addons::ui::U_obj::xml_i(data,HX_("tiles_h",ee,7b,93,45),2);
HXLINE(2486)		Float w = this->_loadWidth(data,null(),null(),null());
HXLINE(2487)		Float h = this->_loadHeight(data,null(),null(),null());
HXLINE(2489)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(2492)		if (::hx::IsLess( w,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2492)			w = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) );
            		}
HXLINE(2493)		if (::hx::IsLess( h,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2493)			h = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) );
            		}
HXLINE(2495)		int tileWidth = ::Std_obj::_hx_int((w / ( (Float)(tiles_w) )));
HXLINE(2496)		int tileHeight = ::Std_obj::_hx_int((h / ( (Float)(tiles_h) )));
HXLINE(2498)		if ((tileWidth < tileHeight)) {
HXLINE(2498)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2499)			if ((tileHeight < tileWidth)) {
HXLINE(2499)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2501)		Float totalw = ( (Float)((tileWidth * tiles_w)) );
HXLINE(2502)		Float totalh = ( (Float)((tileHeight * tiles_h)) );
HXLINE(2504)		if (::hx::IsGreater( totalw,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2504)			tileWidth = ::Std_obj::_hx_int((( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ) / ( (Float)(tiles_w) )));
            		}
HXLINE(2505)		if (::hx::IsGreater( totalh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2505)			tileHeight = ::Std_obj::_hx_int((( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ) / ( (Float)(tiles_h) )));
            		}
HXLINE(2507)		if ((tileWidth < tileHeight)) {
HXLINE(2507)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2508)			if ((tileHeight < tileWidth)) {
HXLINE(2508)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2510)		if ((tileWidth < 2)) {
HXLINE(2510)			tileWidth = 2;
            		}
HXLINE(2511)		if ((tileHeight < 2)) {
HXLINE(2511)			tileHeight = 2;
            		}
HXLINE(2513)		int color1 = ( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data,HX_("color1",6e,c5,86,c6),true,HX_("0x808080",30,ad,e5,63)))) );
HXLINE(2514)		int color2 = ( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data,HX_("color2",6f,c5,86,c6),true,HX_("0xc4c4c4",5b,de,47,ff)))) );
HXLINE(2516)		int baseTileSize = ::flixel::addons::ui::U_obj::xml_i(data,HX_("base_tile_size",c4,2d,3d,a8),-1);
HXLINE(2517)		bool floorToEven = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("floor_to_even",eb,3e,ec,20),false);
HXLINE(2519)		 ::flixel::addons::ui::FlxUITileTest ftt =  ::flixel::addons::ui::FlxUITileTest_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),tileWidth,tileHeight,tiles_w,tiles_h,color1,color2,floorToEven);
HXLINE(2520)		ftt->baseTileSize = baseTileSize;
HXLINE(2521)		return ftt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileTest,return )

::String FlxUI_obj::_loadString( ::Xml data,::String attributeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2525__loadString)
HXLINE(2526)		::String string = ::flixel::addons::ui::U_obj::xml_str(data,attributeName,null(),null());
HXLINE(2527)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2528)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2529)		string = this->getText(string,context,true,code);
HXLINE(2530)		return string;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadString,return )

::Dynamic FlxUI_obj::_loadText( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2534__loadText)
HXLINE(2535)		::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2536)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2537)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2538)		text = this->getText(text,context,true,code);
HXLINE(2540)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,100,null(),null()));
HXLINE(2541)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(2543)		::String the_font = this->_loadFontFace(data);
HXLINE(2545)		bool input = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("input",0a,c4,1d,be),null());
HXLINE(2546)		if (input) {
HXLINE(2548)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadText(): <text> with input has been deprecated. Use <input_text> instead.",96,71,67,6a),null()));
            		}
HXLINE(2551)		::String align = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXDLIN(2551)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2551)			align = null();
            		}
HXLINE(2552)		int size = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(2554)		int color = this->_loadColor(data,null(),null());
HXLINE(2556)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(2559)		 ::flixel::addons::ui::FlxUIText ftu =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,0,0,W,text,size,null());
HXLINE(2560)		ftu->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2561)		border->apply(ftu);
HXLINE(2562)		ftu->drawFrame(null());
HXLINE(2558)		::Dynamic ft = ftu;
HXLINE(2565)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2566)			::cpp::VirtualArray params = null();
HXDLIN(2566)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2566)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2566)				{
HXLINE(2566)					int _g = 0;
HXDLIN(2566)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2566)					while((_g < _g1->length)){
HXLINE(2566)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2566)						_g = (_g + 1);
HXDLIN(2566)						bool _hx_tmp;
HXDLIN(2566)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2566)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2566)							_hx_tmp = false;
            						}
HXDLIN(2566)						if (_hx_tmp) {
HXLINE(2566)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2566)							type = type.toLowerCase();
HXDLIN(2566)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2566)							 ::Dynamic value = valueStr;
HXDLIN(2566)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2566)							::String _hx_switch_0 = type;
            							if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2566)								::String str = ::String(valueStr);
HXDLIN(2566)								str = str.toLowerCase();
HXDLIN(2566)								bool _hx_tmp1;
HXDLIN(2566)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2566)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2566)									_hx_tmp1 = true;
            								}
HXDLIN(2566)								if (_hx_tmp1) {
HXLINE(2566)									value = true;
            								}
            								else {
HXLINE(2566)									value = false;
            								}
HXDLIN(2566)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2566)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2566)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2566)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2566)								if (::hx::IsNull( return_val )) {
HXLINE(2566)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(2566)								value = return_val;
HXDLIN(2566)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2566)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2566)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2566)								value = ::String(valueStr);
HXDLIN(2566)								goto _hx_goto_148;
            							}
            							_hx_goto_148:;
HXDLIN(2566)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2566)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2566)				{
HXLINE(2566)					int _g2 = 0;
HXDLIN(2566)					int _g3 = params->get_length();
HXDLIN(2566)					while((_g2 < _g3)){
HXLINE(2566)						_g2 = (_g2 + 1);
HXDLIN(2566)						int i = (_g2 - 1);
HXDLIN(2566)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(2566)			::cpp::VirtualArray params1 = params;
HXLINE(2567)			::Dynamic ihp = ft;
HXLINE(2568)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params1);
            		}
HXLINE(2571)		bool _hx_tmp2;
HXDLIN(2571)		if ((H > 0)) {
HXLINE(2571)			_hx_tmp2 = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(ft) != H);
            		}
            		else {
HXLINE(2571)			_hx_tmp2 = false;
            		}
HXDLIN(2571)		if (_hx_tmp2) {
HXLINE(2573)			if (::Std_obj::isOfType(ft,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >()) ))) {
HXLINE(2575)				::Dynamic r = ft;
HXLINE(2576)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,::flixel::addons::ui::interfaces::IResizable_obj::get_width(r),H);
            			}
            		}
HXLINE(2581)		ftu->set_text(HX_(" ",20,00,00,00));
HXLINE(2582)		ftu->set_text(text);
HXLINE(2584)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadText,return )

::Dynamic FlxUI_obj::_loadInputText( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2588__loadInputText)
HXLINE(2589)		::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2590)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2591)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2592)		text = this->getText(text,context,true,code);
HXLINE(2594)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,100,null(),null()));
HXLINE(2595)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(2597)		::String the_font = this->_loadFontFace(data);
HXLINE(2599)		::String align = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXDLIN(2599)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2599)			align = null();
            		}
HXLINE(2600)		int size = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),null()));
HXLINE(2601)		int color = this->_loadColor(data,null(),null());
HXLINE(2603)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(2605)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("background",ee,93,1d,26),true,HX_("0x00000000",48,5a,d7,68));
HXDLIN(2605)		 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN(2605)		if (::hx::IsNull( return_val )) {
HXLINE(2605)			return_val = 0;
            		}
HXDLIN(2605)		int backgroundColor = ( (int)(return_val) );
HXLINE(2606)		bool passwordMode = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("password_mode",47,aa,e5,09),null());
HXLINE(2609)		 ::flixel::addons::ui::FlxUIInputText fti =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,0,0,W,text,size,color,backgroundColor,null());
HXLINE(2610)		fti->set_passwordMode(passwordMode);
HXLINE(2612)		::String force_case = ::flixel::addons::ui::U_obj::xml_str(data,HX_("force_case",c4,b4,72,f8),true,HX_("",00,00,00,00));
HXLINE(2613)		int forceCase;
HXLINE(2614)		::String _hx_switch_0 = force_case;
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(2619)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (force_case attribute).",30,f9,74,27),null()));
HXDLIN(2619)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_0==HX_("lower",01,fa,ff,78)) ||  (_hx_switch_0==HX_("lower_case",ee,5c,fc,1d)) ||  (_hx_switch_0==HX_("lowercase",31,ad,a5,66)) ){
HXLINE(2617)			forceCase = 2;
HXDLIN(2617)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_0==HX_("upper",62,19,3f,a8)) ||  (_hx_switch_0==HX_("upper_case",ed,dd,2a,23)) ||  (_hx_switch_0==HX_("uppercase",12,91,3e,e7)) ){
HXLINE(2616)			forceCase = 1;
HXDLIN(2616)			goto _hx_goto_151;
            		}
            		/* default */{
HXLINE(2620)			forceCase = 0;
            		}
            		_hx_goto_151:;
HXLINE(2623)		::String filter = ::flixel::addons::ui::U_obj::xml_str(data,HX_("filter",b8,1f,35,85),true,HX_("",00,00,00,00));
HXLINE(2624)		int filterMode;
HXLINE(2625)		while((filter.indexOf(HX_("_",5f,00,00,00),null()) != -1)){
HXLINE(2627)			filter = ::StringTools_obj::replace(filter,HX_("_",5f,00,00,00),HX_("",00,00,00,00));
            		}
HXLINE(2630)		::String _hx_switch_1 = filter;
            		if (  (_hx_switch_1==HX_("a",61,00,00,00)) ||  (_hx_switch_1==HX_("an",ed,54,00,00)) ||  (_hx_switch_1==HX_("n",6e,00,00,00)) ){
HXLINE(2636)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (filter attribute).",a4,a0,22,50),null()));
HXDLIN(2636)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("alpha",5e,a7,96,21)) ||  (_hx_switch_1==HX_("onlyalpha",72,fa,2c,18)) ){
HXLINE(2632)			filterMode = 1;
HXDLIN(2632)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("alphanum",a8,a5,41,21)) ||  (_hx_switch_1==HX_("alphanumeric",2f,03,e3,71)) ||  (_hx_switch_1==HX_("onlyalphanumeric",9b,fa,fd,ec)) ){
HXLINE(2634)			filterMode = 3;
HXDLIN(2634)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("num",46,de,53,00)) ||  (_hx_switch_1==HX_("numeric",cd,e2,c0,ab)) ||  (_hx_switch_1==HX_("onlynumeric",e1,22,e1,32)) ){
HXLINE(2633)			filterMode = 2;
HXDLIN(2633)			goto _hx_goto_153;
            		}
            		/* default */{
HXLINE(2637)			filterMode = 0;
            		}
            		_hx_goto_153:;
HXLINE(2640)		fti->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2641)		fti->set_forceCase(forceCase);
HXLINE(2642)		fti->set_filterMode(filterMode);
HXLINE(2643)		border->apply(fti);
HXLINE(2644)		fti->drawFrame(null());
HXLINE(2608)		::Dynamic ft = fti;
HXLINE(2647)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2649)			::cpp::VirtualArray params = null();
HXDLIN(2649)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2649)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2649)				{
HXLINE(2649)					int _g = 0;
HXDLIN(2649)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2649)					while((_g < _g1->length)){
HXLINE(2649)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2649)						_g = (_g + 1);
HXDLIN(2649)						bool _hx_tmp;
HXDLIN(2649)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2649)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2649)							_hx_tmp = false;
            						}
HXDLIN(2649)						if (_hx_tmp) {
HXLINE(2649)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2649)							type = type.toLowerCase();
HXDLIN(2649)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2649)							 ::Dynamic value = valueStr;
HXDLIN(2649)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2649)							::String _hx_switch_2 = type;
            							if (  (_hx_switch_2==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_2==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2649)								::String str1 = ::String(valueStr);
HXDLIN(2649)								str1 = str1.toLowerCase();
HXDLIN(2649)								bool _hx_tmp1;
HXDLIN(2649)								if ((str1 != HX_("true",4e,a7,03,4d))) {
HXLINE(2649)									_hx_tmp1 = (str1 == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2649)									_hx_tmp1 = true;
            								}
HXDLIN(2649)								if (_hx_tmp1) {
HXLINE(2649)									value = true;
            								}
            								else {
HXLINE(2649)									value = false;
            								}
HXDLIN(2649)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("float",9c,c5,96,02)) ){
HXLINE(2649)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2649)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("color",63,71,5c,4a)) ||  (_hx_switch_2==HX_("hex",db,42,4f,00)) ){
HXLINE(2649)								 ::Dynamic return_val1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2649)								if (::hx::IsNull( return_val1 )) {
HXLINE(2649)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(2649)								value = return_val1;
HXDLIN(2649)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("int",ef,0c,50,00)) ){
HXLINE(2649)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2649)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("string",d1,28,30,11)) ){
HXLINE(2649)								value = ::String(valueStr);
HXDLIN(2649)								goto _hx_goto_155;
            							}
            							_hx_goto_155:;
HXDLIN(2649)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2649)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2649)				{
HXLINE(2649)					int _g2 = 0;
HXDLIN(2649)					int _g3 = params->get_length();
HXDLIN(2649)					while((_g2 < _g3)){
HXLINE(2649)						_g2 = (_g2 + 1);
HXDLIN(2649)						int i = (_g2 - 1);
HXDLIN(2649)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(2649)			::cpp::VirtualArray params1 = params;
HXLINE(2650)			::Dynamic ihp = ft;
HXLINE(2651)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params1);
            		}
HXLINE(2654)		bool _hx_tmp2;
HXDLIN(2654)		if ((H > 0)) {
HXLINE(2654)			_hx_tmp2 = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(ft) != H);
            		}
            		else {
HXLINE(2654)			_hx_tmp2 = false;
            		}
HXDLIN(2654)		if (_hx_tmp2) {
HXLINE(2656)			if (::Std_obj::isOfType(ft,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >()) ))) {
HXLINE(2658)				::Dynamic r = ft;
HXLINE(2659)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,::flixel::addons::ui::interfaces::IResizable_obj::get_width(r),H);
            			}
            		}
HXLINE(2663)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadInputText,return )

 ::flixel::addons::ui::FlxUIRadioGroup FlxUI_obj::_loadRadioGroup( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2743__loadRadioGroup)
HXLINE(2744)		 ::flixel::addons::ui::FlxUIRadioGroup frg = null();
HXLINE(2746)		::String dot_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("dot_src",ee,a6,9d,a9),true,null());
HXLINE(2747)		::String radio_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("radio_src",60,96,16,fe),true,null());
HXLINE(2749)		::Array< ::String > labels = ::Array_obj< ::String >::__new();
HXLINE(2750)		::Array< ::String > names = ::Array_obj< ::String >::__new();
HXLINE(2752)		int W = ( (int)(this->_loadWidth(data,11,HX_("radio_width",82,7c,59,e9),null())) );
HXLINE(2753)		int H = ( (int)(this->_loadHeight(data,11,HX_("radio_height",eb,ed,42,fb),null())) );
HXLINE(2755)		int scrollH = ( (int)(this->_loadHeight(data,0,HX_("height",e7,07,4c,02),null())) );
HXLINE(2756)		int scrollW = ( (int)(this->_loadHeight(data,0,HX_("width",06,b6,62,ca),null())) );
HXLINE(2758)		int labelW = ( (int)(this->_loadWidth(data,100,HX_("label_width",3b,fa,b5,dc),null())) );
HXLINE(2760)		{
HXLINE(2760)			int _g = 0;
HXDLIN(2760)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("radio",fb,10,18,e4));
HXDLIN(2760)			while((_g < _g1->length)){
HXLINE(2760)				 ::Xml radioNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2760)				_g = (_g + 1);
HXLINE(2762)				::String name = ::flixel::addons::ui::U_obj::xml_name(radioNode);
HXLINE(2763)				::String label = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2765)				::String context = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2766)				::String code = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2767)				label = this->getText(label,context,true,code);
HXLINE(2769)				names->push(name);
HXLINE(2770)				labels->push(label);
            			}
            		}
HXLINE(2773)		names->reverse();
HXLINE(2774)		labels->reverse();
HXLINE(2776)		Float y_space = this->_loadHeight(data,25,HX_("y_space",40,f5,f2,24),null());
HXLINE(2778)		::cpp::VirtualArray params = null();
HXDLIN(2778)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2778)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2778)			{
HXLINE(2778)				int _g2 = 0;
HXDLIN(2778)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2778)				while((_g2 < _g3->length)){
HXLINE(2778)					 ::Xml param = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(2778)					_g2 = (_g2 + 1);
HXDLIN(2778)					bool _hx_tmp;
HXDLIN(2778)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2778)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2778)						_hx_tmp = false;
            					}
HXDLIN(2778)					if (_hx_tmp) {
HXLINE(2778)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2778)						type = type.toLowerCase();
HXDLIN(2778)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2778)						 ::Dynamic value = valueStr;
HXDLIN(2778)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2778)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2778)							::String str = ::String(valueStr);
HXDLIN(2778)							str = str.toLowerCase();
HXDLIN(2778)							bool _hx_tmp1;
HXDLIN(2778)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2778)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2778)								_hx_tmp1 = true;
            							}
HXDLIN(2778)							if (_hx_tmp1) {
HXLINE(2778)								value = true;
            							}
            							else {
HXLINE(2778)								value = false;
            							}
HXDLIN(2778)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2778)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2778)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2778)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2778)							if (::hx::IsNull( return_val )) {
HXLINE(2778)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2778)							value = return_val;
HXDLIN(2778)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2778)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2778)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2778)							value = ::String(valueStr);
HXDLIN(2778)							goto _hx_goto_160;
            						}
            						_hx_goto_160:;
HXDLIN(2778)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2778)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2778)			{
HXLINE(2778)				int _g4 = 0;
HXDLIN(2778)				int _g5 = params->get_length();
HXDLIN(2778)				while((_g4 < _g5)){
HXLINE(2778)					_g4 = (_g4 + 1);
HXDLIN(2778)					int i = (_g4 - 1);
HXDLIN(2778)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(2778)		::cpp::VirtualArray params1 = params;
HXLINE(2787)		 ::Dynamic radio_asset = null();
HXLINE(2788)		if ((radio_src != HX_("",00,00,00,00))) {
HXLINE(2790)			radio_asset = ::flixel::addons::ui::U_obj::gfx(radio_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2792)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00))) {
HXLINE(2795)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2798)					radio_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(2803)					radio_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(2807)		 ::Dynamic dot_asset = null();
HXLINE(2808)		if ((dot_src != HX_("",00,00,00,00))) {
HXLINE(2810)			dot_asset = ::flixel::addons::ui::U_obj::gfx(dot_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2812)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00))) {
HXLINE(2815)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2818)					dot_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)),null());
            				}
            				else {
HXLINE(2823)					dot_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)));
            				}
            			}
            		}
HXLINE(2830)		 ::flixel::math::FlxBasePoint prevOffset = null();
HXLINE(2831)		 ::flixel::math::FlxBasePoint nextOffset = null();
HXLINE(2833)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("button",f2,61,e0,d9))) {
HXLINE(2835)			int _g6 = 0;
HXDLIN(2835)			::Array< ::Dynamic> _g7 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("button",f2,61,e0,d9));
HXDLIN(2835)			while((_g6 < _g7->length)){
HXLINE(2835)				 ::Xml btnNode = _g7->__get(_g6).StaticCast<  ::Xml >();
HXDLIN(2835)				_g6 = (_g6 + 1);
HXLINE(2837)				::String name1 = ::flixel::addons::ui::U_obj::xml_name(btnNode);
HXLINE(2838)				bool _hx_tmp2;
HXDLIN(2838)				if ((name1 != HX_("previous",37,bc,b0,23))) {
HXLINE(2838)					_hx_tmp2 = (name1 == HX_("prev",f3,be,5e,4a));
            				}
            				else {
HXLINE(2838)					_hx_tmp2 = true;
            				}
HXDLIN(2838)				if (_hx_tmp2) {
HXLINE(2840)					Float x = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("x",78,00,00,00),null());
HXDLIN(2840)					Float y = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("y",79,00,00,00),null());
HXDLIN(2840)					 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN(2840)					point->_inPool = false;
HXDLIN(2840)					prevOffset = point;
            				}
            				else {
HXLINE(2842)					if ((name1 == HX_("next",f3,84,02,49))) {
HXLINE(2844)						Float x1 = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("x",78,00,00,00),null());
HXDLIN(2844)						Float y1 = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("y",79,00,00,00),null());
HXDLIN(2844)						 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN(2844)						point1->_inPool = false;
HXDLIN(2844)						nextOffset = point1;
            					}
            				}
            			}
            		}
HXLINE(2849)		frg =  ::flixel::addons::ui::FlxUIRadioGroup_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),names,labels,null(),y_space,W,H,labelW,null(),prevOffset,nextOffset,null(),null());
HXLINE(2850)		frg->set_params(params1);
HXLINE(2852)		bool _hx_tmp3;
HXDLIN(2852)		if (::hx::IsNotEq( radio_asset,HX_("",00,00,00,00) )) {
HXLINE(2852)			_hx_tmp3 = ::hx::IsNotNull( radio_asset );
            		}
            		else {
HXLINE(2852)			_hx_tmp3 = false;
            		}
HXDLIN(2852)		if (_hx_tmp3) {
HXLINE(2854)			frg->loadGraphics(radio_asset,dot_asset);
            		}
HXLINE(2857)		int text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
HXLINE(2858)		int text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
HXLINE(2860)		::Array< ::Dynamic> radios = frg->getRadios();
HXLINE(2861)		int i1 = 0;
HXLINE(2862)		bool styleSet = false;
HXLINE(2864)		 ::Dynamic radioList = data->elementsNamed(HX_("radio",fb,10,18,e4));
HXLINE(2865)		 ::Xml radioNode1 = null();
HXLINE(2867)		{
HXLINE(2867)			int _g8 = 0;
HXDLIN(2867)			int _g9 = radios->length;
HXDLIN(2867)			while((_g8 < _g9)){
HXLINE(2867)				_g8 = (_g8 + 1);
HXDLIN(2867)				int k = (_g8 - 1);
HXLINE(2869)				 ::flixel::addons::ui::FlxUICheckBox fo = radios->__get(((radios->length - 1) - k)).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXLINE(2870)				if (( (bool)(radioList->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(2870)					radioNode1 = ( ( ::Xml)(radioList->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
            				}
            				else {
HXLINE(2870)					radioNode1 = null();
            				}
HXLINE(2871)				if (::hx::IsNotNull( fo )) {
HXLINE(2873)					if (::Std_obj::isOfType(fo,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >()) ))) {
HXLINE(2875)						 ::flixel::addons::ui::FlxUICheckBox fc = fo;
HXLINE(2876)						 ::flixel::text::FlxText t = this->formatButtonText(data,fc);
HXLINE(2877)						bool _hx_tmp4;
HXDLIN(2877)						if (::hx::IsNotNull( t )) {
HXLINE(2877)							_hx_tmp4 = (styleSet == false);
            						}
            						else {
HXLINE(2877)							_hx_tmp4 = false;
            						}
HXDLIN(2877)						if (_hx_tmp4) {
HXLINE(2879)							 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::copyFromFlxText(t);
HXLINE(2880)							 ::flixel::addons::ui::BorderDef bd =  ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,t->borderStyle,t->borderColor,t->borderSize,t->borderQuality);
HXLINE(2881)							::String _hx_tmp5 = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(t->_defaultFormat->align);
HXDLIN(2881)							frg->set_activeStyle( ::flixel::addons::ui::CheckStyle_obj::__alloc( HX_CTX ,16777215,fd,_hx_tmp5,t->color,bd));
HXLINE(2882)							styleSet = true;
            						}
HXLINE(2884)						fc->set_textX(( (Float)(text_x) ));
HXLINE(2885)						fc->set_textY(( (Float)(text_y) ));
HXLINE(2886)						i1 = (i1 + 1);
HXLINE(2887)						if (::hx::IsNotNull( radioNode1 )) {
HXLINE(2889)							bool _hx_tmp6;
HXDLIN(2889)							if ((radioNode1->nodeType != ::Xml_obj::Document)) {
HXLINE(2889)								_hx_tmp6 = (radioNode1->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE(2889)								_hx_tmp6 = false;
            							}
HXDLIN(2889)							if (_hx_tmp6) {
HXLINE(2889)								HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(radioNode1->nodeType)));
            							}
HXDLIN(2889)							this->_loadTooltip(fc,radioNode1);
            						}
            					}
            				}
            			}
            		}
HXLINE(2895)		if ((scrollW != 0)) {
HXLINE(2897)			frg->fixedSize = true;
HXLINE(2898)			frg->set_width(( (Float)(scrollW) ));
            		}
HXLINE(2900)		if ((scrollH != 0)) {
HXLINE(2902)			frg->fixedSize = true;
HXLINE(2903)			frg->set_height(( (Float)(scrollH) ));
            		}
HXLINE(2906)		return frg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRadioGroup,return )

 ::flixel::addons::ui::FlxUICheckBox FlxUI_obj::_loadCheckBox( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2910__loadCheckBox)
HXLINE(2911)		 ::flixel::addons::ui::FlxUICheckBox fc = null();
HXLINE(2913)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2914)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2915)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2917)		bool checked = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("checked",27,b3,24,13),false);
HXLINE(2919)		label = this->getText(label,context,true,code);
HXLINE(2921)		int labelW = ( (int)(this->_loadWidth(data,100,HX_("label_width",3b,fa,b5,dc),null())) );
HXLINE(2923)		::String check_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("check_src",ad,88,29,a8),true,null());
HXLINE(2924)		::String box_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("box_src",70,0b,0d,a4),true,null());
HXLINE(2926)		::cpp::VirtualArray params = null();
HXDLIN(2926)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2926)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2926)			{
HXLINE(2926)				int _g = 0;
HXDLIN(2926)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2926)				while((_g < _g1->length)){
HXLINE(2926)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2926)					_g = (_g + 1);
HXDLIN(2926)					bool _hx_tmp;
HXDLIN(2926)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2926)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2926)						_hx_tmp = false;
            					}
HXDLIN(2926)					if (_hx_tmp) {
HXLINE(2926)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2926)						type = type.toLowerCase();
HXDLIN(2926)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2926)						 ::Dynamic value = valueStr;
HXDLIN(2926)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2926)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2926)							::String str = ::String(valueStr);
HXDLIN(2926)							str = str.toLowerCase();
HXDLIN(2926)							bool _hx_tmp1;
HXDLIN(2926)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2926)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2926)								_hx_tmp1 = true;
            							}
HXDLIN(2926)							if (_hx_tmp1) {
HXLINE(2926)								value = true;
            							}
            							else {
HXLINE(2926)								value = false;
            							}
HXDLIN(2926)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2926)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2926)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2926)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2926)							if (::hx::IsNull( return_val )) {
HXLINE(2926)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2926)							value = return_val;
HXDLIN(2926)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2926)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2926)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2926)							value = ::String(valueStr);
HXDLIN(2926)							goto _hx_goto_166;
            						}
            						_hx_goto_166:;
HXDLIN(2926)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2926)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2926)			{
HXLINE(2926)				int _g2 = 0;
HXDLIN(2926)				int _g3 = params->get_length();
HXDLIN(2926)				while((_g2 < _g3)){
HXLINE(2926)					_g2 = (_g2 + 1);
HXDLIN(2926)					int i = (_g2 - 1);
HXDLIN(2926)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(2926)		::cpp::VirtualArray params1 = params;
HXLINE(2928)		 ::Dynamic box_asset = null();
HXLINE(2929)		 ::Dynamic check_asset = null();
HXLINE(2937)		if ((box_src != HX_("",00,00,00,00))) {
HXLINE(2940)			box_asset = ::flixel::addons::ui::U_obj::gfx(box_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2942)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00))) {
HXLINE(2945)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2948)					box_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(2953)					box_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(2957)		if ((check_src != HX_("",00,00,00,00))) {
HXLINE(2960)			check_asset = ::flixel::addons::ui::U_obj::gfx(check_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2962)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45))) {
HXLINE(2965)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2968)					check_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)),null());
            				}
            				else {
HXLINE(2973)					check_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)));
            				}
            			}
            		}
HXLINE(2977)		fc =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,0,0,box_asset,check_asset,label,labelW,params1,null());
HXLINE(2978)		this->formatButtonText(data,fc);
HXLINE(2980)		int text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
HXLINE(2981)		int text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
HXLINE(2983)		fc->set_textX(( (Float)(text_x) ));
HXLINE(2984)		fc->set_textY(( (Float)(text_y) ));
HXLINE(2986)		fc->set_text(label);
HXLINE(2988)		fc->set_checked(checked);
HXLINE(2990)		return fc;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCheckBox,return )

 ::flixel::addons::ui::FlxUIDropDownMenu FlxUI_obj::_loadDropDownMenu( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2995__loadDropDownMenu)
HXLINE(3019)		 ::flixel::addons::ui::FlxUIDropDownMenu fud = null();
HXLINE(3021)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3022)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3023)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3024)		label = this->getText(label,context,true,code);
HXLINE(3026)		::String back_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_def",6d,f8,3d,17),true,null());
HXLINE(3027)		::String panel_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("panel_def",ca,cb,5d,a4),true,null());
HXLINE(3028)		::String button_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("button_def",b8,c1,34,be),true,null());
HXLINE(3029)		::String label_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label_def",ba,96,96,65),true,null());
HXLINE(3031)		 ::flixel::FlxSprite back_asset = null();
HXLINE(3032)		 ::flixel::addons::ui::FlxUI9SliceSprite panel_asset = null();
HXLINE(3033)		 ::flixel::addons::ui::FlxUISpriteButton button_asset = null();
HXLINE(3034)		 ::flixel::addons::ui::FlxUIText label_asset = null();
HXLINE(3036)		if ((back_def != HX_("",00,00,00,00))) {
HXLINE(3037)			back_asset = this->_loadSprite(this->getDefinition(back_def,null()));
            		}
HXLINE(3040)		if ((panel_def != HX_("",00,00,00,00))) {
HXLINE(3041)			panel_asset = this->_load9SliceSprite(this->getDefinition(panel_def,null()),null());
            		}
HXLINE(3044)		if ((button_def != HX_("",00,00,00,00))) {
HXLINE(3045)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3046)				button_asset = ( ( ::flixel::addons::ui::FlxUISpriteButton)(this->_loadButton(this->getDefinition(button_def,null()),false,false,null())) );
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error e = _hx_e;
HXLINE(3048)					::flixel::FlxG_obj::log->advanced(((HX_("couldn't loadButton with definition \"",2d,5f,ac,2b) + button_def) + HX_("\"",22,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
HXLINE(3049)					button_asset = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(3053)		if ((label_def != HX_("",00,00,00,00))) {
HXLINE(3054)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3055)				label_asset = ( ( ::flixel::addons::ui::FlxUIText)(this->_loadText(this->getDefinition(label_def,null()))) );
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error e1 = _hx_e;
HXLINE(3057)					::flixel::FlxG_obj::log->advanced(((HX_("couldn't loadText with definition \"",a8,f1,da,63) + label_def) + HX_("\"",22,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
HXLINE(3058)					label_asset = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(3060)			bool _hx_tmp;
HXDLIN(3060)			if (::hx::IsNotNull( label_asset )) {
HXLINE(3060)				_hx_tmp = (label != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(3060)				_hx_tmp = false;
            			}
HXDLIN(3060)			if (_hx_tmp) {
HXLINE(3061)				label_asset->set_text(label);
            			}
            		}
HXLINE(3065)		::Array< ::Dynamic> asset_list = null();
HXLINE(3066)		::Array< ::Dynamic> data_list = null();
HXLINE(3068)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("data",2a,56,63,42))) {
HXLINE(3069)			int _g = 0;
HXDLIN(3069)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("data",2a,56,63,42));
HXDLIN(3069)			while((_g < _g1->length)){
HXLINE(3069)				 ::Xml dataNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3069)				_g = (_g + 1);
HXLINE(3070)				if (::hx::IsNull( data_list )) {
HXLINE(3071)					data_list = ::Array_obj< ::Dynamic>::__new();
            				}
HXLINE(3073)				::String namel = ::flixel::addons::ui::U_obj::xml_str(dataNode,HX_("name",4b,72,ff,48),true,null());
HXDLIN(3073)				 ::flixel::addons::ui::StrNameLabel namel1 =  ::flixel::addons::ui::StrNameLabel_obj::__alloc( HX_CTX ,namel,::flixel::addons::ui::U_obj::xml_str(dataNode,HX_("label",f4,0d,af,6f),null(),null()));
HXLINE(3074)				data_list->push(namel1);
            			}
            		}
            		else {
HXLINE(3076)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("asset",f0,69,39,26))) {
HXLINE(3077)				int _g2 = 0;
HXDLIN(3077)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("asset",f0,69,39,26));
HXDLIN(3077)				while((_g2 < _g3->length)){
HXLINE(3077)					 ::Xml assetNode = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(3077)					_g2 = (_g2 + 1);
HXLINE(3078)					if (::hx::IsNull( asset_list )) {
HXLINE(3079)						asset_list = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE(3081)					::String def_name = ::flixel::addons::ui::U_obj::xml_str(assetNode,HX_("def",c5,39,4c,00),true,null());
HXLINE(3082)					::String name = ::flixel::addons::ui::U_obj::xml_name(assetNode);
HXLINE(3083)					 ::flixel::addons::ui::FlxUIButton asset = null();
HXLINE(3085)					try {
            						HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3086)						asset = ( ( ::flixel::addons::ui::FlxUIButton)(this->_loadButton(this->getDefinition(def_name,null()),false,null(),null())) );
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::openfl::errors::Error e2 = _hx_e;
HXLINE(3088)							::flixel::FlxG_obj::log->advanced(((HX_("couldn't loadButton with definition \"",2d,5f,ac,2b) + def_name) + HX_("\"",22,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE(3091)					if (::hx::IsNotNull( asset )) {
HXLINE(3092)						asset->name = name;
HXLINE(3093)						if (::hx::IsNull( asset_list )) {
HXLINE(3094)							asset_list = ::Array_obj< ::Dynamic>::__new();
            						}
HXLINE(3096)						asset_list->push(asset);
            					}
            				}
            			}
            		}
HXLINE(3101)		 ::flixel::addons::ui::FlxUIDropDownHeader header =  ::flixel::addons::ui::FlxUIDropDownHeader_obj::__alloc( HX_CTX ,120,back_asset,label_asset,button_asset);
HXLINE(3102)		fud =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,0,0,data_list,null(),header,panel_asset,asset_list,null());
HXLINE(3104)		return fud;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadDropDownMenu,return )

bool FlxUI_obj::_loadTest( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3107__loadTest)
HXLINE(3108)		bool result = true;
HXLINE(3111)		::String _hx_tmp;
HXDLIN(3111)		if ((data->nodeType == ::Xml_obj::Document)) {
HXLINE(3111)			_hx_tmp = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE(3111)			if ((data->nodeType != ::Xml_obj::Element)) {
HXLINE(3111)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(data->nodeType)));
            			}
HXDLIN(3111)			_hx_tmp = data->nodeName;
            		}
HXDLIN(3111)		if ((_hx_tmp == HX_("load_if",96,33,eb,08))) {
HXLINE(3113)			result = this->_loadTestSub(data);
HXLINE(3114)			if ((result == false)) {
HXLINE(3116)				return false;
            			}
            		}
HXLINE(3121)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("load_if",96,33,eb,08))) {
HXLINE(3140)			int _g = 0;
HXDLIN(3140)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("load_if",96,33,eb,08));
HXDLIN(3140)			while((_g < _g1->length)){
HXLINE(3140)				 ::Xml node = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3140)				_g = (_g + 1);
HXLINE(3142)				 ::Xml _this = node;
HXDLIN(3142)				bool _hx_tmp1;
HXDLIN(3142)				if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(3142)					_hx_tmp1 = (_this->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(3142)					_hx_tmp1 = false;
            				}
HXDLIN(3142)				if (_hx_tmp1) {
HXLINE(3142)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            				}
HXDLIN(3142)				if (::hx::IsNull( _this->children->__get(0).StaticCast<  ::Xml >() )) {
HXLINE(3144)					result = this->_loadTestSub(node);
HXLINE(3145)					if ((result == false)) {
HXLINE(3147)						return false;
            					}
            				}
            			}
            		}
HXLINE(3152)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTest,return )

bool FlxUI_obj::_loadTestSub( ::Xml node){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3156__loadTestSub)
HXLINE(3157)		bool matchValue = ::flixel::addons::ui::U_obj::xml_bool(node,HX_("is",ea,5b,00,00),true);
HXLINE(3158)		bool match = matchValue;
HXLINE(3161)		Float aspect_ratio = ::flixel::addons::ui::U_obj::xml_f(node,HX_("aspect_ratio",24,04,8d,fd),-1);
HXLINE(3162)		if ((aspect_ratio != -1)) {
HXLINE(3163)			match = true;
HXLINE(3164)			Float screen_ratio = (::hx::TCast< Float >::cast(::flixel::FlxG_obj::width) / ::hx::TCast< Float >::cast(::flixel::FlxG_obj::height));
HXLINE(3165)			Float diff = ::Math_obj::abs((screen_ratio - aspect_ratio));
HXLINE(3166)			if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance",0d,3d,7c,33))) {
HXLINE(3168)				Float tolerance = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(3169)				if ((diff > tolerance)) {
HXLINE(3170)					match = false;
            				}
            			}
            			else {
HXLINE(3173)				bool _hx_tmp;
HXDLIN(3173)				if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance_plus",0c,af,15,a0)))) {
HXLINE(3173)					_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance_minus",7e,cc,ae,b6));
            				}
            				else {
HXLINE(3173)					_hx_tmp = true;
            				}
HXDLIN(3173)				if (_hx_tmp) {
HXLINE(3175)					Float tolerance_minus = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance_minus",7e,cc,ae,b6),-1);
HXLINE(3176)					Float tolerance_plus = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance_plus",0c,af,15,a0),-1);
HXLINE(3177)					bool _hx_tmp1;
HXDLIN(3177)					if ((screen_ratio > aspect_ratio)) {
HXLINE(3177)						_hx_tmp1 = (tolerance_plus != -1);
            					}
            					else {
HXLINE(3177)						_hx_tmp1 = false;
            					}
HXDLIN(3177)					if (_hx_tmp1) {
HXLINE(3179)						if ((diff > tolerance_plus)) {
HXLINE(3181)							match = false;
            						}
            					}
HXLINE(3184)					bool _hx_tmp2;
HXDLIN(3184)					if ((screen_ratio < aspect_ratio)) {
HXLINE(3184)						_hx_tmp2 = (tolerance_minus != -1);
            					}
            					else {
HXLINE(3184)						_hx_tmp2 = false;
            					}
HXDLIN(3184)					if (_hx_tmp2) {
HXLINE(3186)						if ((diff > tolerance_minus)) {
HXLINE(3188)							match = false;
            						}
            					}
            				}
            			}
HXLINE(3192)			if ((match != matchValue)) {
HXLINE(3193)				return false;
            			}
            		}
HXLINE(3198)		 ::flixel::math::FlxBasePoint resolution = ::flixel::addons::ui::U_obj::xml_pt(node,HX_("resolution",2c,35,49,6d),null());
HXLINE(3199)		if (::hx::IsNotNull( resolution )) {
HXLINE(3201)			match = true;
HXLINE(3202)			 ::flixel::math::FlxBasePoint toleranceRes = ::flixel::addons::ui::U_obj::xml_pt(node,HX_("tolerance",0d,3d,7c,33),null());
HXLINE(3203)			if (::hx::IsNull( toleranceRes )) {
HXLINE(3203)				toleranceRes =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,0,0);
            			}
HXLINE(3204)			Float diffX = ::Math_obj::abs((resolution->x - ( (Float)(::flixel::FlxG_obj::width) )));
HXLINE(3205)			Float diffY = ::Math_obj::abs((resolution->y - ( (Float)(::flixel::FlxG_obj::height) )));
HXLINE(3206)			bool _hx_tmp3;
HXDLIN(3206)			if (!((diffX > toleranceRes->x))) {
HXLINE(3206)				_hx_tmp3 = (diffY > toleranceRes->y);
            			}
            			else {
HXLINE(3206)				_hx_tmp3 = true;
            			}
HXDLIN(3206)			if (_hx_tmp3) {
HXLINE(3208)				match = false;
            			}
HXLINE(3210)			if ((match != matchValue)) {
HXLINE(3211)				return false;
            			}
            		}
HXLINE(3216)		::String haxeDef = ::flixel::addons::ui::U_obj::xml_str(node,HX_("haxedef",5f,a1,7a,08),true,HX_("",00,00,00,00));
HXLINE(3217)		bool haxeVal = ::flixel::addons::ui::U_obj::xml_bool(node,HX_("value",71,7f,b8,31),true);
HXLINE(3219)		if ((haxeDef != HX_("",00,00,00,00))) {
HXLINE(3220)			match = true;
HXLINE(3221)			bool defValue = ::flixel::addons::ui::U_obj::checkHaxedef(haxeDef);
HXLINE(3222)			match = (defValue == haxeVal);
HXLINE(3223)			if ((match != matchValue)) {
HXLINE(3224)				return false;
            			}
            		}
HXLINE(3229)		::String variable = ::flixel::addons::ui::U_obj::xml_str(node,HX_("variable",3c,12,0d,69),false,HX_("",00,00,00,00));
HXLINE(3230)		::String variableType = ::flixel::addons::ui::U_obj::xml_str(node,HX_("type",ba,f2,08,4d),true,HX_("string",d1,28,30,11));
HXLINE(3231)		if ((variable != HX_("",00,00,00,00))) {
HXLINE(3233)			match = true;
HXLINE(3234)			 ::Dynamic varData = this->parseVarValue(variable);
HXLINE(3235)			if (::hx::IsNotNull( varData )) {
HXLINE(3237)				match = this->checkVariable(( (::String)(varData->__Field(HX_("variable",3c,12,0d,69),::hx::paccDynamic)) ),( (::String)(varData->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) ),variableType,( (::String)(varData->__Field(HX_("op",21,61,00,00),::hx::paccDynamic)) ),null());
            			}
HXLINE(3239)			if ((match != matchValue)) {
HXLINE(3240)				return false;
            			}
            		}
HXLINE(3243)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTestSub,return )

 ::Dynamic FlxUI_obj::parseVarValue(::String varString){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3246_parseVarValue)
HXLINE(3247)		::Array< ::String > arr = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_177,8);
HXLINE(3248)		::Array< ::String > temp;
HXLINE(3249)		{
HXLINE(3249)			int _g = 0;
HXDLIN(3249)			while((_g < arr->length)){
HXLINE(3249)				::String op = arr->__get(_g);
HXDLIN(3249)				_g = (_g + 1);
HXLINE(3251)				if ((varString.indexOf(op,null()) != -1)) {
HXLINE(3253)					temp = varString.split(op);
HXLINE(3254)					bool _hx_tmp;
HXDLIN(3254)					if (::hx::IsNotNull( temp )) {
HXLINE(3254)						_hx_tmp = (temp->length == 2);
            					}
            					else {
HXLINE(3254)						_hx_tmp = false;
            					}
HXDLIN(3254)					if (_hx_tmp) {
HXLINE(3256)						return  ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("op",21,61,00,00),op)
            							->setFixed(1,HX_("value",71,7f,b8,31),temp->__get(1))
            							->setFixed(2,HX_("variable",3c,12,0d,69),temp->__get(0)));
            					}
            				}
            			}
            		}
HXLINE(3260)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,parseVarValue,return )

 ::flixel::addons::ui::FlxUI FlxUI_obj::_loadLayout( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3264__loadLayout)
HXLINE(3265)		::String name = ::flixel::addons::ui::U_obj::xml_str(data,HX_("name",4b,72,ff,48),true,null());
HXLINE(3266)		Float X = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(3267)		Float Y = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(3268)		 ::flixel::addons::ui::FlxUI _ui = this->createUI(data);
HXLINE(3269)		_ui->set_x(X);
HXLINE(3270)		_ui->set_y(Y);
HXLINE(3271)		_ui->name = name;
HXLINE(3272)		return _ui;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLayout,return )

void FlxUI_obj::addToCleanup(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3276_addToCleanup)
HXLINE(3277)		if (::hx::IsNull( this->_assetsToCleanUp )) {
HXLINE(3277)			return;
            		}
HXLINE(3278)		if ((this->_assetsToCleanUp->indexOf(str,null()) == -1)) {
HXLINE(3280)			this->_assetsToCleanUp->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToCleanup,(void))

void FlxUI_obj::addToScaledAssets(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3286_addToScaledAssets)
HXDLIN(3286)		bool _hx_tmp;
HXDLIN(3286)		if (::hx::IsNotNull( this->_scaledAssets )) {
HXDLIN(3286)			_hx_tmp = (this->_scaledAssets->indexOf(str,null()) == -1);
            		}
            		else {
HXDLIN(3286)			_hx_tmp = false;
            		}
HXDLIN(3286)		if (_hx_tmp) {
HXLINE(3288)			this->_scaledAssets->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToScaledAssets,(void))

void FlxUI_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3293_cleanup)
HXLINE(3294)		{
HXLINE(3294)			int _g = 0;
HXDLIN(3294)			::Array< ::String > _g1 = this->_assetsToCleanUp;
HXDLIN(3294)			while((_g < _g1->length)){
HXLINE(3294)				::String key = _g1->__get(_g);
HXDLIN(3294)				_g = (_g + 1);
HXLINE(3296)				::flixel::FlxG_obj::bitmap->removeByKey(key);
            			}
            		}
HXLINE(3298)		this->_assetsToCleanUp = null();
HXLINE(3299)		this->_scaledAssets = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,cleanup,(void))

 ::flixel::addons::ui::FlxUI FlxUI_obj::createUI( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3304_createUI)
HXDLIN(3304)		return  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,data,::hx::ObjectPtr<OBJ_>(this),::hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,this->liveFilePath,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,createUI,return )

 ::flixel::addons::ui::FlxUITabMenu FlxUI_obj::_loadTabMenu( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3307__loadTabMenu)
HXLINE(3309)		::String back_def_str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_def",6d,f8,3d,17),null(),null());
HXLINE(3310)		 ::Xml back_def = this->getDefinition(back_def_str,null());
HXLINE(3311)		if (::hx::IsNull( back_def )) {
HXLINE(3312)			back_def = data;
            		}
HXLINE(3314)		back_def = ::flixel::addons::ui::FlxUI_obj::consolidateData(back_def,data,null());
HXLINE(3316)		::String back_type = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_type",12,07,9e,49),true,HX_("chrome",7a,f9,af,c2));
HXLINE(3318)		 ::flixel::FlxSprite backSprite;
HXDLIN(3318)		::String _hx_switch_0 = back_type;
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(3318)			backSprite =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(3318)			goto _hx_goto_184;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(3318)			backSprite = this->_loadSprite(back_def);
HXDLIN(3318)			goto _hx_goto_184;
            		}
            		/* default */{
HXLINE(3318)			backSprite = this->_load9SliceSprite(back_def,HX_("tab_menu",09,73,e1,d6));
            		}
            		_hx_goto_184:;
HXLINE(3325)		 ::Xml tab_def = null();
HXLINE(3327)		bool stretch_tabs = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("stretch_tabs",38,9c,fc,5c),false);
HXLINE(3329)		::String stackToggled = HX_("front",a9,18,8e,06);
HXLINE(3330)		::String stackUntoggled = HX_("back",27,da,10,41);
HXLINE(3332)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99))) {
HXLINE(3333)			stackToggled = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99)),HX_("toggled",50,e2,03,cc),true,HX_("front",a9,18,8e,06));
HXLINE(3334)			stackUntoggled = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99)),HX_("untoggled",17,e9,05,c8),true,HX_("back",27,da,10,41));
            		}
HXLINE(3337)		::String tab_spacing_str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,HX_("",00,00,00,00));
HXLINE(3338)		 ::Dynamic tab_spacing = null();
HXLINE(3339)		if ((tab_spacing_str != HX_("",00,00,00,00))) {
HXLINE(3340)			tab_spacing = this->_loadWidth(data,0,HX_("spacing",83,33,bb,91),null());
            		}
HXLINE(3344)		Float tab_x = this->_loadWidth(data,0,HX_("tab_x",ce,ac,e3,0a),null());
HXLINE(3345)		Float tab_y = this->_loadHeight(data,0,HX_("tab_y",cf,ac,e3,0a),null());
HXLINE(3346)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(tab_x,tab_y);
HXDLIN(3346)		point->_inPool = false;
HXDLIN(3346)		 ::flixel::math::FlxBasePoint tab_offset = point;
HXLINE(3348)		::String tab_def_str = HX_("",00,00,00,00);
HXLINE(3350)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00))) {
HXLINE(3351)			{
HXLINE(3351)				int _g = 0;
HXDLIN(3351)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
HXDLIN(3351)				while((_g < _g1->length)){
HXLINE(3351)					 ::Xml tabNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3351)					_g = (_g + 1);
HXLINE(3352)					::String temp = ::flixel::addons::ui::U_obj::xml_str(tabNode,HX_("use_def",8d,da,e9,62),null(),null());
HXLINE(3353)					if ((temp != HX_("",00,00,00,00))) {
HXLINE(3354)						tab_def_str = temp;
            					}
            				}
            			}
HXLINE(3357)			if ((tab_def_str != HX_("",00,00,00,00))) {
HXLINE(3358)				tab_def = this->getDefinition(tab_def_str,null());
            			}
            			else {
HXLINE(3360)				tab_def = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
            			}
            		}
HXLINE(3364)		::Array< ::Dynamic> list_tabs = ::Array_obj< ::Dynamic>::__new();
HXLINE(3366)		::String name = HX_("",00,00,00,00);
HXLINE(3368)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00))) {
HXLINE(3369)			int _g2 = 0;
HXDLIN(3369)			::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
HXDLIN(3369)			while((_g2 < _g3->length)){
HXLINE(3369)				 ::Xml tab_node = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(3369)				_g2 = (_g2 + 1);
HXLINE(3370)				name = ::flixel::addons::ui::U_obj::xml_name(tab_node);
HXLINE(3372)				if ((name != HX_("",00,00,00,00))) {
HXLINE(3373)					::String label = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3374)					::String context = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3375)					::String code = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3376)					label = this->getText(label,context,true,code);
HXLINE(3378)					label = this->getText(label,context,true,code);
HXLINE(3380)					 ::Xml tab_info = ::flixel::addons::ui::FlxUI_obj::consolidateData(tab_node,tab_def,null());
HXLINE(3381)					::Dynamic tab = this->_loadButton(tab_info,true,true,HX_("tab_menu",09,73,e1,d6));
HXLINE(3382)					tab->__SetField(HX_("name",4b,72,ff,48),name,::hx::paccDynamic);
HXLINE(3383)					list_tabs->push(tab);
HXLINE(3384)					this->_loadTooltip(tab,tab_info);
            				}
            			}
            		}
HXLINE(3389)		if ((list_tabs->length > 0)) {
HXLINE(3390)			bool _hx_tmp;
HXDLIN(3390)			if (::hx::IsNotNull( tab_def )) {
HXLINE(3390)				_hx_tmp = !(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tab_def,HX_("text",ad,cc,f9,4c)));
            			}
            			else {
HXLINE(3390)				_hx_tmp = true;
            			}
HXDLIN(3390)			if (_hx_tmp) {
HXLINE(3391)				int _g4 = 0;
HXDLIN(3391)				while((_g4 < list_tabs->length)){
HXLINE(3391)					::Dynamic t = list_tabs->__get(_g4);
HXDLIN(3391)					_g4 = (_g4 + 1);
HXLINE(3392)					if (::Std_obj::isOfType(t,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >()) ))) {
HXLINE(3394)						 ::flixel::addons::ui::FlxUITypedButton tb = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE(3395)						( ( ::flixel::FlxSprite)(tb->label) )->set_color(16777215);
HXLINE(3396)						if (::Std_obj::isOfType(tb->label,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIText >()) ))) {
HXLINE(3398)							 ::flixel::addons::ui::FlxUIText labelText = ( ( ::flixel::addons::ui::FlxUIText)(tb->label) );
HXLINE(3399)							{
HXLINE(3399)								labelText->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(3399)								labelText->set_borderColor(0);
HXDLIN(3399)								labelText->set_borderSize(( (Float)(1) ));
HXDLIN(3399)								labelText->set_borderQuality(( (Float)(1) ));
            							}
            						}
            					}
            				}
            			}
HXLINE(3405)			bool _hx_tmp1;
HXDLIN(3405)			if (::hx::IsNotNull( tab_def )) {
HXLINE(3405)				_hx_tmp1 = !(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tab_def,HX_("width",06,b6,62,ca)));
            			}
            			else {
HXLINE(3405)				_hx_tmp1 = true;
            			}
HXDLIN(3405)			if (_hx_tmp1) {
HXLINE(3406)				stretch_tabs = true;
            			}
            		}
HXLINE(3411)		::Array< ::String > tab_stacking = ::Array_obj< ::String >::__new(2)->init(0,stackToggled)->init(1,stackUntoggled);
HXLINE(3413)		 ::flixel::addons::ui::FlxUITabMenu fg =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,backSprite,list_tabs,null(),tab_offset,stretch_tabs,tab_spacing,tab_stacking);
HXLINE(3415)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99))) {
HXLINE(3416)			int _g5 = 0;
HXDLIN(3416)			::Array< ::Dynamic> _g6 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99));
HXDLIN(3416)			while((_g5 < _g6->length)){
HXLINE(3416)				 ::Xml group_node = _g6->__get(_g5).StaticCast<  ::Xml >();
HXDLIN(3416)				_g5 = (_g5 + 1);
HXLINE(3417)				name = ::flixel::addons::ui::U_obj::xml_name(group_node);
HXLINE(3418)				 ::flixel::addons::ui::FlxUI _ui =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,group_node,fg,::hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,null(),null());
HXLINE(3419)				bool _hx_tmp2;
HXDLIN(3419)				if (::hx::IsNotNull( list_tabs )) {
HXLINE(3419)					_hx_tmp2 = (list_tabs->length > 0);
            				}
            				else {
HXLINE(3419)					_hx_tmp2 = false;
            				}
HXDLIN(3419)				if (_hx_tmp2) {
HXLINE(3420)					Float _ui1 = _ui->y;
HXDLIN(3420)					_ui->set_y((_ui1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(list_tabs->__get(0))));
            				}
HXLINE(3422)				_ui->name = name;
HXLINE(3423)				fg->addGroup(_ui);
            			}
            		}
HXLINE(3429)		return fg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTabMenu,return )

::Dynamic FlxUI_obj::_loadNumericStepper( ::Xml data,::hx::Null< bool >  __o_setCallback){
            		bool setCallback = __o_setCallback.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3432__loadNumericStepper)
HXLINE(3444)		Float stepSize = ::flixel::addons::ui::U_obj::xml_f(data,HX_("step",4c,e7,5b,4c),1);
HXLINE(3445)		Float defaultValue = ::flixel::addons::ui::U_obj::xml_f(data,HX_("value",71,7f,b8,31),0);
HXLINE(3446)		Float min = ::flixel::addons::ui::U_obj::xml_f(data,HX_("min",92,11,53,00),0);
HXLINE(3447)		Float max = ::flixel::addons::ui::U_obj::xml_f(data,HX_("max",a4,0a,53,00),10);
HXLINE(3448)		int decimals = ::flixel::addons::ui::U_obj::xml_i(data,HX_("decimals",c2,4a,6a,12),0);
HXLINE(3449)		bool percent = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("percent",c5,aa,da,78),null());
HXLINE(3450)		::String stack = ::flixel::addons::ui::U_obj::xml_str(data,HX_("stack",48,67,0b,84),true,HX_("",00,00,00,00));
HXLINE(3451)		if ((stack == HX_("",00,00,00,00))) {
HXLINE(3452)			stack = ::flixel::addons::ui::U_obj::xml_str(data,HX_("stacking",9a,62,b6,99),true,HX_("",00,00,00,00));
            		}
HXLINE(3454)		stack = stack.toLowerCase();
HXLINE(3455)		int stacking;
HXLINE(3457)		::String _hx_switch_0 = stack;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(3459)			stacking = 1;
HXDLIN(3459)			goto _hx_goto_190;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3461)			stacking = 0;
HXDLIN(3461)			goto _hx_goto_190;
            		}
            		/* default */{
HXLINE(3463)			stacking = 1;
            		}
            		_hx_goto_190:;
HXLINE(3466)		 ::flixel::text::FlxText theText = null();
HXLINE(3467)		 ::flixel::addons::ui::FlxUITypedButton buttPlus = null();
HXLINE(3468)		 ::flixel::addons::ui::FlxUITypedButton buttMinus = null();
HXLINE(3470)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c))) {
HXLINE(3471)			theText = ( ( ::flixel::text::FlxText)(this->_loadThing(HX_("text",ad,cc,f9,4c),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c)))) );
            		}
HXLINE(3473)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("plus",5a,3f,5a,4a))) {
HXLINE(3474)			buttPlus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("plus",5a,3f,5a,4a)))) );
            		}
HXLINE(3476)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("minus",70,80,68,08))) {
HXLINE(3477)			buttMinus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("minus",70,80,68,08)))) );
            		}
HXLINE(3480)		 ::flixel::addons::ui::FlxUINumericStepper ns =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,0,0,stepSize,defaultValue,min,max,decimals,stacking,theText,buttPlus,buttMinus,percent);
HXLINE(3482)		if (setCallback) {
HXLINE(3483)			::cpp::VirtualArray params = null();
HXDLIN(3483)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3483)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3483)				{
HXLINE(3483)					int _g = 0;
HXDLIN(3483)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3483)					while((_g < _g1->length)){
HXLINE(3483)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3483)						_g = (_g + 1);
HXDLIN(3483)						bool _hx_tmp;
HXDLIN(3483)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3483)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(3483)							_hx_tmp = false;
            						}
HXDLIN(3483)						if (_hx_tmp) {
HXLINE(3483)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3483)							type = type.toLowerCase();
HXDLIN(3483)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3483)							 ::Dynamic value = valueStr;
HXDLIN(3483)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3483)							::String _hx_switch_1 = type;
            							if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3483)								::String str = ::String(valueStr);
HXDLIN(3483)								str = str.toLowerCase();
HXDLIN(3483)								bool _hx_tmp1;
HXDLIN(3483)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3483)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(3483)									_hx_tmp1 = true;
            								}
HXDLIN(3483)								if (_hx_tmp1) {
HXLINE(3483)									value = true;
            								}
            								else {
HXLINE(3483)									value = false;
            								}
HXDLIN(3483)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(3483)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3483)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(3483)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3483)								if (::hx::IsNull( return_val )) {
HXLINE(3483)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(3483)								value = return_val;
HXDLIN(3483)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(3483)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(3483)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(3483)								value = ::String(valueStr);
HXDLIN(3483)								goto _hx_goto_192;
            							}
            							_hx_goto_192:;
HXDLIN(3483)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(3483)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3483)				{
HXLINE(3483)					int _g2 = 0;
HXDLIN(3483)					int _g3 = params->get_length();
HXDLIN(3483)					while((_g2 < _g3)){
HXLINE(3483)						_g2 = (_g2 + 1);
HXDLIN(3483)						int i = (_g2 - 1);
HXDLIN(3483)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(3483)			::cpp::VirtualArray params1 = params;
HXLINE(3484)			ns->set_params(params1);
            		}
HXLINE(3487)		return ns;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadNumericStepper,return )

 ::flixel::math::FlxBasePoint FlxUI_obj::getResizeRatio( ::Xml data,::hx::Null< int >  __o_defaultAxis){
            		int defaultAxis = __o_defaultAxis.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3491_getResizeRatio)
HXLINE(3492)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("resize_ratio_x",79,e8,30,0e),true,null());
HXLINE(3493)		if ((str == HX_("",00,00,00,00))) {
HXLINE(3495)			str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("resize_ratio_y",7a,e8,30,0e),true,null());
HXLINE(3496)			if ((str == HX_("",00,00,00,00))) {
HXLINE(3499)				Float resize_ratio = ::flixel::addons::ui::U_obj::xml_f(data,HX_("resize_ratio",40,c5,84,8f),-1);
HXLINE(3500)				return  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,resize_ratio,defaultAxis);
            			}
            			else {
HXLINE(3505)				return  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,::Std_obj::parseFloat(str),1);
            			}
            		}
            		else {
HXLINE(3511)			return  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,::Std_obj::parseFloat(str),0);
            		}
HXLINE(3493)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getResizeRatio,return )

::Dynamic FlxUI_obj::_loadButton( ::Xml data,::hx::Null< bool >  __o_setCallback,::hx::Null< bool >  __o_isToggle,::String __o_load_code){
            		bool setCallback = __o_setCallback.Default(true);
            		bool isToggle = __o_isToggle.Default(false);
            		::String load_code = __o_load_code;
            		if (::hx::IsNull(__o_load_code)) load_code = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3520__loadButton)
HXLINE(3521)		::Dynamic fb = null();
HXLINE(3522)		int color = this->_loadColor(data,null(),null());
HXLINE(3523)		Float resize_ratio = ::flixel::addons::ui::U_obj::xml_f(data,HX_("resize_ratio",40,c5,84,8f),-1);
HXLINE(3524)		 ::flixel::math::FlxBasePoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(3525)		bool resize_label = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("resize_label",29,9e,0f,1b),false);
HXLINE(3527)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3529)		 ::flixel::addons::ui::FlxUISprite sprite = null();
HXLINE(3530)		 ::flixel::addons::ui::FlxUISprite toggleSprite = null();
HXLINE(3531)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("sprite",05,dc,95,c3))) {
HXLINE(3533)			int _g = 0;
HXDLIN(3533)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("sprite",05,dc,95,c3));
HXDLIN(3533)			while((_g < _g1->length)){
HXLINE(3533)				 ::Xml spriteNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3533)				_g = (_g + 1);
HXLINE(3535)				bool forToggle;
HXDLIN(3535)				if (isToggle) {
HXLINE(3535)					forToggle = ::flixel::addons::ui::U_obj::xml_bool(spriteNode,HX_("toggle",94,bf,43,8f),null());
            				}
            				else {
HXLINE(3535)					forToggle = false;
            				}
HXLINE(3536)				if (forToggle) {
HXLINE(3538)					toggleSprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),spriteNode)) );
            				}
            				else {
HXLINE(3542)					sprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),spriteNode)) );
            				}
            			}
            		}
HXLINE(3547)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3548)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3550)		label = this->getText(label,context,true,code);
HXLINE(3552)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("width",06,b6,62,ca),null()));
HXLINE(3553)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("height",e7,07,4c,02),null()));
HXLINE(3555)		::cpp::VirtualArray params = null();
HXDLIN(3555)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3555)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3555)			{
HXLINE(3555)				int _g2 = 0;
HXDLIN(3555)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3555)				while((_g2 < _g3->length)){
HXLINE(3555)					 ::Xml param = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(3555)					_g2 = (_g2 + 1);
HXDLIN(3555)					bool _hx_tmp;
HXDLIN(3555)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3555)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3555)						_hx_tmp = false;
            					}
HXDLIN(3555)					if (_hx_tmp) {
HXLINE(3555)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3555)						type = type.toLowerCase();
HXDLIN(3555)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3555)						 ::Dynamic value = valueStr;
HXDLIN(3555)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3555)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3555)							::String str = ::String(valueStr);
HXDLIN(3555)							str = str.toLowerCase();
HXDLIN(3555)							bool _hx_tmp1;
HXDLIN(3555)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3555)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3555)								_hx_tmp1 = true;
            							}
HXDLIN(3555)							if (_hx_tmp1) {
HXLINE(3555)								value = true;
            							}
            							else {
HXLINE(3555)								value = false;
            							}
HXDLIN(3555)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3555)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3555)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3555)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3555)							if (::hx::IsNull( return_val )) {
HXLINE(3555)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(3555)							value = return_val;
HXDLIN(3555)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3555)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3555)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3555)							value = ::String(valueStr);
HXDLIN(3555)							goto _hx_goto_198;
            						}
            						_hx_goto_198:;
HXDLIN(3555)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3555)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3555)			{
HXLINE(3555)				int _g4 = 0;
HXDLIN(3555)				int _g5 = params->get_length();
HXDLIN(3555)				while((_g4 < _g5)){
HXLINE(3555)					_g4 = (_g4 + 1);
HXDLIN(3555)					int i = (_g4 - 1);
HXDLIN(3555)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(3555)		::cpp::VirtualArray params1 = params;
HXLINE(3557)		if (::hx::IsNull( sprite )) {
HXLINE(3559)			bool useDefaultGraphic = (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)) == false);
HXLINE(3560)			fb =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,0,0,label,null(),useDefaultGraphic,false,color);
HXLINE(3561)			 ::flixel::addons::ui::FlxUIButton fuib = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3562)			fuib->_autoCleanup = false;
            		}
            		else {
HXLINE(3566)			 ::flixel::group::FlxTypedSpriteGroup tempGroup = null();
HXLINE(3567)			if ((label != HX_("",00,00,00,00))) {
HXLINE(3571)				 ::flixel::addons::ui::FlxUIText labelTxt =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,0,0,80,label,8,null());
HXLINE(3573)				labelTxt->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(3575)				tempGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3577)				tempGroup->add(sprite).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3578)				tempGroup->add(labelTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3580)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,0,0,tempGroup,null());
            			}
            			else {
HXLINE(3584)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,0,0,sprite,null());
            			}
            		}
HXLINE(3587)		fb->__SetField(HX_("resize_ratio",40,c5,84,8f),resize_ratio,::hx::paccDynamic);
HXLINE(3588)		fb->__SetField(HX_("resize_point",85,44,f0,71),resize_point,::hx::paccDynamic);
HXLINE(3589)		fb->__SetField(HX_("autoResizeLabel",31,30,ad,1c),resize_label,::hx::paccDynamic);
HXLINE(3591)		if (setCallback) {
HXLINE(3593)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(fb,params1);
            		}
HXLINE(3598)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74))) {
HXLINE(3600)			bool blank = ::flixel::addons::ui::U_obj::xml_bool(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("blank",54,df,f1,b4),null());
HXLINE(3602)			if (blank) {
HXLINE(3608)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00)),W,H,null(),0,resize_ratio,null(),null(),null(),null());
            			}
            			else {
HXLINE(3613)				::cpp::VirtualArray graphic_names = null();
HXLINE(3614)				::Array< ::Dynamic> slice9_names = null();
HXLINE(3615)				::Array< int > frames = null();
HXLINE(3617)				if (isToggle) {
HXLINE(3618)					graphic_names = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00))->init(3,HX_("",00,00,00,00))->init(4,HX_("",00,00,00,00))->init(5,HX_("",00,00,00,00));
HXLINE(3619)					slice9_names = ::Array_obj< ::Dynamic>::__new(6)->init(0,null())->init(1,null())->init(2,null())->init(3,null())->init(4,null())->init(5,null());
            				}
            				else {
HXLINE(3621)					graphic_names = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00));
HXLINE(3622)					slice9_names = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
            				}
HXLINE(3626)				int src_w = ::flixel::addons::ui::U_obj::xml_i(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("src_w",1c,7b,ba,82),0);
HXLINE(3627)				int src_h = ::flixel::addons::ui::U_obj::xml_i(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("src_h",0d,7b,ba,82),0);
HXLINE(3628)				::String tileStr = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(3628)				int tile = 0;
HXDLIN(3628)				::String _hx_switch_1 = tileStr;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3628)					tile = 16;
HXDLIN(3628)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("v",76,00,00,00)) ||  (_hx_switch_1==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3628)					tile = 1;
HXDLIN(3628)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("all",21,f9,49,00)) ||  (_hx_switch_1==HX_("both",81,88,1b,41)) ||  (_hx_switch_1==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_1==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_1==HX_("vh",32,67,00,00)) ){
HXLINE(3628)					tile = 17;
HXDLIN(3628)					goto _hx_goto_200;
            				}
            				_hx_goto_200:;
HXDLIN(3628)				int tile1 = tile;
HXLINE(3631)				::String frame_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("frames",a6,af,85,ac),true,null());
HXLINE(3632)				if ((frame_str != HX_("",00,00,00,00))) {
HXLINE(3633)					frames = ::Array_obj< int >::__new();
HXLINE(3634)					::Array< ::String > arr = frame_str.split(HX_(",",2c,00,00,00));
HXLINE(3635)					{
HXLINE(3635)						int _g6 = 0;
HXDLIN(3635)						while((_g6 < arr->length)){
HXLINE(3635)							::String numstr = arr->__get(_g6);
HXDLIN(3635)							_g6 = (_g6 + 1);
HXLINE(3636)							frames->push(::Std_obj::parseInt(numstr));
            						}
            					}
            				}
HXLINE(3640)				{
HXLINE(3640)					int _g7 = 0;
HXDLIN(3640)					::Array< ::Dynamic> _g8 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74));
HXDLIN(3640)					while((_g7 < _g8->length)){
HXLINE(3640)						 ::Xml graphicNode = _g8->__get(_g7).StaticCast<  ::Xml >();
HXDLIN(3640)						_g7 = (_g7 + 1);
HXLINE(3641)						::String graphic_name = ::flixel::addons::ui::U_obj::xml_name(graphicNode);
HXLINE(3642)						::String image = ::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("image",5b,1f,69,bd),null(),null());
HXLINE(3643)						::Array< int > slice9 = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(3644)						::String tileStr1 = ::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(3644)						int tile2 = 0;
HXDLIN(3644)						::String _hx_switch_2 = tileStr1;
            						if (  (_hx_switch_2==HX_("h",68,00,00,00)) ||  (_hx_switch_2==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3644)							tile2 = 16;
HXDLIN(3644)							goto _hx_goto_203;
            						}
            						if (  (_hx_switch_2==HX_("v",76,00,00,00)) ||  (_hx_switch_2==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3644)							tile2 = 1;
HXDLIN(3644)							goto _hx_goto_203;
            						}
            						if (  (_hx_switch_2==HX_("all",21,f9,49,00)) ||  (_hx_switch_2==HX_("both",81,88,1b,41)) ||  (_hx_switch_2==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_2==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_2==HX_("vh",32,67,00,00)) ){
HXLINE(3644)							tile2 = 17;
HXDLIN(3644)							goto _hx_goto_203;
            						}
            						_hx_goto_203:;
HXDLIN(3644)						tile1 = tile2;
HXLINE(3646)						bool toggleState = ::flixel::addons::ui::U_obj::xml_bool(graphicNode,HX_("toggle",94,bf,43,8f),null());
HXLINE(3647)						if (toggleState) {
HXLINE(3647)							toggleState = isToggle;
            						}
            						else {
HXLINE(3647)							toggleState = false;
            						}
HXLINE(3649)						::String igfx = ::flixel::addons::ui::U_obj::gfx(image,null(),null(),null(),null(),null());
HXLINE(3651)						::String _hx_switch_3 = graphic_name;
            						if (  (_hx_switch_3==HX_("all",21,f9,49,00)) ){
HXLINE(3701)							int tilesTall;
HXDLIN(3701)							if (isToggle) {
HXLINE(3701)								tilesTall = 6;
            							}
            							else {
HXLINE(3701)								tilesTall = 3;
            							}
HXLINE(3703)							 ::openfl::display::BitmapData temp = null();
HXLINE(3706)							if ((src_h != 0)) {
HXLINE(3708)								 ::openfl::display::BitmapData temp1 = ::flixel::addons::ui::U_obj::getBmp(igfx);
HXLINE(3709)								tilesTall = ::Std_obj::_hx_int((( (Float)(temp1->height) ) / ( (Float)(src_h) )));
            							}
HXLINE(3712)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3713)								graphic_names = ::cpp::VirtualArray_obj::__new(1)->init(0,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),1,tilesTall));
            							}
HXLINE(3716)							slice9_names = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(0)) ),HX_("image",5b,1f,69,bd)));
HXLINE(3719)							temp = ::flixel::addons::ui::U_obj::getBmp(graphic_names->__get(0));
HXLINE(3720)							src_w = temp->width;
HXLINE(3721)							src_h = ::Std_obj::_hx_int((( (Float)(temp->height) ) / ( (Float)(tilesTall) )));
HXLINE(3700)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("active",c6,41,46,16)) ||  (_hx_switch_3==HX_("highlight",34,56,00,ed)) ||  (_hx_switch_3==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_3==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_3==HX_("over",54,91,b8,49)) ){
HXLINE(3669)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3670)								if (!(toggleState)) {
HXLINE(3671)									graphic_names->set(1,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3673)									graphic_names->set(4,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3676)							if (!(toggleState)) {
HXLINE(3678)								slice9_names[1] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(1)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3682)								slice9_names[4] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(4)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3668)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("down",62,f8,6d,42)) ||  (_hx_switch_3==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_3==HX_("pushed",b9,14,2d,72)) ){
HXLINE(3685)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3686)								if (!(toggleState)) {
HXLINE(3687)									graphic_names->set(2,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3689)									graphic_names->set(5,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3692)							if (!(toggleState)) {
HXLINE(3694)								slice9_names[2] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(2)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3698)								slice9_names[5] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(5)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3684)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("",00,00,00,00)) ||  (_hx_switch_3==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_3==HX_("normal",27,72,69,30)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ){
HXLINE(3653)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3654)								if (!(toggleState)) {
HXLINE(3655)									graphic_names->set(0,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3657)									graphic_names->set(3,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3660)							if (!(toggleState)) {
HXLINE(3662)								slice9_names[0] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(0)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3666)								slice9_names[3] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(3)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3652)							goto _hx_goto_204;
            						}
            						_hx_goto_204:;
HXLINE(3724)						if (::hx::IsNotEq( graphic_names->__get(0),HX_("",00,00,00,00) )) {
HXLINE(3725)							if ((graphic_names->get_length() >= 3)) {
HXLINE(3726)								if (::hx::IsEq( graphic_names->__get(1),HX_("",00,00,00,00) )) {
HXLINE(3727)									graphic_names->set(1,graphic_names->__get(0));
            								}
HXLINE(3729)								if (::hx::IsEq( graphic_names->__get(2),HX_("",00,00,00,00) )) {
HXLINE(3730)									graphic_names->set(2,graphic_names->__get(1));
            								}
HXLINE(3732)								if ((graphic_names->get_length() >= 6)) {
HXLINE(3733)									if (::hx::IsEq( graphic_names->__get(3),HX_("",00,00,00,00) )) {
HXLINE(3734)										graphic_names->set(3,graphic_names->__get(0));
            									}
HXLINE(3736)									if (::hx::IsEq( graphic_names->__get(4),HX_("",00,00,00,00) )) {
HXLINE(3737)										graphic_names->set(4,graphic_names->__get(1));
            									}
HXLINE(3739)									if (::hx::IsEq( graphic_names->__get(5),HX_("",00,00,00,00) )) {
HXLINE(3740)										graphic_names->set(5,graphic_names->__get(2));
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(3748)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names,W,H,slice9_names,tile1,resize_ratio,isToggle,src_w,src_h,frames);
            			}
            		}
            		else {
HXLINE(3751)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3753)				::cpp::VirtualArray graphic_names1 = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(1,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(2,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(3,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(4,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(5,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04));
HXLINE(3754)				::Array< int > slice9_tab = ::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07));
HXLINE(3755)				::Array< ::Dynamic> slice9_names1 = ::Array_obj< ::Dynamic>::__new(6)->init(0,slice9_tab)->init(1,slice9_tab)->init(2,slice9_tab)->init(3,slice9_tab)->init(4,slice9_tab)->init(5,slice9_tab);
HXLINE(3758)				if (::Std_obj::isOfType(fb,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIButton >()) ))) {
HXLINE(3759)					 ::flixel::addons::ui::FlxUIButton fbui = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3760)					fbui->loadGraphicSlice9(graphic_names1,W,H,slice9_names1,0,resize_ratio,isToggle,null(),null(),null());
            				}
            				else {
HXLINE(3761)					if (::Std_obj::isOfType(fb,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >()) ))) {
HXLINE(3762)						 ::flixel::addons::ui::FlxUISpriteButton fbuis = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(3763)						fbuis->loadGraphicSlice9(graphic_names1,W,H,slice9_names1,0,resize_ratio,isToggle,null(),null(),null());
            					}
            					else {
HXLINE(3765)						::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names1,W,H,slice9_names1,0,resize_ratio,isToggle,null(),null(),null());
            					}
            				}
            			}
            			else {
HXLINE(3769)				if ((W <= 0)) {
HXLINE(3769)					W = 80;
            				}
HXLINE(3770)				if ((H <= 0)) {
HXLINE(3770)					H = 20;
            				}
HXLINE(3771)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,null(),W,H,null(),0,resize_ratio,isToggle,null(),null(),null());
            			}
            		}
HXLINE(3777)		if (::hx::IsNull( sprite )) {
HXLINE(3779)			bool _hx_tmp2;
HXDLIN(3779)			if (::hx::IsNotNull( data )) {
HXLINE(3779)				_hx_tmp2 = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(3779)				_hx_tmp2 = false;
            			}
HXDLIN(3779)			if (_hx_tmp2) {
HXLINE(3780)				this->formatButtonText(data,fb);
            			}
            			else {
HXLINE(3782)				if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3783)					fb->__SetField(HX_("up_color",3f,d5,b5,9b),16777215,::hx::paccDynamic);
HXLINE(3784)					fb->__SetField(HX_("down_color",86,26,b3,4e),16777215,::hx::paccDynamic);
HXLINE(3785)					fb->__SetField(HX_("over_color",f8,00,4a,f7),16777215,::hx::paccDynamic);
HXLINE(3786)					fb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),16777215,::hx::paccDynamic);
HXLINE(3787)					fb->__SetField(HX_("down_toggle_color",75,e4,c8,06),16777215,::hx::paccDynamic);
HXLINE(3788)					fb->__SetField(HX_("over_toggle_color",43,1c,98,aa),16777215,::hx::paccDynamic);
            				}
            				else {
HXLINE(3793)					::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            				}
            			}
            		}
            		else {
HXLINE(3797)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            		}
HXLINE(3800)		bool _hx_tmp3;
HXDLIN(3800)		if (::hx::IsNotNull( sprite )) {
HXLINE(3800)			_hx_tmp3 = (label != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(3800)			_hx_tmp3 = false;
            		}
HXDLIN(3800)		if (_hx_tmp3) {
HXLINE(3801)			bool _hx_tmp4;
HXDLIN(3801)			if (::hx::IsNotNull( data )) {
HXLINE(3801)				_hx_tmp4 = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(3801)				_hx_tmp4 = false;
            			}
HXDLIN(3801)			if (_hx_tmp4) {
HXLINE(3802)				this->formatButtonText(data,fb);
            			}
            		}
HXLINE(3806)		int text_x = 0;
HXLINE(3807)		int text_y = 0;
HXLINE(3808)		if (::hx::IsNotNull( data->get(HX_("text_x",26,65,88,d8)) )) {
HXLINE(3809)			text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
            		}
            		else {
HXLINE(3810)			if (::hx::IsNotNull( data->get(HX_("label_x",2d,c6,05,04)) )) {
HXLINE(3811)				text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("label_x",2d,c6,05,04),null()));
            			}
            		}
HXLINE(3813)		if (::hx::IsNotNull( data->get(HX_("text_y",27,65,88,d8)) )) {
HXLINE(3814)			text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
            		}
            		else {
HXLINE(3815)			if (::hx::IsNotNull( data->get(HX_("label_y",2e,c6,05,04)) )) {
HXLINE(3816)				text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("label_y",2e,c6,05,04),null()));
            			}
            		}
HXLINE(3819)		if (::Std_obj::isOfType(fb,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >()) ))) {
HXLINE(3821)			 ::flixel::addons::ui::FlxUISpriteButton fbs = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(3822)			if (::Std_obj::isOfType(fbs->label,( ( ::Dynamic)(::hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >()) ))) {
HXLINE(3823)				 ::flixel::group::FlxTypedSpriteGroup g = ( ( ::flixel::group::FlxTypedSpriteGroup)(fbs->label) );
HXLINE(3824)				{
HXLINE(3824)					int _g9 = 0;
HXDLIN(3824)					::Array< ::Dynamic> _g10 = g->group->members;
HXDLIN(3824)					while((_g9 < _g10->length)){
HXLINE(3824)						 ::flixel::FlxSprite sprite1 = _g10->__get(_g9).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(3824)						_g9 = (_g9 + 1);
HXLINE(3826)						if (::Std_obj::isOfType(sprite1,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIText >()) ))) {
HXLINE(3829)							sprite1->offset->set_x((sprite1->offset->x - ( (Float)(text_x) )));
HXLINE(3830)							sprite1->offset->set_y((sprite1->offset->y - ( (Float)(text_y) )));
HXLINE(3831)							goto _hx_goto_205;
            						}
            					}
            					_hx_goto_205:;
            				}
            			}
            			else {
HXLINE(3835)				 ::flixel::FlxSprite fh = ( ( ::flixel::FlxSprite)(fbs->label) );
HXDLIN(3835)				fh->offset->set_x((fh->offset->x - ( (Float)(text_x) )));
HXLINE(3836)				 ::flixel::FlxSprite fh1 = ( ( ::flixel::FlxSprite)(fbs->label) );
HXDLIN(3836)				fh1->offset->set_y((fh1->offset->y - ( (Float)(text_y) )));
HXLINE(3837)				if (::hx::IsNotNull( toggleSprite )) {
HXLINE(3838)					toggleSprite->offset->set_x((toggleSprite->offset->x - ( (Float)(text_x) )));
HXLINE(3839)					toggleSprite->offset->set_y((toggleSprite->offset->y - ( (Float)(text_y) )));
            				}
            			}
            		}
            		else {
HXLINE(3845)			 ::flixel::addons::ui::FlxUIButton fbu = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3847)			 ::flixel::addons::ui::FlxUIText fh2 = ( ( ::flixel::addons::ui::FlxUIText)(fbu->label) );
HXDLIN(3847)			fh2->offset->set_x((fh2->offset->x - ( (Float)(text_x) )));
HXLINE(3848)			 ::flixel::addons::ui::FlxUIText fh3 = ( ( ::flixel::addons::ui::FlxUIText)(fbu->label) );
HXDLIN(3848)			fh3->offset->set_y((fh3->offset->y - ( (Float)(text_y) )));
            		}
HXLINE(3851)		bool _hx_tmp5;
HXDLIN(3851)		if (::hx::IsNotNull( sprite )) {
HXLINE(3851)			_hx_tmp5 = ::hx::IsNotNull( toggleSprite );
            		}
            		else {
HXLINE(3851)			_hx_tmp5 = false;
            		}
HXDLIN(3851)		if (_hx_tmp5) {
HXLINE(3852)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::set_toggle_label(fb,toggleSprite);
            		}
HXLINE(3855)		if (::Std_obj::isOfType(fb,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >()) ))) {
HXLINE(3857)			 ::flixel::addons::ui::FlxUITypedButton fuitb = ( ( ::flixel::addons::ui::FlxUITypedButton)(fb) );
HXLINE(3858)			if (::hx::IsNotNull( fuitb->_assetsToCleanup )) {
HXLINE(3860)				int _g11 = 0;
HXDLIN(3860)				::Array< ::String > _g12 = fuitb->_assetsToCleanup;
HXDLIN(3860)				while((_g11 < _g12->length)){
HXLINE(3860)					::String key = _g12->__get(_g11);
HXDLIN(3860)					_g11 = (_g11 + 1);
HXLINE(3862)					this->addToCleanup(key);
            				}
            			}
            		}
HXLINE(3867)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadButton,return )

 ::flixel::addons::ui::FlxUIRegion FlxUI_obj::_loadRegion( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3879__loadRegion)
HXLINE(3880)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(3882)		int w = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(3883)		int h = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(3885)		if (::hx::IsNotNull( bounds )) {
HXLINE(3887)			 ::openfl::geom::Point pt = ::flixel::addons::ui::U_obj::conformToBounds( ::openfl::geom::Point_obj::__alloc( HX_CTX ,w,h),bounds);
HXLINE(3888)			w = ::Std_obj::_hx_int(pt->x);
HXLINE(3889)			h = ::Std_obj::_hx_int(pt->y);
            		}
HXLINE(3892)		bool vis = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("visible",72,78,24,a3),true);
HXLINE(3893)		 ::flixel::addons::ui::FlxUIRegion reg =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,0,0,w,h);
HXLINE(3894)		reg->set_visible(vis);
HXLINE(3895)		return reg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRegion,return )

 ::flixel::addons::ui::FlxUI9SliceSprite FlxUI_obj::_load9SliceSprite( ::Xml data,::String __o_load_code){
            		::String load_code = __o_load_code;
            		if (::hx::IsNull(__o_load_code)) load_code = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3899__load9SliceSprite)
HXLINE(3900)		::String src = HX_("",00,00,00,00);
HXLINE(3901)		 ::flixel::addons::ui::FlxUI9SliceSprite f9s = null();
HXLINE(3903)		 ::flixel::math::FlxBasePoint resize = this->getResizeRatio(data,null());
HXLINE(3904)		int color = this->_loadColor(data,null(),null());
HXLINE(3905)		Float resize_ratio = resize->x;
HXLINE(3906)		 ::flixel::math::FlxBasePoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(3907)		int resize_ratio_axis = ::Std_obj::_hx_int(resize->y);
HXLINE(3909)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(3912)		 ::Xml data1 = data;
HXDLIN(3912)		::String str = HX_("",00,00,00,00);
HXDLIN(3912)		if (::hx::IsNotNull( data1->get(HX_("src",e4,a6,57,00)) )) {
HXLINE(3912)			str = data1->get(HX_("src",e4,a6,57,00));
HXDLIN(3912)			bool src1;
HXDLIN(3912)			if ((str != HX_("",00,00,00,00))) {
HXLINE(3912)				src1 = ::hx::IsNull( str );
            			}
            			else {
HXLINE(3912)				src1 = true;
            			}
HXDLIN(3912)			if (src1) {
HXLINE(3912)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(3912)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(3912)				try {
            					HX_STACK_CATCHABLE(::String, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(3912)					if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(3912)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("src",e4,a6,57,00)) + HX_("\"",22,00,00,00)));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg1 = _hx_e;
HXLINE(3912)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(3912)						_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g = _hx_e;
HXLINE( 384)						{
HXLINE( 384)							null();
            						}
HXLINE(3912)						if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 384)							::String msg1 = ( (::String)(_g->value) );
HXLINE(3912)							{
HXLINE(3912)								 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(3912)								_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            							}
            						}
            						else {
HXLINE(3912)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(3912)		src = str;
HXLINE(3914)		bool hasScaledSrc = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("scale_src",6f,c7,bc,37));
HXLINE(3915)		if (hasScaledSrc) {
HXLINE(3919)			::String origSrc = src;
HXLINE(3921)			src = this->loadScaledSrc(data,HX_("src",e4,a6,57,00),HX_("scale_src",6f,c7,bc,37),null(),null());
HXLINE(3923)			if ((src != origSrc)) {
HXLINE(3925)				this->addToCleanup(origSrc);
            			}
            		}
HXLINE(3929)		if ((src == HX_("",00,00,00,00))) {
HXLINE(3929)			src = null();
            		}
HXLINE(3931)		if (::hx::IsNull( src )) {
HXLINE(3933)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3935)				src = HX_("flixel/flixel-ui/img/chrome_flat.png",30,cf,0a,80);
            			}
            		}
HXLINE(3939)		int rect_w = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(3940)		int rect_h = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(3942)		if (::hx::IsNotNull( bounds )) {
HXLINE(3944)			if (::hx::IsLess( rect_w,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(3944)				rect_w = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3945)				if (::hx::IsGreater( rect_w,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(3945)					rect_w = ( (int)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) );
            				}
            			}
HXLINE(3947)			if (::hx::IsLess( rect_h,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(3947)				rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3948)				if (::hx::IsGreater( rect_h,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(3948)					rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(3950)		bool _hx_tmp;
HXDLIN(3950)		if ((rect_w != 0)) {
HXLINE(3950)			_hx_tmp = (rect_h == 0);
            		}
            		else {
HXLINE(3950)			_hx_tmp = true;
            		}
HXDLIN(3950)		if (_hx_tmp) {
HXLINE(3952)			return null();
            		}
HXLINE(3955)		 ::openfl::geom::Rectangle rc =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,rect_w,rect_h);
HXLINE(3957)		::Array< int > slice9 = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(data,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(3959)		::String srcId = HX_("",00,00,00,00);
HXLINE(3960)		 ::Dynamic srcGraphic = src;
HXLINE(3962)		if (hasScaledSrc) {
HXLINE(3964)			slice9 = this->load9SliceSprite_scaleSub(slice9,data,src,null());
HXLINE(3966)			srcId = src;
HXLINE(3967)			srcGraphic = ::flixel::FlxG_obj::bitmap->_cache->get(src);
            		}
HXLINE(3970)		bool smooth = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("smooth",2e,08,6b,07),false);
HXLINE(3972)		::String tileStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(3972)		int tile = 0;
HXDLIN(3972)		::String _hx_switch_0 = tileStr;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3972)			tile = 16;
HXDLIN(3972)			goto _hx_goto_209;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3972)			tile = 1;
HXDLIN(3972)			goto _hx_goto_209;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(3972)			tile = 17;
HXDLIN(3972)			goto _hx_goto_209;
            		}
            		_hx_goto_209:;
HXDLIN(3972)		int tile1 = tile;
HXLINE(3974)		f9s =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),srcGraphic,rc,slice9,tile1,smooth,srcId,resize_ratio,resize_point,resize_ratio_axis,false,color);
HXLINE(3976)		return f9s;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_load9SliceSprite,return )

::Array< int > FlxUI_obj::load9SliceSprite_scaleSub(::Array< int > slice9, ::Xml data,::String src,::String __o_srcString){
            		::String srcString = __o_srcString;
            		if (::hx::IsNull(__o_srcString)) srcString = HX_("src",e4,a6,57,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3980_load9SliceSprite_scaleSub)
HXLINE(3982)		 ::Xml data1 = data;
HXDLIN(3982)		::String str = HX_("",00,00,00,00);
HXDLIN(3982)		if (::hx::IsNotNull( data1->get(srcString) )) {
HXLINE(3982)			str = data1->get(srcString);
HXDLIN(3982)			bool _hx_tmp;
HXDLIN(3982)			if ((str != HX_("",00,00,00,00))) {
HXLINE(3982)				_hx_tmp = ::hx::IsNull( str );
            			}
            			else {
HXLINE(3982)				_hx_tmp = true;
            			}
HXDLIN(3982)			if (_hx_tmp) {
HXLINE(3982)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(3982)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(3982)				try {
            					HX_STACK_CATCHABLE(::String, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(3982)					if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(3982)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + srcString) + HX_("\"",22,00,00,00)));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg1 = _hx_e;
HXLINE(3982)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(3982)						_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g = _hx_e;
HXLINE( 384)						{
HXLINE( 384)							null();
            						}
HXLINE(3982)						if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 384)							::String msg1 = ( (::String)(_g->value) );
HXLINE(3982)							{
HXLINE(3982)								 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(3982)								_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            							}
            						}
            						else {
HXLINE(3982)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(3982)		::String origSrc = str;
HXLINE(3984)		if ((src == origSrc)) {
HXLINE(3984)			return slice9;
            		}
HXLINE(3986)		 ::openfl::display::BitmapData srcAsset;
HXDLIN(3986)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(src)) ) )) {
HXLINE(3986)			srcAsset = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(src)) )->bitmap;
            		}
            		else {
HXLINE(3986)			srcAsset = null();
            		}
HXLINE(3988)		if (::hx::IsNull( srcAsset )) {
HXLINE(3988)			srcAsset = ::openfl::utils::Assets_obj::getBitmapData(origSrc,null());
            		}
HXLINE(3990)		 ::openfl::display::BitmapData origAsset = ::openfl::utils::Assets_obj::getBitmapData(origSrc,false);
HXLINE(3991)		Float srcScaleFactorX = (( (Float)(srcAsset->width) ) / ( (Float)(origAsset->width) ));
HXLINE(3992)		Float srcScaleFactorY = (( (Float)(srcAsset->height) ) / ( (Float)(origAsset->height) ));
HXLINE(3994)		bool _hx_tmp1;
HXDLIN(3994)		if ((::Math_obj::abs((((Float)1.0) - srcScaleFactorX)) <= ((Float)0.001))) {
HXLINE(3994)			_hx_tmp1 = (::Math_obj::abs((((Float)1.0) - srcScaleFactorY)) <= ((Float)0.001));
            		}
            		else {
HXLINE(3994)			_hx_tmp1 = false;
            		}
HXDLIN(3994)		if (_hx_tmp1) {
HXLINE(3996)			return slice9;
            		}
HXLINE(3999)		if (::hx::IsNotNull( slice9 )) {
HXLINE(4002)			slice9[0] = ::Std_obj::_hx_int((( (Float)(slice9->__get(0)) ) * srcScaleFactorX));
HXLINE(4003)			slice9[1] = ::Std_obj::_hx_int((( (Float)(slice9->__get(1)) ) * srcScaleFactorY));
HXLINE(4005)			int widthDiff = (origAsset->width - slice9->__get(2));
HXLINE(4006)			int heightDiff = (origAsset->height - slice9->__get(3));
HXLINE(4008)			widthDiff = ::Std_obj::_hx_int((( (Float)(widthDiff) ) * srcScaleFactorX));
HXLINE(4009)			heightDiff = ::Std_obj::_hx_int((( (Float)(heightDiff) ) * srcScaleFactorY));
HXLINE(4011)			slice9[2] = ::Std_obj::_hx_int(( (Float)((srcAsset->width - widthDiff)) ));
HXLINE(4012)			slice9[3] = ::Std_obj::_hx_int(( (Float)((srcAsset->height - heightDiff)) ));
            		}
HXLINE(4014)		return slice9;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,load9SliceSprite_scaleSub,return )

int FlxUI_obj::_loadTileRule( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4017__loadTileRule)
HXLINE(4018)		::String tileStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXLINE(4019)		int tile = 0;
HXLINE(4020)		::String _hx_switch_0 = tileStr;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4022)			tile = 16;
HXDLIN(4022)			goto _hx_goto_212;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4023)			tile = 1;
HXDLIN(4023)			goto _hx_goto_212;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(4021)			tile = 17;
HXDLIN(4021)			goto _hx_goto_212;
            		}
            		_hx_goto_212:;
HXLINE(4025)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileRule,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadBox( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4029__loadBox)
HXLINE(4030)		 ::flixel::addons::ui::FlxUISprite fs = null();
HXLINE(4032)		int thickness = ::Std_obj::_hx_int(this->_loadWidth(data,1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4034)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4037)		if (::hx::IsNull( bounds )) {
HXLINE(4038)			bounds =  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),::Math_obj::NEGATIVE_INFINITY)
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),::Math_obj::NEGATIVE_INFINITY));
            		}
HXLINE(4041)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4042)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4044)		if (::hx::IsNotNull( bounds )) {
HXLINE(4046)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4046)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4047)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4047)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4048)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4048)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4049)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4049)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4052)		::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4053)		int C = 0;
HXLINE(4054)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4056)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4056)			if (::hx::IsNull( return_val )) {
HXLINE(4056)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            			}
HXDLIN(4056)			C = ( (int)(return_val) );
            		}
HXLINE(4058)		fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(4059)		::String key = ((((((W + HX_("x",78,00,00,00)) + H) + HX_(":",3a,00,00,00)) + C) + HX_(":",3a,00,00,00)) + thickness);
HXLINE(4061)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key)) ) )) {
HXLINE(4063)			fs->loadGraphic(key,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(4067)			fs->makeGraphic(W,H,C,false,key);
HXLINE(4068)			 ::openfl::geom::Rectangle r =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,thickness,thickness,(W - (thickness * 2)),(H - (thickness * 2)));
HXLINE(4069)			fs->graphic->bitmap->fillRect(r,0);
            		}
HXLINE(4072)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBox,return )

 ::flixel::addons::ui::FlxUILine FlxUI_obj::_loadLine( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4076__loadLine)
HXLINE(4077)		::String axis = ::flixel::addons::ui::U_obj::xml_str(data,HX_("axis",a1,1c,79,40),true,HX_("horizontal",e4,fc,c3,15));
HXLINE(4078)		int thickness = ::Std_obj::_hx_int(this->_loadWidth(data,-1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4080)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4083)		if (::hx::IsNull( bounds )) {
HXLINE(4084)			bounds =  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),( (Float)(1) ))
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),( (Float)(1) )));
            		}
HXLINE(4086)		::String _hx_switch_0 = axis;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(4087)			bounds->__SetField(HX_("max_height",62,6b,96,0d),thickness,::hx::paccDynamic);
HXDLIN(4087)			bounds->__SetField(HX_("min_height",34,3e,29,69),thickness,::hx::paccDynamic);
HXDLIN(4087)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4088)			bounds->__SetField(HX_("max_width",eb,9a,40,c1),thickness,::hx::paccDynamic);
HXDLIN(4088)			bounds->__SetField(HX_("min_width",59,88,fd,ea),thickness,::hx::paccDynamic);
HXDLIN(4088)			goto _hx_goto_215;
            		}
            		_hx_goto_215:;
HXLINE(4091)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4092)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4094)		if (::hx::IsNotNull( bounds )) {
HXLINE(4095)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4095)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4096)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4096)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4097)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4097)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4098)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4098)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4101)		::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4102)		int C = 0;
HXLINE(4103)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4104)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4104)			if (::hx::IsNull( return_val )) {
HXLINE(4104)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            			}
HXDLIN(4104)			C = ( (int)(return_val) );
            		}
HXLINE(4107)		 ::flixel::addons::ui::LineAxis lineAxis;
HXDLIN(4107)		if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(4107)			lineAxis = ::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn();
            		}
            		else {
HXLINE(4107)			lineAxis = ::flixel::addons::ui::LineAxis_obj::VERTICAL_dyn();
            		}
HXLINE(4108)		Float lineLength;
HXDLIN(4108)		if (::hx::IsPointerEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4108)			lineLength = ( (Float)(W) );
            		}
            		else {
HXLINE(4108)			lineLength = ( (Float)(H) );
            		}
HXLINE(4109)		Float lineThickness;
HXDLIN(4109)		if ((thickness != -1)) {
HXLINE(4109)			lineThickness = ( (Float)(thickness) );
            		}
            		else {
HXLINE(4109)			if (::hx::IsPointerEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4109)				lineThickness = ( (Float)(H) );
            			}
            			else {
HXLINE(4109)				lineThickness = ( (Float)(W) );
            			}
            		}
HXLINE(4111)		 ::flixel::addons::ui::FlxUILine fl =  ::flixel::addons::ui::FlxUILine_obj::__alloc( HX_CTX ,0,0,lineAxis,lineLength,lineThickness,C);
HXLINE(4113)		return fl;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLine,return )

 ::flixel::addons::ui::FlxUIBar FlxUI_obj::_loadBar( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4117__loadBar)
HXLINE(4118)		 ::flixel::addons::ui::FlxUIBar fb = null();
HXLINE(4120)		 ::Dynamic style =  ::Dynamic(::hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("emptyColors",1d,5c,af,8e),null())
            			->setFixed(1,HX_("filledColor",61,28,7c,97),null())
            			->setFixed(2,HX_("chunkSize",ce,cd,77,9f),null())
            			->setFixed(3,HX_("emptyImgSrc",0e,0d,a3,ca),HX_("",00,00,00,00))
            			->setFixed(4,HX_("emptyColor",96,47,af,ca),null())
            			->setFixed(5,HX_("borderColor",d7,3c,d5,d6),null())
            			->setFixed(6,HX_("filledColors",f2,2c,27,f5),null())
            			->setFixed(7,HX_("gradRotation",2c,47,cd,fb),null())
            			->setFixed(8,HX_("filledImgSrc",e3,dd,1a,31),HX_("",00,00,00,00)));
HXLINE(4135)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,-1,null(),null()));
HXLINE(4136)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(4138)		::String direction = ::flixel::addons::ui::U_obj::xml_str(data,HX_("fill_direction",43,0e,7d,b3),true,null());
HXLINE(4139)		 ::flixel::ui::FlxBarFillDirection fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXLINE(4141)		::String _hx_switch_0 = direction;
            		if (  (_hx_switch_0==HX_("bottom_to_top",a5,98,d9,85)) ){
HXLINE(4146)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::BOTTOM_TO_TOP_dyn();
HXDLIN(4146)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_inside_out",46,c6,92,00)) ){
HXLINE(4147)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_INSIDE_OUT_dyn();
HXDLIN(4147)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_outside_in",ba,dc,41,90)) ){
HXLINE(4148)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_OUTSIDE_IN_dyn();
HXDLIN(4148)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("left_to_right",50,bd,a3,f7)) ){
HXLINE(4143)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
HXDLIN(4143)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("right_to_left",e8,a1,2d,02)) ){
HXLINE(4144)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn();
HXDLIN(4144)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("top_to_bottom",05,d7,5d,10)) ){
HXLINE(4145)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXDLIN(4145)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("vertical_inside_out",f4,eb,d7,2d)) ){
HXLINE(4149)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_INSIDE_OUT_dyn();
HXDLIN(4149)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("vertical_outside_in",68,02,87,bd)) ){
HXLINE(4150)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_OUTSIDE_IN_dyn();
HXDLIN(4150)			goto _hx_goto_217;
            		}
            		/* default */{
HXLINE(4151)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
            		}
            		_hx_goto_217:;
HXLINE(4154)		::String parentRefStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("parent_ref",7e,00,5b,f3),true,null());
HXLINE(4155)		::Dynamic parentRef;
HXDLIN(4155)		if ((parentRefStr != HX_("",00,00,00,00))) {
HXLINE(4155)			parentRef = this->getAsset(parentRefStr,null());
            		}
            		else {
HXLINE(4155)			parentRef = null();
            		}
HXLINE(4156)		::String variableName = ::flixel::addons::ui::U_obj::xml_str(data,HX_("variable",3c,12,0d,69),null(),null());
HXLINE(4158)		Float value = ::flixel::addons::ui::U_obj::xml_f(data,HX_("value",71,7f,b8,31),-1);
HXLINE(4160)		Float min = ::flixel::addons::ui::U_obj::xml_f(data,HX_("min",92,11,53,00),0);
HXLINE(4161)		Float max = ::flixel::addons::ui::U_obj::xml_f(data,HX_("max",a4,0a,53,00),100);
HXLINE(4163)		if ((value == -1)) {
HXLINE(4165)			value = max;
            		}
HXLINE(4168)		style->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(data,HX_("border_color",90,7e,e8,6e),null(),null()),::hx::paccDynamic);
HXLINE(4169)		bool showBorder = ::hx::IsNotNull( style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic) );
HXLINE(4171)		style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data,HX_("filled_color",c6,ab,4f,40),null(),null()),::hx::paccDynamic);
HXLINE(4172)		if (::hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),::hx::paccDynamic) )) {
HXLINE(4174)			style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data,HX_("color",63,71,5c,4a),null(),null()),::hx::paccDynamic);
            		}
HXLINE(4177)		style->__SetField(HX_("emptyColor",96,47,af,ca),::flixel::addons::ui::U_obj::xml_color(data,HX_("empty_color",f1,da,d7,d9),null(),null()),::hx::paccDynamic);
HXLINE(4179)		style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("filled_colors",ed,a1,66,05),null()),::hx::paccDynamic);
HXLINE(4180)		style->__SetField(HX_("emptyColors",1d,5c,af,8e),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("empty_colors",62,b8,07,c3),null()),::hx::paccDynamic);
HXLINE(4181)		if (::hx::IsNull( style->__Field(HX_("filledColors",f2,2c,27,f5),::hx::paccDynamic) )) {
HXLINE(4183)			style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("colors",b0,c5,86,c6),null()),::hx::paccDynamic);
            		}
HXLINE(4186)		style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src_filled",dd,dc,1c,63),null(),null(),null()),::hx::paccDynamic);
HXLINE(4187)		style->__SetField(HX_("emptyImgSrc",0e,0d,a3,ca),this->loadScaledSrc(data,HX_("src_empty",b2,6b,77,bb),null(),null(),null()),::hx::paccDynamic);
HXLINE(4188)		if (::hx::IsEq( style->__Field(HX_("filledImgSrc",e3,dd,1a,31),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(4190)			style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src",e4,a6,57,00),null(),null(),null()),::hx::paccDynamic);
            		}
HXLINE(4193)		style->__SetField(HX_("chunkSize",ce,cd,77,9f),::flixel::addons::ui::U_obj::xml_i(data,HX_("chunk_size",13,8b,ba,d8),1),::hx::paccDynamic);
HXLINE(4194)		style->__SetField(HX_("gradRotation",2c,47,cd,fb),::flixel::addons::ui::U_obj::xml_i(data,HX_("rotation",3e,3d,86,08),90),::hx::paccDynamic);
HXLINE(4196)		bool _hx_tmp;
HXDLIN(4196)		bool _hx_tmp1;
HXDLIN(4196)		if (::hx::IsEq( style->__Field(HX_("filledImgSrc",e3,dd,1a,31),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(4196)			_hx_tmp1 = ::hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),::hx::paccDynamic) );
            		}
            		else {
HXLINE(4196)			_hx_tmp1 = false;
            		}
HXDLIN(4196)		if (_hx_tmp1) {
HXLINE(4196)			_hx_tmp = ::hx::IsNull( style->__Field(HX_("filledColors",f2,2c,27,f5),::hx::paccDynamic) );
            		}
            		else {
HXLINE(4196)			_hx_tmp = false;
            		}
HXDLIN(4196)		if (_hx_tmp) {
HXLINE(4198)			style->__SetField(HX_("filledColor",61,28,7c,97),-65536,::hx::paccDynamic);
            		}
HXLINE(4201)		bool _hx_tmp2;
HXDLIN(4201)		if ((W == -1)) {
HXLINE(4201)			_hx_tmp2 = (H == -1);
            		}
            		else {
HXLINE(4201)			_hx_tmp2 = false;
            		}
HXDLIN(4201)		if (_hx_tmp2) {
HXLINE(4203)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,0,0,fillDir,100,10,parentRef,variableName,min,max,showBorder);
            		}
            		else {
HXLINE(4207)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,0,0,fillDir,W,H,parentRef,variableName,min,max,showBorder);
            		}
HXLINE(4210)		fb->set_style(style);
HXLINE(4211)		fb->resize(( (Float)(fb->barWidth) ),( (Float)(fb->barHeight) ));
HXLINE(4213)		fb->set_value(value);
HXLINE(4215)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBar,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadSprite( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4219__loadSprite)
HXLINE(4220)		::String src = HX_("",00,00,00,00);
HXLINE(4221)		 ::flixel::addons::ui::FlxUISprite fs = null();
HXLINE(4223)		src = this->loadScaledSrc(data,null(),null(),null(),null());
HXLINE(4225)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4228)		 ::flixel::math::FlxBasePoint resize = this->getResizeRatio(data,-1);
HXLINE(4230)		Float resize_ratio = resize->x;
HXLINE(4231)		int resize_ratio_axis = ::Std_obj::_hx_int(resize->y);
HXLINE(4232)		 ::flixel::math::FlxBasePoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(4234)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,-1,null(),null()));
HXLINE(4235)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(4237)		if (::hx::IsNotNull( bounds )) {
HXLINE(4239)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4239)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4240)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4240)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4241)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4241)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4242)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4242)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4245)		if ((src != HX_("",00,00,00,00))) {
HXLINE(4247)			bool _hx_tmp;
HXDLIN(4247)			if ((W == -1)) {
HXLINE(4247)				_hx_tmp = (H == -1);
            			}
            			else {
HXLINE(4247)				_hx_tmp = false;
            			}
HXDLIN(4247)			if (_hx_tmp) {
HXLINE(4249)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,src);
            			}
            			else {
HXLINE(4254)				bool _hx_tmp1;
HXDLIN(4254)				if ((resize_ratio != -1)) {
HXLINE(4254)					if ((W != -1)) {
HXLINE(4254)						_hx_tmp1 = (H == -1);
            					}
            					else {
HXLINE(4254)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE(4254)					_hx_tmp1 = false;
            				}
HXDLIN(4254)				if (_hx_tmp1) {
HXLINE(4257)					if ((resize_ratio_axis == -1)) {
HXLINE(4259)						if ((W == -1)) {
HXLINE(4259)							resize_ratio_axis = 0;
            						}
HXLINE(4260)						if ((H == -1)) {
HXLINE(4260)							resize_ratio_axis = 1;
            						}
            					}
HXLINE(4264)					if ((resize_ratio_axis == 1)) {
HXLINE(4266)						H = ( (int)((( (Float)(W) ) * (( (Float)(1) ) / resize_ratio))) );
            					}
            					else {
HXLINE(4268)						if ((resize_ratio_axis == 0)) {
HXLINE(4270)							W = ( (int)((( (Float)(H) ) * (( (Float)(1) ) / resize_ratio))) );
            						}
            					}
            				}
HXLINE(4274)				bool smooth = this->loadSmooth(data,true);
HXLINE(4275)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,::flixel::addons::ui::U_obj::loadScaledImage(::flixel::addons::ui::U_obj::xml_str(data,HX_("src",e4,a6,57,00),null(),null()),( (Float)(W) ),( (Float)(H) ),smooth));
            			}
            		}
            		else {
HXLINE(4280)			::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),null(),null());
HXLINE(4281)			int C = 0;
HXLINE(4282)			if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4284)				 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4284)				if (::hx::IsNull( return_val )) {
HXLINE(4284)					HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            				}
HXDLIN(4284)				C = ( (int)(return_val) );
            			}
HXLINE(4286)			fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(4287)			fs->makeGraphic(W,H,C,null(),null());
            		}
HXLINE(4290)		fs->set_resize_point(resize_point);
HXLINE(4291)		fs->set_resize_ratio(resize_ratio);
HXLINE(4292)		fs->resize_ratio_axis = resize_ratio_axis;
HXLINE(4294)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadSprite,return )

bool FlxUI_obj::loadSmooth( ::Xml scaleNode,bool defaultValue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4298_loadSmooth)
HXLINE(4299)		::String defaultStr;
HXDLIN(4299)		if (defaultValue) {
HXLINE(4299)			defaultStr = HX_("true",4e,a7,03,4d);
            		}
            		else {
HXLINE(4299)			defaultStr = HX_("false",a3,35,4f,fb);
            		}
HXLINE(4300)		::String smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("smooth",2e,08,6b,07),true,defaultStr);
HXLINE(4301)		if ((smoothStr == HX_("",00,00,00,00))) {
HXLINE(4303)			smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("antialias",ae,d6,e9,75),true,defaultStr);
            		}
HXLINE(4305)		return ::flixel::addons::ui::U_obj::boolify(smoothStr);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadSmooth,return )

::String FlxUI_obj::loadScaledSrc( ::Xml data,::String __o_attName,::String __o_scaleName,::hx::Null< int >  __o_tilesWide,::hx::Null< int >  __o_tilesTall){
            		::String attName = __o_attName;
            		if (::hx::IsNull(__o_attName)) attName = HX_("src",e4,a6,57,00);
            		::String scaleName = __o_scaleName;
            		if (::hx::IsNull(__o_scaleName)) scaleName = HX_("scale",8a,ce,ce,78);
            		int tilesWide = __o_tilesWide.Default(1);
            		int tilesTall = __o_tilesTall.Default(1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4315_loadScaledSrc)
HXLINE(4316)		::String src = ::flixel::addons::ui::U_obj::xml_str(data,attName,null(),null());
HXLINE(4317)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,scaleName)) {
HXLINE(4319)			int _g = 0;
HXDLIN(4319)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,scaleName);
HXDLIN(4319)			while((_g < _g1->length)){
HXLINE(4319)				 ::Xml scaleNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(4319)				_g = (_g + 1);
HXLINE(4321)				Float ratio = ::flixel::addons::ui::U_obj::xml_f(scaleNode,HX_("screen_ratio",b8,10,95,88),-1);
HXLINE(4322)				Float tolerance = ::flixel::addons::ui::U_obj::xml_f(scaleNode,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(4323)				Float actualRatio = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(::flixel::FlxG_obj::height) ));
HXLINE(4326)				bool _hx_tmp;
HXDLIN(4326)				if (!((ratio < 0))) {
HXLINE(4326)					if ((ratio > 0)) {
HXLINE(4326)						_hx_tmp = (::Math_obj::abs((ratio - actualRatio)) <= tolerance);
            					}
            					else {
HXLINE(4326)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(4326)					_hx_tmp = true;
            				}
HXDLIN(4326)				if (_hx_tmp) {
HXLINE(4328)					::String suffix = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("suffix",d1,e2,a5,9c),null(),null());
HXLINE(4329)					::String srcSuffix = (src + suffix);
HXLINE(4330)					 ::openfl::display::BitmapData testAsset = null();
HXLINE(4331)					Float scale_ = ( (Float)(-1) );
HXLINE(4332)					bool smooth = this->loadSmooth(scaleNode,true);
HXLINE(4334)					Float to_height = this->_loadHeight(scaleNode,-1,HX_("to_height",6b,29,06,d3),null());
HXLINE(4336)					if ((to_height != -1)) {
HXLINE(4338)						 ::openfl::display::BitmapData testAsset1 = ::flixel::addons::ui::U_obj::getBmp(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()));
HXLINE(4339)						if (::hx::IsNotNull( testAsset1 )) {
HXLINE(4341)							scale_ = (to_height / ( (Float)(testAsset1->height) ));
            						}
            					}
            					else {
HXLINE(4346)						scale_ = this->_loadScale(scaleNode,-1,null());
HXLINE(4347)						if ((scale_ == -1)) {
HXLINE(4349)							scale_ = this->_loadScale(scaleNode,-1,HX_("value",71,7f,b8,31));
            						}
            					}
HXLINE(4353)					Float scale_x;
HXDLIN(4353)					if ((scale_ != -1)) {
HXLINE(4353)						scale_x = scale_;
            					}
            					else {
HXLINE(4353)						scale_x = this->_loadScaleX(scaleNode,-1);
            					}
HXLINE(4354)					Float scale_y;
HXDLIN(4354)					if ((scale_ != -1)) {
HXLINE(4354)						scale_y = scale_;
            					}
            					else {
HXLINE(4354)						scale_y = this->_loadScaleY(scaleNode,-1);
            					}
HXLINE(4356)					Float sw = ( (Float)(0) );
HXLINE(4357)					Float sh = ( (Float)(0) );
HXLINE(4359)					bool _hx_tmp1;
HXDLIN(4359)					if ((scale_x > 0)) {
HXLINE(4359)						_hx_tmp1 = (scale_y > 0);
            					}
            					else {
HXLINE(4359)						_hx_tmp1 = false;
            					}
HXDLIN(4359)					if (_hx_tmp1) {
HXLINE(4361)						if ((scale_x <= 0)) {
HXLINE(4361)							scale_x = ((Float)1.0);
            						}
HXLINE(4362)						if ((scale_y <= 0)) {
HXLINE(4362)							scale_y = ((Float)1.0);
            						}
HXLINE(4364)						sw = this->_loadWidth(scaleNode,-1,null(),null());
HXLINE(4365)						sh = this->_loadHeight(scaleNode,-1,null(),null());
HXLINE(4367)						bool _hx_tmp2;
HXDLIN(4367)						if ((sw != -1)) {
HXLINE(4367)							_hx_tmp2 = (sh == -1);
            						}
            						else {
HXLINE(4367)							_hx_tmp2 = true;
            						}
HXDLIN(4367)						if (_hx_tmp2) {
HXLINE(4369)							testAsset = ::openfl::utils::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4370)							sw = ( (Float)(testAsset->width) );
HXLINE(4371)							sh = ( (Float)(testAsset->height) );
            						}
HXLINE(4374)						sw = (sw * scale_x);
HXLINE(4375)						sh = (sh * scale_y);
            					}
            					else {
HXLINE(4380)						sw = this->_loadWidth(scaleNode,-1,null(),null());
HXLINE(4381)						sh = this->_loadHeight(scaleNode,-1,null(),null());
            					}
HXLINE(4384)					bool _hx_tmp3;
HXDLIN(4384)					if ((sw != 0)) {
HXLINE(4384)						_hx_tmp3 = (sh != 0);
            					}
            					else {
HXLINE(4384)						_hx_tmp3 = false;
            					}
HXDLIN(4384)					if (_hx_tmp3) {
HXLINE(4386)						bool _hx_tmp4;
HXDLIN(4386)						if ((tilesTall <= 1)) {
HXLINE(4386)							_hx_tmp4 = (tilesWide > 1);
            						}
            						else {
HXLINE(4386)							_hx_tmp4 = true;
            						}
HXDLIN(4386)						if (_hx_tmp4) {
HXLINE(4388)							testAsset = ::openfl::utils::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4389)							::String str = ::flixel::addons::ui::U_obj::gfx(srcSuffix,null(),null(),null(),null(),null());
HXDLIN(4389)							int str1 = ::Std_obj::_hx_int((( (Float)(testAsset->width) ) / ( (Float)(tilesWide) )));
HXDLIN(4389)							int str2 = ::Std_obj::_hx_int((( (Float)(testAsset->height) ) / ( (Float)(tilesTall) )));
HXDLIN(4389)							int str3 = ::Std_obj::_hx_int(sw);
HXDLIN(4389)							::String str4 = ::flixel::addons::ui::U_obj::scaleAndStoreTileset(str,scale_y,str1,str2,str3,::Std_obj::_hx_int((sh / ( (Float)(tilesTall) ))),smooth);
HXLINE(4390)							this->addToScaledAssets(str4);
HXLINE(4391)							return str4;
            						}
            						else {
HXLINE(4395)							::String str5 = ::flixel::addons::ui::U_obj::loadScaledImage(srcSuffix,sw,sh,smooth);
HXLINE(4396)							this->addToScaledAssets(str5);
HXLINE(4397)							return str5;
            						}
            					}
HXLINE(4400)					goto _hx_goto_221;
            				}
            			}
            			_hx_goto_221:;
            		}
HXLINE(4404)		 ::Xml data1 = data;
HXDLIN(4404)		::String str6 = HX_("",00,00,00,00);
HXDLIN(4404)		if (::hx::IsNotNull( data1->get(attName) )) {
HXLINE(4404)			str6 = data1->get(attName);
HXDLIN(4404)			bool _hx_tmp5;
HXDLIN(4404)			if ((str6 != HX_("",00,00,00,00))) {
HXLINE(4404)				_hx_tmp5 = ::hx::IsNull( str6 );
            			}
            			else {
HXLINE(4404)				_hx_tmp5 = true;
            			}
HXDLIN(4404)			if (_hx_tmp5) {
HXLINE(4404)				str6 = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4404)				str6 = ::flixel::addons::ui::U_obj::gfx(str6,null(),null(),null(),null(),null());
HXDLIN(4404)				try {
            					HX_STACK_CATCHABLE(::String, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(4404)					if (!(::openfl::utils::Assets_obj::exists(str6,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(4404)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + attName) + HX_("\"",22,00,00,00)));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg1 = _hx_e;
HXLINE(4404)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(4404)						_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g2 = _hx_e;
HXLINE( 384)						{
HXLINE( 384)							null();
            						}
HXLINE(4404)						if (::Std_obj::isOfType(_g2->value,::hx::ClassOf< ::String >())) {
HXLINE( 384)							::String msg1 = ( (::String)(_g2->value) );
HXLINE(4404)							{
HXLINE(4404)								 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXDLIN(4404)								_this1->advanced((HX_("FlxUI: U.xml_gfx() : ",f9,3c,00,4f) + msg1),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            							}
            						}
            						else {
HXLINE(4404)							HX_STACK_DO_THROW(_g2);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(4404)		return str6;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,loadScaledSrc,return )

int FlxUI_obj::thisWidth(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4416_thisWidth)
HXDLIN(4416)		return ::flixel::FlxG_obj::width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,thisWidth,return )

int FlxUI_obj::thisHeight(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4424_thisHeight)
HXDLIN(4424)		return ::flixel::FlxG_obj::height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,thisHeight,return )

Float FlxUI_obj::_getAnchorPos(::Dynamic thing,::String axis,::String str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4431__getAnchorPos)
HXLINE(4432)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE(4434)			return ( (Float)(0) );
HXDLIN(4434)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(4438)			if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4438)				return (( (Float)(this->screenWidth()) ) / ( (Float)(2) ));
            			}
            			else {
HXLINE(4439)				if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4439)					return (this->screenHeight() / ( (Float)(2) ));
            				}
            			}
HXLINE(4438)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(4441)			return this->screenHeight();
HXDLIN(4441)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4435)			return ( (Float)(0) );
HXDLIN(4435)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4436)			return ( (Float)(this->screenWidth()) );
HXDLIN(4436)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4440)			return ( (Float)(0) );
HXDLIN(4440)			goto _hx_goto_225;
            		}
            		/* default */{
HXLINE(4443)			Float perc = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(4444)			if (!(::Math_obj::isNaN(perc))) {
HXLINE(4445)				if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4446)					return (perc * ( (Float)(this->screenWidth()) ));
            				}
            				else {
HXLINE(4447)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4448)						return (perc * this->screenHeight());
            					}
            				}
            			}
            			else {
HXLINE(4451)				 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00));
HXLINE(4453)				if (r->match(str)) {
HXLINE(4454)					::String wh = HX_("",00,00,00,00);
HXLINE(4455)					if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4455)						wh = HX_("w",77,00,00,00);
            					}
HXLINE(4456)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4456)						wh = HX_("h",68,00,00,00);
            					}
HXLINE(4457)					Float assetValue = this->_getStretch(1,wh,str);
HXLINE(4458)					return assetValue;
            				}
            			}
            		}
            		_hx_goto_225:;
HXLINE(4462)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getAnchorPos,return )

 ::flixel::addons::ui::Rounding FlxUI_obj::getRound( ::Xml node,::String __o_defaultStr){
            		::String defaultStr = __o_defaultStr;
            		if (::hx::IsNull(__o_defaultStr)) defaultStr = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4466_getRound)
HXLINE(4467)		::String roundStr = ::flixel::addons::ui::U_obj::xml_str(node,HX_("round",4e,f8,65,ed),true,defaultStr);
HXLINE(4468)		::String _hx_switch_0 = roundStr;
            		if (  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("ceil",05,1f,bd,41)) ||  (_hx_switch_0==HX_("ceiling",fd,5e,9e,33)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4473)			return ::flixel::addons::ui::Rounding_obj::Ceil_dyn();
HXDLIN(4473)			goto _hx_goto_227;
            		}
            		if (  (_hx_switch_0==HX_("-1",64,27,00,00)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("floor",cc,d1,96,02)) ){
HXLINE(4471)			return ::flixel::addons::ui::Rounding_obj::Floor_dyn();
HXDLIN(4471)			goto _hx_goto_227;
            		}
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("round",4e,f8,65,ed)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ){
HXLINE(4475)			return ::flixel::addons::ui::Rounding_obj::Round_dyn();
HXDLIN(4475)			goto _hx_goto_227;
            		}
            		_hx_goto_227:;
HXLINE(4477)		return ::flixel::addons::ui::Rounding_obj::None_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getRound,return )

Float FlxUI_obj::doRound(Float f, ::flixel::addons::ui::Rounding round){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4482_doRound)
HXDLIN(4482)		switch((int)(round->_hx_getIndex())){
            			case (int)0: {
HXLINE(4485)				return ( (Float)(::Math_obj::floor(f)) );
            			}
            			break;
            			case (int)1: {
HXLINE(4487)				return ( (Float)(::Math_obj::ceil(f)) );
            			}
            			break;
            			case (int)2: {
HXLINE(4486)				return ( (Float)(::Math_obj::round(f)) );
            			}
            			break;
            			case (int)3: {
HXLINE(4484)				return f;
            			}
            			break;
            		}
HXLINE(4482)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,doRound,return )

 ::Dynamic FlxUI_obj::calcMaxMinSize( ::Xml data, ::Dynamic width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4493_calcMaxMinSize)
HXLINE(4494)		Float min_w = ( (Float)(0) );
HXLINE(4495)		Float min_h = ( (Float)(0) );
HXLINE(4496)		Float max_w = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4497)		Float max_h = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4498)		Float temp_min_w = ( (Float)(0) );
HXLINE(4499)		Float temp_min_h = ( (Float)(0) );
HXLINE(4500)		Float temp_max_w = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4501)		Float temp_max_h = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4503)		 ::flixel::addons::ui::Rounding round = ::flixel::addons::ui::Rounding_obj::None_dyn();
HXLINE(4505)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("exact_size",81,45,3f,e0))) {
HXLINE(4507)			int _g = 0;
HXDLIN(4507)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("exact_size",81,45,3f,e0));
HXDLIN(4507)			while((_g < _g1->length)){
HXLINE(4507)				 ::Xml exactNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(4507)				_g = (_g + 1);
HXLINE(4509)				::String exact_w_str = ::flixel::addons::ui::U_obj::xml_str(exactNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4510)				::String exact_h_str = ::flixel::addons::ui::U_obj::xml_str(exactNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4512)				round = this->getRound(exactNode,null());
HXLINE(4513)				min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),exact_w_str,0),round);
HXLINE(4514)				min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),exact_h_str,0),round);
HXLINE(4515)				max_w = this->doRound(min_w,round);
HXLINE(4516)				max_h = this->doRound(min_h,round);
            			}
            		}
            		else {
HXLINE(4519)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("min_size",ce,b9,6e,63))) {
HXLINE(4521)				int _g2 = 0;
HXDLIN(4521)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("min_size",ce,b9,6e,63));
HXDLIN(4521)				while((_g2 < _g3->length)){
HXLINE(4521)					 ::Xml minNode = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(4521)					_g2 = (_g2 + 1);
HXLINE(4523)					::String min_w_str = ::flixel::addons::ui::U_obj::xml_str(minNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4524)					::String min_h_str = ::flixel::addons::ui::U_obj::xml_str(minNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4525)					round = this->getRound(minNode,null());
HXLINE(4526)					temp_min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),min_w_str,0),round);
HXLINE(4527)					temp_min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),min_h_str,0),round);
HXLINE(4528)					if ((temp_min_w > min_w)) {
HXLINE(4530)						min_w = temp_min_w;
            					}
HXLINE(4532)					if ((temp_min_h > min_h)) {
HXLINE(4534)						min_h = temp_min_h;
            					}
            				}
            			}
            			else {
HXLINE(4538)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("max_size",7c,9f,54,16))) {
HXLINE(4540)					int _g4 = 0;
HXDLIN(4540)					::Array< ::Dynamic> _g5 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("max_size",7c,9f,54,16));
HXDLIN(4540)					while((_g4 < _g5->length)){
HXLINE(4540)						 ::Xml maxNode = _g5->__get(_g4).StaticCast<  ::Xml >();
HXDLIN(4540)						_g4 = (_g4 + 1);
HXLINE(4542)						::String max_w_str = ::flixel::addons::ui::U_obj::xml_str(maxNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4543)						::String max_h_str = ::flixel::addons::ui::U_obj::xml_str(maxNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4544)						round = this->getRound(maxNode,null());
HXLINE(4545)						temp_max_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),max_w_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(4546)						temp_max_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),max_h_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(4547)						if ((temp_max_w < max_w)) {
HXLINE(4549)							max_w = temp_max_w;
            						}
HXLINE(4551)						if ((temp_max_h < max_h)) {
HXLINE(4553)							max_h = temp_max_h;
            						}
            					}
            				}
            				else {
HXLINE(4559)					return null();
            				}
            			}
            		}
HXLINE(4562)		if (::hx::IsNotNull( width )) {
HXLINE(4564)			if (::hx::IsGreater( width,min_w )) {
HXLINE(4564)				min_w = ( (Float)(width) );
            			}
HXLINE(4565)			if (::hx::IsLess( width,max_w )) {
HXLINE(4565)				max_w = ( (Float)(width) );
            			}
            		}
HXLINE(4567)		if (::hx::IsNotNull( height )) {
HXLINE(4569)			if (::hx::IsGreater( height,min_h )) {
HXLINE(4569)				min_h = ( (Float)(height) );
            			}
HXLINE(4570)			if (::hx::IsLess( height,max_h )) {
HXLINE(4570)				max_h = ( (Float)(height) );
            			}
            		}
HXLINE(4575)		if ((max_w <= 0)) {
HXLINE(4575)			max_w = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(4576)		if ((max_h <= 0)) {
HXLINE(4576)			max_h = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(4578)		return  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("max_width",eb,9a,40,c1),max_w)
            			->setFixed(1,HX_("min_width",59,88,fd,ea),min_w)
            			->setFixed(2,HX_("max_height",62,6b,96,0d),max_h)
            			->setFixed(3,HX_("min_height",34,3e,29,69),min_h));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,calcMaxMinSize,return )

Float FlxUI_obj::_getDataSize(::String target,::String str,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4582__getDataSize)
HXLINE(4583)		if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(4585)			return ::Std_obj::parseFloat(str);
            		}
HXLINE(4587)		Float percf = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(4588)		if (!(::Math_obj::isNaN(percf))) {
HXLINE(4590)			::String _hx_switch_0 = target;
            			if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(4593)				return (this->screenHeight() * percf);
HXDLIN(4593)				goto _hx_goto_234;
            			}
            			if (  (_hx_switch_0==HX_("scale",8a,ce,ce,78)) ||  (_hx_switch_0==HX_("scale_x",43,58,07,65)) ||  (_hx_switch_0==HX_("scale_y",44,58,07,65)) ){
HXLINE(4594)				return percf;
HXDLIN(4594)				goto _hx_goto_234;
            			}
            			if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(4592)				return (( (Float)(this->screenWidth()) ) * percf);
HXDLIN(4592)				goto _hx_goto_234;
            			}
            			_hx_goto_234:;
            		}
            		else {
HXLINE(4599)			if ((str.indexOf(HX_("stretch:",95,06,83,92),null()) == 0)) {
HXLINE(4601)				str = ::StringTools_obj::replace(str,HX_("stretch:",95,06,83,92),HX_("",00,00,00,00));
HXLINE(4602)				::Array< ::String > arr = str.split(HX_(",",2c,00,00,00));
HXLINE(4603)				Float stretch_0 = this->_getStretch(0,target,arr->__get(0));
HXLINE(4604)				Float stretch_1 = this->_getStretch(1,target,arr->__get(1));
HXLINE(4605)				bool _hx_tmp;
HXDLIN(4605)				if ((stretch_0 != -1)) {
HXLINE(4605)					_hx_tmp = (stretch_1 != -1);
            				}
            				else {
HXLINE(4605)					_hx_tmp = false;
            				}
HXDLIN(4605)				if (_hx_tmp) {
HXLINE(4607)					return (stretch_1 - stretch_0);
            				}
            				else {
HXLINE(4611)					return default_;
            				}
            			}
            			else {
HXLINE(4614)				if ((str.indexOf(HX_("asset:",4a,48,03,4c),null()) == 0)) {
HXLINE(4616)					str = ::StringTools_obj::replace(str,HX_("asset:",4a,48,03,4c),HX_("",00,00,00,00));
HXLINE(4617)					Float assetValue = this->_getStretch(1,target,str);
HXLINE(4618)					return assetValue;
            				}
            				else {
HXLINE(4622)					 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00));
HXLINE(4623)					if (r->match(str)) {
HXLINE(4625)						Float assetValue1 = this->_getStretch(1,target,str);
HXLINE(4626)						return assetValue1;
            					}
            				}
            			}
HXLINE(4630)			::String ptStr = HX_("",00,00,00,00);
HXLINE(4632)			int _hx_tmp1 = str.indexOf(HX_("pt",04,62,00,00),null());
HXDLIN(4632)			if ((_hx_tmp1 == (str.length - 2))) {
HXLINE(4634)				ptStr = str.substr(0,(str.length - 2));
            			}
HXLINE(4637)			bool _hx_tmp2;
HXDLIN(4637)			if ((ptStr != HX_("",00,00,00,00))) {
HXLINE(4637)				_hx_tmp2 = ::flixel::addons::ui::U_obj::isStrNum(ptStr);
            			}
            			else {
HXLINE(4637)				_hx_tmp2 = false;
            			}
HXDLIN(4637)			if (_hx_tmp2) {
HXLINE(4639)				Float tempNum = ::Std_obj::parseFloat(ptStr);
HXLINE(4641)				::String _hx_switch_1 = target;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(4644)					return (this->_pointY * tempNum);
HXDLIN(4644)					goto _hx_goto_235;
            				}
            				if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(4643)					return (this->_pointX * tempNum);
HXDLIN(4643)					goto _hx_goto_235;
            				}
            				_hx_goto_235:;
            			}
            		}
HXLINE(4648)		return default_;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getDataSize,return )

::cpp::VirtualArray FlxUI_obj::_getOperation(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4660__getOperation)
HXLINE(4661)		::Array< ::String > list = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_239,5);
HXLINE(4663)		::String op = HX_("",00,00,00,00);
HXLINE(4664)		Float besti = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4666)		{
HXLINE(4666)			int _g = 0;
HXDLIN(4666)			while((_g < list->length)){
HXLINE(4666)				::String item = list->__get(_g);
HXDLIN(4666)				_g = (_g + 1);
HXLINE(4668)				int i = str.indexOf(item,null());
HXLINE(4669)				if ((i != -1)) {
HXLINE(4671)					if ((i < besti)) {
HXLINE(4673)						besti = ( (Float)(i) );
HXLINE(4674)						op = item;
            					}
            				}
            			}
            		}
HXLINE(4679)		bool hasPoint = false;
HXLINE(4681)		if ((op != HX_("",00,00,00,00))) {
HXLINE(4683)			if ((str.indexOf(op,null()) != -1)) {
HXLINE(4685)				int opindex = str.indexOf(op,null());
HXLINE(4687)				if ((opindex != (str.length - 1))) {
HXLINE(4689)					::String firstBit = str.substr(0,opindex);
HXLINE(4690)					::String secondBit = str.substr((opindex + 1),(str.length - (opindex + 1)));
HXLINE(4692)					Float f = ( (Float)(0) );
HXLINE(4695)					int ptIndex = secondBit.indexOf(HX_("pt",04,62,00,00),null());
HXLINE(4696)					bool _hx_tmp;
HXDLIN(4696)					if ((ptIndex != -1)) {
HXLINE(4696)						_hx_tmp = (ptIndex == (secondBit.length - 2));
            					}
            					else {
HXLINE(4696)						_hx_tmp = false;
            					}
HXDLIN(4696)					if (_hx_tmp) {
HXLINE(4698)						::String sansPt = ::StringTools_obj::replace(secondBit,HX_("pt",04,62,00,00),HX_("",00,00,00,00));
HXLINE(4699)						f = ::Std_obj::parseFloat(sansPt);
HXLINE(4700)						hasPoint = true;
            					}
            					else {
HXLINE(4704)						f = ::Std_obj::parseFloat(secondBit);
            					}
HXLINE(4707)					if (::Math_obj::isNaN(f)) {
HXLINE(4709)						f = this->getAssetProperty(1,HX_("",00,00,00,00),secondBit);
            					}
HXLINE(4711)					bool _hx_tmp1;
HXDLIN(4711)					if ((f == 0)) {
HXLINE(4711)						_hx_tmp1 = (secondBit != HX_("0",30,00,00,00));
            					}
            					else {
HXLINE(4711)						_hx_tmp1 = false;
            					}
HXDLIN(4711)					if (_hx_tmp1) {
HXLINE(4713)						return null();
            					}
            					else {
HXLINE(4717)						return ::cpp::VirtualArray_obj::__new(4)->init(0,firstBit)->init(1,op)->init(2,f)->init(3,hasPoint);
            					}
            				}
            			}
            		}
HXLINE(4723)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_getOperation,return )

Float FlxUI_obj::_doOperation(Float value,::String op,Float operand){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4727__doOperation)
HXLINE(4728)		::String _hx_switch_0 = op;
            		if (  (_hx_switch_0==HX_("*",2a,00,00,00)) ){
HXLINE(4733)			return (value * operand);
HXDLIN(4733)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE(4730)			return (value + operand);
HXDLIN(4730)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE(4731)			return (value - operand);
HXDLIN(4731)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("/",2f,00,00,00)) ){
HXLINE(4732)			return (value / operand);
HXDLIN(4732)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("^",5e,00,00,00)) ){
HXLINE(4734)			return ::Math_obj::pow(value,operand);
HXDLIN(4734)			goto _hx_goto_240;
            		}
            		_hx_goto_240:;
HXLINE(4736)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_doOperation,return )

Float FlxUI_obj::_getStretch(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4740__getStretch)
HXLINE(4741)		::cpp::VirtualArray arr = null();
HXLINE(4743)		::String op = HX_("",00,00,00,00);
HXLINE(4744)		Float operand = ( (Float)(0) );
HXLINE(4745)		bool hasPoint = false;
HXLINE(4747)		arr = this->_getOperation(str);
HXLINE(4749)		if (::hx::IsNotNull( arr )) {
HXLINE(4751)			str = ( (::String)(arr->__get(0)) );
HXLINE(4752)			op = ( (::String)(arr->__get(1)) );
HXLINE(4753)			operand = ( (Float)(arr->__get(2)) );
HXLINE(4754)			hasPoint = ( (bool)(arr->__get(3)) );
HXLINE(4756)			if (hasPoint) {
HXLINE(4757)				::String _hx_switch_0 = target;
            				if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(4761)					operand = (operand * this->_pointY);
HXDLIN(4761)					goto _hx_goto_242;
            				}
            				if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(4759)					operand = (operand * this->_pointX);
HXDLIN(4759)					goto _hx_goto_242;
            				}
            				/* default */{
HXLINE(4763)					operand = (operand * this->_pointY);
            				}
            				_hx_goto_242:;
            			}
            		}
HXLINE(4768)		Float return_val = this->getAssetProperty(index,target,str);
HXLINE(4770)		bool _hx_tmp;
HXDLIN(4770)		if ((return_val != -1)) {
HXLINE(4770)			_hx_tmp = (op != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(4770)			_hx_tmp = false;
            		}
HXDLIN(4770)		if (_hx_tmp) {
HXLINE(4772)			return_val = this->_doOperation(return_val,op,operand);
            		}
HXLINE(4775)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getStretch,return )

Float FlxUI_obj::getAssetProperty(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4779_getAssetProperty)
HXLINE(4780)		::String prop = HX_("",00,00,00,00);
HXLINE(4782)		if ((str.indexOf(HX_(".",2e,00,00,00),null()) != -1)) {
HXLINE(4784)			::Array< ::String > arr = null();
HXLINE(4785)			arr = str.split(HX_(".",2e,00,00,00));
HXLINE(4786)			str = arr->__get(0);
HXLINE(4787)			prop = arr->__get(1);
            		}
HXLINE(4790)		::Dynamic other = this->getAsset(str,null());
HXLINE(4792)		Float return_val = ( (Float)(0) );
HXLINE(4794)		if (::hx::IsNull( other )) {
HXLINE(4796)			::String _hx_switch_0 = str;
            			if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(4799)				return_val = this->screenHeight();
HXDLIN(4799)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4800)				return_val = ( (Float)(0) );
HXDLIN(4800)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4801)				return_val = ( (Float)(this->screenWidth()) );
HXDLIN(4801)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4798)				return_val = ( (Float)(0) );
HXDLIN(4798)				goto _hx_goto_244;
            			}
            			/* default */{
HXLINE(4803)				if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(4805)					return_val = ::Std_obj::parseFloat(str);
            				}
            				else {
HXLINE(4809)					return_val = ( (Float)(-1) );
            				}
            			}
            			_hx_goto_244:;
            		}
            		else {
HXLINE(4815)			::String _hx_switch_1 = target;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(4839)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(4841)					if ((index == 0)) {
HXLINE(4841)						Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4841)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
            					}
HXLINE(4842)					if ((index == 1)) {
HXLINE(4842)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(4846)					::String _hx_switch_2 = prop;
            					if (  (_hx_switch_2==HX_("center",d5,25,db,05)) ){
HXLINE(4851)						Float other2 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4851)						return_val = (other2 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) )));
HXDLIN(4851)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_2==HX_("down",62,f8,6d,42)) ){
HXLINE(4848)						Float other3 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4848)						return_val = (other3 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(4848)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4854)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(4854)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4855)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(4855)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("height",e7,07,4c,02)) ){
HXLINE(4852)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(4852)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE(4849)						Float other4 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4849)						return_val = (other4 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(4849)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("width",06,b6,62,ca)) ){
HXLINE(4853)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(4853)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ||  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(4850)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4850)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("top",95,66,58,00)) ||  (_hx_switch_2==HX_("up",5b,66,00,00)) ||  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(4847)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4847)						goto _hx_goto_247;
            					}
            					_hx_goto_247:;
            				}
HXLINE(4839)				goto _hx_goto_246;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(4818)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(4820)					if ((index == 0)) {
HXLINE(4820)						Float other5 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4820)						return_val = (other5 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
            					}
HXLINE(4821)					if ((index == 1)) {
HXLINE(4821)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(4825)					::String _hx_switch_3 = prop;
            					if (  (_hx_switch_3==HX_("center",d5,25,db,05)) ){
HXLINE(4831)						Float other6 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4831)						return_val = (other6 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) )));
HXDLIN(4831)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_3==HX_("down",62,f8,6d,42)) ){
HXLINE(4828)						Float other7 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4828)						return_val = (other7 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(4828)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4834)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(4834)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4835)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(4835)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("height",e7,07,4c,02)) ){
HXLINE(4833)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(4833)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("right",dc,0b,64,e9)) ){
HXLINE(4829)						Float other8 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4829)						return_val = (other8 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(4829)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("width",06,b6,62,ca)) ){
HXLINE(4832)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(4832)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("left",07,08,b0,47)) ||  (_hx_switch_3==HX_("x",78,00,00,00)) ){
HXLINE(4830)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4830)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("top",95,66,58,00)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ||  (_hx_switch_3==HX_("y",79,00,00,00)) ){
HXLINE(4827)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4827)						goto _hx_goto_248;
            					}
            					_hx_goto_248:;
            				}
HXLINE(4818)				goto _hx_goto_246;
            			}
            			/* default */{
HXLINE(4859)				::String _hx_switch_4 = prop;
            				if (  (_hx_switch_4==HX_("centerx",03,f5,e5,19)) ){
HXLINE(4866)					Float other9 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4866)					return_val = (other9 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) )));
HXDLIN(4866)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("centery",04,f5,e5,19)) ){
HXLINE(4865)					Float other10 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4865)					return_val = (other10 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) )));
HXDLIN(4865)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_4==HX_("down",62,f8,6d,42)) ){
HXLINE(4862)					Float other11 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4862)					return_val = (other11 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(4862)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4869)					return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(4869)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4870)					return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(4870)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("height",e7,07,4c,02)) ){
HXLINE(4867)					return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(4867)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("right",dc,0b,64,e9)) ){
HXLINE(4863)					Float other12 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4863)					return_val = (other12 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(4863)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("width",06,b6,62,ca)) ){
HXLINE(4868)					return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(4868)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("left",07,08,b0,47)) ||  (_hx_switch_4==HX_("x",78,00,00,00)) ){
HXLINE(4864)					return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(4864)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("top",95,66,58,00)) ||  (_hx_switch_4==HX_("up",5b,66,00,00)) ||  (_hx_switch_4==HX_("y",79,00,00,00)) ){
HXLINE(4861)					return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(4861)					goto _hx_goto_245;
            				}
            				_hx_goto_245:;
            			}
            			_hx_goto_246:;
            		}
HXLINE(4874)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,getAssetProperty,return )

void FlxUI_obj::_loadCursor( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4879__loadCursor)
HXDLIN(4879)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("list",5e,1c,b3,47))) {
HXLINE(4881)			if (::hx::IsNull( this->cursorLists )) {
HXLINE(4883)				this->cursorLists = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXLINE(4885)			{
HXLINE(4885)				int _g = 0;
HXDLIN(4885)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("list",5e,1c,b3,47));
HXDLIN(4885)				while((_g < _g1->length)){
HXLINE(4885)					 ::Xml lNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(4885)					_g = (_g + 1);
HXLINE(4887)					::String ids = ::flixel::addons::ui::U_obj::xml_str(lNode,HX_("ids",38,04,50,00),null(),null());
HXLINE(4888)					::Array< ::String > arr = ids.split(HX_(",",2c,00,00,00));
HXLINE(4889)					bool _hx_tmp;
HXDLIN(4889)					if (::hx::IsNotNull( arr )) {
HXLINE(4889)						_hx_tmp = (arr->length > 0);
            					}
            					else {
HXLINE(4889)						_hx_tmp = false;
            					}
HXDLIN(4889)					if (_hx_tmp) {
HXLINE(4891)						::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4892)						{
HXLINE(4892)							int _g2 = 0;
HXDLIN(4892)							while((_g2 < arr->length)){
HXLINE(4892)								::String str = arr->__get(_g2);
HXDLIN(4892)								_g2 = (_g2 + 1);
HXLINE(4894)								::Dynamic widget = this->getAsset(str,null());
HXLINE(4895)								if (::hx::IsNotNull( widget )) {
HXLINE(4897)									list->push(widget);
            								}
            							}
            						}
HXLINE(4900)						this->cursorLists->push(list);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCursor,(void))

void FlxUI_obj::_loadPosition( ::Xml data,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4907__loadPosition)
HXLINE(4908)		Float X = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(4909)		Float Y = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(4914)		bool ctrX = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("center_x",4e,58,50,8f),null());
HXLINE(4915)		bool ctrY = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("center_y",4f,58,50,8f),null());
HXLINE(4917)		::String center_on = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on",89,e4,fc,d6),null(),null());
HXLINE(4918)		::String center_on_x = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on_x",02,2c,66,3b),null(),null());
HXLINE(4919)		::String center_on_y = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on_y",03,2c,66,3b),null(),null());
HXLINE(4921)		::String anchor_x_str = HX_("",00,00,00,00);
HXLINE(4922)		::String anchor_y_str = HX_("",00,00,00,00);
HXLINE(4923)		Float anchor_x = ( (Float)(0) );
HXLINE(4924)		Float anchor_y = ( (Float)(0) );
HXLINE(4925)		::String anchor_x_flush = HX_("",00,00,00,00);
HXLINE(4926)		::String anchor_y_flush = HX_("",00,00,00,00);
HXLINE(4928)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60))) {
HXLINE(4930)			anchor_x_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x",78,00,00,00),null(),null());
HXLINE(4931)			anchor_y_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y",79,00,00,00),null(),null());
HXLINE(4933)			 ::flixel::addons::ui::Rounding rounding = this->getRound(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),null());
HXLINE(4935)			anchor_x = this->_getAnchorPos(thing,HX_("x",78,00,00,00),anchor_x_str);
HXLINE(4936)			anchor_y = this->_getAnchorPos(thing,HX_("y",79,00,00,00),anchor_y_str);
HXLINE(4938)			anchor_x = this->doRound(anchor_x,rounding);
HXLINE(4939)			anchor_y = this->doRound(anchor_y,rounding);
HXLINE(4941)			anchor_x_flush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x-flush",ef,49,ba,7e),true,null());
HXLINE(4942)			anchor_y_flush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y-flush",b0,c0,4f,a8),true,null());
            		}
HXLINE(4946)		bool _hx_tmp;
HXDLIN(4946)		if ((anchor_x_str == HX_("",00,00,00,00))) {
HXLINE(4946)			_hx_tmp = (anchor_y_str != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(4946)			_hx_tmp = true;
            		}
HXDLIN(4946)		if (_hx_tmp) {
HXLINE(4948)			::String _hx_switch_0 = anchor_x_flush;
            			if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(4952)				anchor_x = (anchor_x - (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing) / ( (Float)(2) )));
HXDLIN(4952)				goto _hx_goto_253;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4950)				goto _hx_goto_253;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4951)				anchor_x = (anchor_x - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing));
HXDLIN(4951)				goto _hx_goto_253;
            			}
            			_hx_goto_253:;
HXLINE(4954)			::String _hx_switch_1 = anchor_y_flush;
            			if (  (_hx_switch_1==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_1==HX_("down",62,f8,6d,42)) ){
HXLINE(4957)				anchor_y = (anchor_y - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing));
HXDLIN(4957)				goto _hx_goto_254;
            			}
            			if (  (_hx_switch_1==HX_("center",d5,25,db,05)) ){
HXLINE(4958)				anchor_y = (anchor_y - (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing) / ( (Float)(2) )));
HXDLIN(4958)				goto _hx_goto_254;
            			}
            			if (  (_hx_switch_1==HX_("top",95,66,58,00)) ||  (_hx_switch_1==HX_("up",5b,66,00,00)) ){
HXLINE(4956)				goto _hx_goto_254;
            			}
            			_hx_goto_254:;
HXLINE(4961)			if ((anchor_x_str != HX_("",00,00,00,00))) {
HXLINE(4963)				::flixel::IFlxSprite_obj::set_x(thing,anchor_x);
            			}
HXLINE(4965)			if ((anchor_y_str != HX_("",00,00,00,00))) {
HXLINE(4967)				::flixel::IFlxSprite_obj::set_y(thing,anchor_y);
            			}
            		}
HXLINE(4973)		bool _hx_tmp1;
HXDLIN(4973)		if (!(ctrX)) {
HXLINE(4973)			_hx_tmp1 = ctrY;
            		}
            		else {
HXLINE(4973)			_hx_tmp1 = true;
            		}
HXDLIN(4973)		if (_hx_tmp1) {
HXLINE(4974)			if (ctrX) {
HXLINE(4974)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(4974)				::flixel::IFlxSprite_obj::set_x(thing,((( (Float)(_hx_tmp2) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing)) / ( (Float)(2) )));
            			}
HXDLIN(4974)			if (ctrY) {
HXLINE(4974)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(4974)				::flixel::IFlxSprite_obj::set_y(thing,((( (Float)(_hx_tmp3) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing)) / ( (Float)(2) )));
            			}
            		}
HXLINE(4978)		if ((center_on != HX_("",00,00,00,00))) {
HXLINE(4980)			::Dynamic other = this->getAsset(center_on,null());
HXLINE(4981)			if (::hx::IsNotNull( other )) {
HXLINE(4983)				 ::flixel::FlxObject fb1 = ::hx::TCast<  ::flixel::FlxObject >::cast(other);
HXDLIN(4983)				 ::flixel::FlxObject fb2 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(4983)				{
HXLINE(4983)					Float fb11 = fb1->x;
HXDLIN(4983)					Float _hx_tmp4 = fb1->get_width();
HXDLIN(4983)					fb2->set_x((fb11 + ((_hx_tmp4 - fb2->get_width()) / ( (Float)(2) ))));
            				}
HXDLIN(4983)				{
HXLINE(4983)					Float fb12 = fb1->y;
HXDLIN(4983)					Float _hx_tmp5 = fb1->get_height();
HXDLIN(4983)					fb2->set_y((fb12 + ((_hx_tmp5 - fb2->get_height()) / ( (Float)(2) ))));
            				}
            			}
            		}
            		else {
HXLINE(4988)			if ((center_on_x != HX_("",00,00,00,00))) {
HXLINE(4990)				::Dynamic other1 = this->getAsset(center_on_x,null());
HXLINE(4991)				if (::hx::IsNotNull( other1 )) {
HXLINE(4993)					 ::flixel::FlxObject fb13 = ::hx::TCast<  ::flixel::FlxObject >::cast(other1);
HXDLIN(4993)					 ::flixel::FlxObject fb21 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(4993)					Float fb14 = fb13->x;
HXDLIN(4993)					Float _hx_tmp6 = fb13->get_width();
HXDLIN(4993)					fb21->set_x((fb14 + ((_hx_tmp6 - fb21->get_width()) / ( (Float)(2) ))));
            				}
            			}
HXLINE(4996)			if ((center_on_y != HX_("",00,00,00,00))) {
HXLINE(4998)				::Dynamic other2 = this->getAsset(center_on_y,null());
HXLINE(4999)				if (::hx::IsNotNull( other2 )) {
HXLINE(5001)					 ::flixel::FlxObject fb15 = ::hx::TCast<  ::flixel::FlxObject >::cast(other2);
HXDLIN(5001)					 ::flixel::FlxObject fb22 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(5001)					Float fb16 = fb15->y;
HXDLIN(5001)					Float _hx_tmp7 = fb15->get_height();
HXDLIN(5001)					fb22->set_y((fb16 + ((_hx_tmp7 - fb22->get_height()) / ( (Float)(2) ))));
            				}
            			}
            		}
HXLINE(5007)		{
HXLINE(5007)			::flixel::IFlxSprite_obj::set_x(thing, ::Dynamic((thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + X)));
HXDLIN(5007)			::flixel::IFlxSprite_obj::set_y(thing, ::Dynamic((thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + Y)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadPosition,(void))

 ::flixel::addons::ui::BorderDef FlxUI_obj::_loadBorder( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5011__loadBorder)
HXLINE(5012)		 ::flixel::addons::ui::BorderDef borderDef = ::flixel::addons::ui::BorderDef_obj::fromXML(data);
HXLINE(5014)		 ::flixel::addons::ui::Rounding round = this->getRound(data,HX_("floor",cc,d1,96,02));
HXLINE(5015)		Float dataSize = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("border_size",34,18,b0,f8),null(),null()),1);
HXLINE(5016)		int border_size = ::Std_obj::_hx_int(this->doRound(dataSize,round));
HXLINE(5018)		borderDef->size = ( (Float)(border_size) );
HXLINE(5020)		return borderDef;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBorder,return )

int FlxUI_obj::_loadColor( ::Xml data,::String __o_colorName,::hx::Null< int >  __o__default){
            		::String colorName = __o_colorName;
            		if (::hx::IsNull(__o_colorName)) colorName = HX_("color",63,71,5c,4a);
            		int _default = __o__default.Default(-1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5023__loadColor)
HXLINE(5024)		::String colorStr = ::flixel::addons::ui::U_obj::xml_str(data,colorName,null(),null());
HXLINE(5025)		bool _hx_tmp;
HXDLIN(5025)		if ((colorStr == HX_("",00,00,00,00))) {
HXLINE(5025)			 ::Xml _this = data;
HXDLIN(5025)			if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(5025)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN(5025)			_hx_tmp = (_this->nodeName == colorName);
            		}
            		else {
HXLINE(5025)			_hx_tmp = false;
            		}
HXDLIN(5025)		if (_hx_tmp) {
HXLINE(5026)			colorStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("value",71,7f,b8,31),null(),null());
            		}
HXLINE(5028)		int color = _default;
HXLINE(5029)		if ((colorStr != HX_("",00,00,00,00))) {
HXLINE(5029)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(colorStr);
HXDLIN(5029)			if (::hx::IsNull( return_val )) {
HXLINE(5029)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + colorStr));
            			}
HXDLIN(5029)			color = ( (int)(return_val) );
            		}
HXLINE(5030)		return color;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadColor,return )

 ::flixel::addons::ui::FontDef FlxUI_obj::_loadFontDef( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5033__loadFontDef)
HXLINE(5034)		 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::fromXML(data);
HXLINE(5035)		int fontSize = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),null()));
HXLINE(5036)		fd->format->size = ::flixel::addons::ui::FlxUI_obj::fontSize(fd->file,fontSize);
HXLINE(5037)		fd->set_size(fontSize);
HXLINE(5038)		return fd;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontDef,return )

::String FlxUI_obj::_loadFontFace( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5041__loadFontFace)
HXLINE(5042)		::String fontFace = ::flixel::addons::ui::U_obj::xml_str(data,HX_("font",cf,5d,c0,43),null(),null());
HXLINE(5043)		::String fontStyle = ::flixel::addons::ui::U_obj::xml_str(data,HX_("style",31,a5,1d,84),null(),null());
HXLINE(5044)		::String the_font = null();
HXLINE(5045)		if ((fontFace != HX_("",00,00,00,00))) {
HXLINE(5045)			the_font = ::flixel::addons::ui::FlxUI_obj::font(fontFace,fontStyle,null());
            		}
HXLINE(5046)		return the_font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontFace,return )

void FlxUI_obj::_onFinishLoad(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5051__onFinishLoad)
HXDLIN(5051)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE(5053)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,HX_("finish_load",d2,68,a0,8e),::hx::ObjectPtr<OBJ_>(this),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,_onFinishLoad,(void))

::String FlxUI_obj::getText(::String flag,::String __o_context,::hx::Null< bool >  __o_safe,::String __o_code){
            		::String context = __o_context;
            		if (::hx::IsNull(__o_context)) context = HX_("data",2a,56,63,42);
            		bool safe = __o_safe.Default(true);
            		::String code = __o_code;
            		if (::hx::IsNull(__o_code)) code = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5059_getText)
HXLINE(5060)		::String str = HX_("",00,00,00,00);
HXLINE(5061)		if (::hx::IsNotNull( this->_ptr_tongue )) {
HXLINE(5062)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::get(this->_ptr_tongue,flag,context,safe);
HXLINE(5063)			return this->formatFromCode(str,code);
            		}
            		else {
HXLINE(5064)			if (::hx::IsNotNull( this->getTextFallback )) {
HXLINE(5065)				str = ( (::String)(this->getTextFallback(flag,context,safe)) );
HXLINE(5066)				return this->formatFromCode(str,code);
            			}
            		}
HXLINE(5069)		return flag;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getText,return )

::String FlxUI_obj::formatFromCode(::String str,::String code){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5072_formatFromCode)
HXLINE(5073)		::String _hx_switch_0 = code;
            		if (  (_hx_switch_0==HX_("fu",4f,59,00,00)) ){
HXLINE(5076)			return ::flixel::addons::ui::U_obj::FU(str);
HXDLIN(5076)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("fu_",30,cc,4d,00)) ){
HXLINE(5077)			return ::flixel::addons::ui::U_obj::FU_(str);
HXDLIN(5077)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ){
HXLINE(5075)			return str.toLowerCase();
HXDLIN(5075)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(5074)			return str.toUpperCase();
HXDLIN(5074)			goto _hx_goto_262;
            		}
            		_hx_goto_262:;
HXLINE(5079)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatFromCode,return )

 ::flixel::text::FlxText FlxUI_obj::formatButtonText( ::Xml data, ::Dynamic button){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5139_formatButtonText)
HXLINE(5140)		bool _hx_tmp;
HXDLIN(5140)		if (::hx::IsNotNull( data )) {
HXLINE(5140)			_hx_tmp = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            		}
            		else {
HXLINE(5140)			_hx_tmp = false;
            		}
HXDLIN(5140)		if (_hx_tmp) {
HXLINE(5142)			 ::Xml textNode = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
HXLINE(5143)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(textNode,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(5144)			 ::Xml text_def = null();
HXLINE(5146)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(5148)				text_def = this->getDefinition(use_def,null());
            			}
HXLINE(5151)			 ::Xml info = ::flixel::addons::ui::FlxUI_obj::consolidateData(textNode,text_def,null());
HXLINE(5153)			::String the_font = this->_loadFontFace(info);
HXLINE(5154)			int size = ::Std_obj::_hx_int(this->_loadHeight(info,8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(5155)			int color = this->_loadColor(info,null(),null());
HXLINE(5157)			Float labelWidth = ::flixel::addons::ui::U_obj::xml_f(info,HX_("width",06,b6,62,ca),null());
HXLINE(5159)			 ::flixel::addons::ui::BorderDef border = this->_loadBorder(info);
HXLINE(5161)			::String align = ::flixel::addons::ui::U_obj::xml_str(info,HX_("align",c5,56,91,21),true,null());
HXDLIN(5161)			if ((align == HX_("",00,00,00,00))) {
HXLINE(5161)				align = null();
            			}
HXLINE(5163)			 ::flixel::text::FlxText the_label = null();
HXLINE(5164)			 ::flixel::addons::ui::FlxUIButton fb = null();
HXLINE(5165)			 ::flixel::addons::ui::FlxUISpriteButton fsb = null();
HXLINE(5166)			::Dynamic ifb = null();
HXLINE(5168)			if ((::Std_obj::isOfType(button,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >()) )) == false)) {
HXLINE(5170)				ifb = button;
HXLINE(5171)				bool _hx_tmp1;
HXDLIN(5171)				if ((align != HX_("",00,00,00,00))) {
HXLINE(5171)					_hx_tmp1 = ::hx::IsNull( align );
            				}
            				else {
HXLINE(5171)					_hx_tmp1 = true;
            				}
HXDLIN(5171)				if (_hx_tmp1) {
HXLINE(5173)					align = HX_("center",d5,25,db,05);
            				}
            			}
            			else {
HXLINE(5178)				 ::flixel::addons::ui::FlxUICheckBox cb = ( ( ::flixel::addons::ui::FlxUICheckBox)(button) );
HXLINE(5179)				ifb = cb->button;
HXLINE(5180)				align = HX_("left",07,08,b0,47);
            			}
HXLINE(5183)			if (::hx::IsNotNull( ifb )) {
HXLINE(5185)				if (::Std_obj::isOfType(ifb,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIButton >()) ))) {
HXLINE(5187)					fb = ( ( ::flixel::addons::ui::FlxUIButton)(ifb) );
HXLINE(5188)					the_label = ( ( ::flixel::text::FlxText)(fb->label) );
            				}
            				else {
HXLINE(5190)					if (::Std_obj::isOfType(ifb,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >()) ))) {
HXLINE(5192)						fsb = ( ( ::flixel::addons::ui::FlxUISpriteButton)(ifb) );
HXLINE(5193)						if (::Std_obj::isOfType(fsb->label,( ( ::Dynamic)(::hx::ClassOf< ::flixel::text::FlxText >()) ))) {
HXLINE(5195)							the_label = ( ( ::flixel::text::FlxText)(fsb->label) );
            						}
            						else {
HXLINE(5197)							if (::Std_obj::isOfType(fsb->label,( ( ::Dynamic)(::hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >()) ))) {
HXLINE(5199)								 ::flixel::group::FlxTypedSpriteGroup fsg = ( ( ::flixel::group::FlxTypedSpriteGroup)(fsb->label) );
HXLINE(5200)								{
HXLINE(5200)									int _g = 0;
HXDLIN(5200)									::Array< ::Dynamic> _g1 = fsg->group->members;
HXDLIN(5200)									while((_g < _g1->length)){
HXLINE(5200)										 ::flixel::FlxSprite fs = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(5200)										_g = (_g + 1);
HXLINE(5201)										if (::Std_obj::isOfType(fs,( ( ::Dynamic)(::hx::ClassOf< ::flixel::text::FlxText >()) ))) {
HXLINE(5202)											the_label = ( ( ::flixel::text::FlxText)(fs) );
HXLINE(5203)											goto _hx_goto_264;
            										}
            									}
            									_hx_goto_264:;
            								}
            							}
            						}
            					}
            				}
HXLINE(5209)				ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color,::hx::paccDynamic);
HXLINE(5210)				ifb->__SetField(HX_("down_color",86,26,b3,4e),0,::hx::paccDynamic);
HXLINE(5211)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),0,::hx::paccDynamic);
            			}
HXLINE(5214)			if (::hx::IsNotNull( the_label )) {
HXLINE(5216)				if ((labelWidth != 0)) {
HXLINE(5218)					the_label->set_width(labelWidth);
HXLINE(5219)					the_label->resetHelpers();
            				}
HXLINE(5222)				if (::hx::IsNotNull( fb )) {
HXLINE(5224)					fb->setLabelFormat(the_font,size,color,align,null(),null(),null());
            				}
            				else {
HXLINE(5228)					the_label->setFormat(the_font,size,color,align,null(),null(),null());
            				}
HXLINE(5231)				the_label->set_borderStyle(border->style);
HXLINE(5232)				the_label->set_borderColor(border->color);
HXLINE(5233)				the_label->set_borderSize(border->size);
HXLINE(5234)				the_label->set_borderQuality(border->quality);
HXLINE(5236)				if (::Std_obj::isOfType(the_label,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::FlxUIText >()) ))) {
HXLINE(5238)					 ::flixel::addons::ui::FlxUIText ftu = ( ( ::flixel::addons::ui::FlxUIText)(the_label) );
HXLINE(5239)					ftu->drawFrame(null());
            				}
HXLINE(5242)				if (::hx::IsNotNull( fb )) {
HXLINE(5244)					fb->autoCenterLabel();
            				}
HXLINE(5246)				if (::hx::IsNotNull( fsb )) {
HXLINE(5248)					fsb->autoCenterLabel();
            				}
            			}
HXLINE(5252)			{
HXLINE(5252)				int _g2 = 0;
HXDLIN(5252)				::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(info,HX_("color",63,71,5c,4a));
HXDLIN(5252)				while((_g2 < _g3->length)){
HXLINE(5252)					 ::Xml textColorNode = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(5252)					_g2 = (_g2 + 1);
HXLINE(5254)					int color1 = this->_loadColor(textColorNode,null(),null());
HXLINE(5255)					bool vis = ::flixel::addons::ui::U_obj::xml_bool(textColorNode,HX_("visible",72,78,24,a3),true);
HXLINE(5256)					::String state_name = ::flixel::addons::ui::U_obj::xml_name(textColorNode);
HXLINE(5257)					bool toggle = ::flixel::addons::ui::U_obj::xml_bool(textColorNode,HX_("toggle",94,bf,43,8f),null());
HXLINE(5258)					::String _hx_switch_0 = state_name;
            					if (  (_hx_switch_0==HX_("active",c6,41,46,16)) ||  (_hx_switch_0==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_0==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_0==HX_("over",54,91,b8,49)) ){
HXLINE(5272)						if (!(toggle)) {
HXLINE(5274)							ifb->__SetField(HX_("over_color",f8,00,4a,f7),color1,::hx::paccDynamic);
HXLINE(5275)							ifb->__SetField(HX_("over_visible",47,d7,44,92),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5279)							ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),color1,::hx::paccDynamic);
HXLINE(5280)							ifb->__SetField(HX_("over_toggle_visible",52,9b,c8,49),vis,::hx::paccDynamic);
            						}
HXLINE(5272)						goto _hx_goto_266;
            					}
            					if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5261)						if (!(toggle)) {
HXLINE(5263)							ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color1,::hx::paccDynamic);
HXLINE(5264)							ifb->__SetField(HX_("up_visible",4e,8b,83,08),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5268)							ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),color1,::hx::paccDynamic);
HXLINE(5269)							ifb->__SetField(HX_("up_toggle_visible",2b,86,e9,3f),vis,::hx::paccDynamic);
            						}
HXLINE(5261)						goto _hx_goto_266;
            					}
            					if (  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_0==HX_("pushed",b9,14,2d,72)) ){
HXLINE(5283)						if (!(toggle)) {
HXLINE(5285)							ifb->__SetField(HX_("down_color",86,26,b3,4e),color1,::hx::paccDynamic);
HXLINE(5286)							ifb->__SetField(HX_("down_visible",55,fc,6c,72),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5290)							ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),color1,::hx::paccDynamic);
HXLINE(5291)							ifb->__SetField(HX_("down_toggle_visible",04,54,e1,a9),vis,::hx::paccDynamic);
            						}
HXLINE(5283)						goto _hx_goto_266;
            					}
            					_hx_goto_266:;
            				}
            			}
HXLINE(5296)			if (::hx::IsEq( ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),0 )) {
HXLINE(5298)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5300)			if (::hx::IsEq( ifb->__Field(HX_("down_color",86,26,b3,4e),::hx::paccDynamic),0 )) {
HXLINE(5302)				ifb->__SetField(HX_("down_color",86,26,b3,4e),ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5306)			if (::hx::IsEq( ifb->__Field(HX_("up_toggle_color",dc,6e,0c,dd),::hx::paccDynamic),0 )) {
HXLINE(5308)				ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5310)			if (::hx::IsEq( ifb->__Field(HX_("over_toggle_color",43,1c,98,aa),::hx::paccDynamic),0 )) {
HXLINE(5312)				ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5314)			if (::hx::IsEq( ifb->__Field(HX_("down_toggle_color",75,e4,c8,06),::hx::paccDynamic),0 )) {
HXLINE(5316)				ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),ifb->__Field(HX_("down_color",86,26,b3,4e),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5319)			if (::hx::IsNotNull( the_label )) {
HXLINE(5320)				the_label->set_visible(( (bool)(ifb->__Field(HX_("up_visible",4e,8b,83,08),::hx::paccDynamic)) ));
HXLINE(5321)				the_label->set_color(( (int)(ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic)) ));
            			}
HXLINE(5323)			return the_label;
            		}
HXLINE(5325)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatButtonText,return )

void FlxUI_obj::event(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_146_event)
HXLINE( 147)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 149)		if (::hx::IsNotNull( currState )) {
HXLINE( 150)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(currState,name,sender,data,params);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,event,(void))

::String FlxUI_obj::fontStr(::String str,::String __o_style){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_164_fontStr)
HXLINE( 165)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 165)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXDLIN( 165)		::Dynamic t;
HXDLIN( 165)		if (::hx::IsNotNull( tongue )) {
HXLINE( 165)			t = tongue;
            		}
            		else {
HXLINE( 165)			t = null();
            		}
HXDLIN( 165)		::Dynamic t1 = t;
HXLINE( 166)		if (::hx::IsNotNull( t1 )) {
HXLINE( 166)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFont(t1,str);
            		}
HXLINE( 167)		::String style1 = style;
HXDLIN( 167)		if (::hx::IsNull( style1 )) {
HXLINE( 167)			style1 = HX_("",00,00,00,00);
            		}
HXDLIN( 167)		::String style2 = style1;
HXDLIN( 167)		if (::hx::IsNull( style2 )) {
HXLINE( 167)			style2 = HX_("",00,00,00,00);
            		}
HXDLIN( 167)		style2 = style2.toLowerCase();
HXDLIN( 167)		::String suffix = HX_("",00,00,00,00);
HXDLIN( 167)		::String _hx_switch_0 = style2;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE( 167)			suffix = HX_("",00,00,00,00);
HXDLIN( 167)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 167)			suffix = HX_("b",62,00,00,00);
HXDLIN( 167)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 167)			suffix = HX_("i",69,00,00,00);
HXDLIN( 167)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 167)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 167)			goto _hx_goto_269;
            		}
            		_hx_goto_269:;
HXDLIN( 167)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != 0)) {
HXLINE( 167)			return ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
            		else {
HXLINE( 167)			return (str + suffix);
            		}
HXDLIN( 167)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,fontStr,return )

int FlxUI_obj::fontSize(::String str,int size){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_178_fontSize)
HXLINE( 179)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 179)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXDLIN( 179)		::Dynamic t;
HXDLIN( 179)		if (::hx::IsNotNull( tongue )) {
HXLINE( 179)			t = tongue;
            		}
            		else {
HXLINE( 179)			t = null();
            		}
HXDLIN( 179)		::Dynamic t1 = t;
HXLINE( 180)		if (::hx::IsNotNull( t1 )) {
HXLINE( 180)			size = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFontSize(t1,str,size);
            		}
HXLINE( 181)		return size;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,fontSize,return )

::String FlxUI_obj::font(::String str,::String __o_style,::String __o_extension){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_(".ttf",78,3b,c0,1e);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_193_font)
HXLINE( 194)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 194)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXDLIN( 194)		::Dynamic t;
HXDLIN( 194)		if (::hx::IsNotNull( tongue )) {
HXLINE( 194)			t = tongue;
            		}
            		else {
HXLINE( 194)			t = null();
            		}
HXDLIN( 194)		::Dynamic t1 = t;
HXLINE( 195)		if (::hx::IsNotNull( t1 )) {
HXLINE( 195)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFont(t1,str);
            		}
HXLINE( 196)		return ::flixel::addons::ui::U_obj::font(str,style,extension);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,font,return )

::Dynamic FlxUI_obj::_hx___getTongue(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_201___getTongue)
HXLINE( 202)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 203)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXLINE( 204)		if (::hx::IsNotNull( tongue )) {
HXLINE( 206)			return tongue;
            		}
HXLINE( 208)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,_hx___getTongue,return )

void FlxUI_obj::forceFocus(bool b,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_217_forceFocus)
HXLINE( 218)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 219)		if (::hx::IsNotNull( currState )) {
HXLINE( 220)			::flixel::addons::ui::interfaces::IFlxUIState_obj::forceFocus(currState,b,thing);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,forceFocus,(void))

::Dynamic FlxUI_obj::getLeafUIState(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_229_getLeafUIState)
HXLINE( 230)		 ::flixel::FlxState state = ::flixel::FlxG_obj::game->_state;
HXLINE( 231)		if (::hx::IsNotNull( state )) {
HXLINE( 233)			while(::hx::IsNotNull( state->subState )){
HXLINE( 235)				state = state->subState;
            			}
            		}
HXLINE( 238)		if (::Std_obj::isOfType(state,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIState >()) ))) {
HXLINE( 240)			return state;
            		}
HXLINE( 242)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getLeafUIState,return )

 ::Dynamic FlxUI_obj::request(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_254_request)
HXLINE( 255)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 256)		if (::hx::IsNotNull( currState )) {
HXLINE( 257)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(currState,name,sender,data,params);
            		}
            		else {
HXLINE( 259)			::flixel::FlxG_obj::log->advanced(HX_("Warning, FlxUI event not handled, IFlxUIWidgets need to exist within an IFlxUIState",71,f5,8f,fb),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            		}
HXLINE( 261)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,request,return )

void FlxUI_obj::_delta(::Dynamic thing,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1460__delta)
HXLINE(1461)		::flixel::IFlxSprite_obj::set_x(thing, ::Dynamic((thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + X)));
HXLINE(1462)		::flixel::IFlxSprite_obj::set_y(thing, ::Dynamic((thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + Y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_delta,(void))

::Dynamic FlxUI_obj::_center(::Dynamic thing,::hx::Null< bool >  __o_X,::hx::Null< bool >  __o_Y){
            		bool X = __o_X.Default(true);
            		bool Y = __o_Y.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1472__center)
HXLINE(1473)		if (X) {
HXLINE(1473)			int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(1473)			::flixel::IFlxSprite_obj::set_x(thing,((( (Float)(_hx_tmp) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing)) / ( (Float)(2) )));
            		}
HXLINE(1474)		if (Y) {
HXLINE(1474)			int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(1474)			::flixel::IFlxSprite_obj::set_y(thing,((( (Float)(_hx_tmp1) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing)) / ( (Float)(2) )));
            		}
HXLINE(1475)		return thing;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_center,return )

 ::Xml FlxUI_obj::consolidateData( ::Xml data, ::Xml definition,::hx::Null< bool >  __o_combineUniqueChildren){
            		bool combineUniqueChildren = __o_combineUniqueChildren.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2675_consolidateData)
HXLINE(2676)		bool _hx_tmp;
HXDLIN(2676)		if (::hx::IsNull( data )) {
HXLINE(2676)			_hx_tmp = ::hx::IsNotNull( definition );
            		}
            		else {
HXLINE(2676)			_hx_tmp = false;
            		}
HXDLIN(2676)		if (_hx_tmp) {
HXLINE(2678)			return definition;
            		}
HXLINE(2680)		if (::hx::IsNull( definition )) {
HXLINE(2682)			return data;
            		}
            		else {
HXLINE(2689)			 ::Xml new_data = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(definition,null()))->firstElement();
HXLINE(2691)			{
HXLINE(2691)				 ::Dynamic att = data->attributes();
HXDLIN(2691)				while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2691)					::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2693)					::String val = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(data,att1);
HXLINE(2694)					new_data->set(att1,val);
            				}
            			}
HXLINE(2698)			{
HXLINE(2698)				::String v;
HXDLIN(2698)				if ((data->nodeType == ::Xml_obj::Document)) {
HXLINE(2698)					v = HX_("Document",3b,ab,c4,74);
            				}
            				else {
HXLINE(2698)					if ((data->nodeType != ::Xml_obj::Element)) {
HXLINE(2698)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(data->nodeType)));
            					}
HXDLIN(2698)					v = data->nodeName;
            				}
HXDLIN(2698)				if ((new_data->nodeType != ::Xml_obj::Element)) {
HXLINE(2698)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(new_data->nodeType)));
            				}
HXDLIN(2698)				new_data->nodeName = v;
            			}
HXLINE(2699)			bool _hx_tmp1;
HXDLIN(2699)			if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("name",4b,72,ff,48)))) {
HXLINE(2699)				_hx_tmp1 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("id",db,5b,00,00));
            			}
            			else {
HXLINE(2699)				_hx_tmp1 = true;
            			}
HXDLIN(2699)			if (_hx_tmp1) {
HXLINE(2701)				new_data->set(HX_("name",4b,72,ff,48),::flixel::addons::ui::U_obj::xml_name(data));
            			}
            			else {
HXLINE(2705)				new_data->set(HX_("name",4b,72,ff,48),HX_("",00,00,00,00));
            			}
HXLINE(2708)			{
HXLINE(2708)				 ::Dynamic element = data->elements();
HXDLIN(2708)				while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2708)					 ::Xml element1 = ( ( ::Xml)(element->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2710)					if ((element1->nodeType != ::Xml_obj::Element)) {
HXLINE(2710)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(element1->nodeType)));
            					}
HXDLIN(2710)					::String nodeName = element1->nodeName;
HXLINE(2711)					bool notCombine = !(combineUniqueChildren);
HXLINE(2712)					if (combineUniqueChildren) {
HXLINE(2714)						 ::Dynamic new_els = new_data->elementsNamed(nodeName);
HXLINE(2715)						 ::Xml new_el = ( ( ::Xml)(new_els->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2718)						bool _hx_tmp2;
HXDLIN(2718)						bool _hx_tmp3;
HXDLIN(2718)						if ((::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,nodeName)->length == 1)) {
HXLINE(2718)							_hx_tmp3 = ::hx::IsNotNull( new_el );
            						}
            						else {
HXLINE(2718)							_hx_tmp3 = false;
            						}
HXDLIN(2718)						if (_hx_tmp3) {
HXLINE(2718)							_hx_tmp2 = ::hx::IsEq( new_els->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)(),false );
            						}
            						else {
HXLINE(2718)							_hx_tmp2 = false;
            						}
HXDLIN(2718)						if (_hx_tmp2) {
HXLINE(2721)							 ::Dynamic att2 = element1->attributes();
HXDLIN(2721)							while(( (bool)(att2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2721)								::String att3 = ( (::String)(att2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2723)								new_el->set(att3,element1->get(att3));
            							}
            						}
            						else {
HXLINE(2728)							notCombine = true;
            						}
            					}
HXLINE(2732)					if (notCombine) {
HXLINE(2734)						new_data->insertChild(::Xml_obj::parse(::haxe::xml::Printer_obj::print(element1,null()))->firstElement(),0);
            					}
            				}
            			}
HXLINE(2737)			bool _hx_tmp4;
HXDLIN(2737)			if ((new_data->nodeType != ::Xml_obj::Document)) {
HXLINE(2737)				_hx_tmp4 = (new_data->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(2737)				_hx_tmp4 = false;
            			}
HXDLIN(2737)			if (_hx_tmp4) {
HXLINE(2737)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(new_data->nodeType)));
            			}
HXDLIN(2737)			return new_data;
            		}
HXLINE(2680)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,consolidateData,return )

 ::openfl::display::BitmapData FlxUI_obj::_loadBitmapRect(::String source,::String rect_str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3870__loadBitmapRect)
HXLINE(3871)		 ::openfl::display::BitmapData b1 = ::openfl::utils::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(source,null(),null(),null(),null(),null()),null());
HXLINE(3872)		::Array< ::String > coords = rect_str.split(HX_(",",2c,00,00,00));
HXDLIN(3872)		 ::openfl::geom::Rectangle rect = null();
HXDLIN(3872)		bool _hx_tmp;
HXDLIN(3872)		if (::hx::IsNotNull( coords )) {
HXLINE(3872)			_hx_tmp = (coords->length == 4);
            		}
            		else {
HXLINE(3872)			_hx_tmp = false;
            		}
HXDLIN(3872)		if (_hx_tmp) {
HXLINE(3872)			int x_ = ( (int)(::Std_obj::parseInt(coords->__get(0))) );
HXDLIN(3872)			int y_ = ( (int)(::Std_obj::parseInt(coords->__get(1))) );
HXDLIN(3872)			int w_ = ( (int)(::Std_obj::parseInt(coords->__get(2))) );
HXDLIN(3872)			int h_ = ( (int)(::Std_obj::parseInt(coords->__get(3))) );
HXDLIN(3872)			rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x_,y_,w_,h_);
            		}
HXDLIN(3872)		 ::openfl::geom::Rectangle r = rect;
HXLINE(3873)		int b2 = ::Std_obj::_hx_int(r->width);
HXDLIN(3873)		 ::openfl::display::BitmapData b21 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,b2,::Std_obj::_hx_int(r->height),true,16777215);
HXLINE(3874)		b21->copyPixels(b1,r, ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0),null(),null(),null());
HXLINE(3875)		return b21;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadBitmapRect,return )

::cpp::VirtualArray FlxUI_obj::getParams( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5088_getParams)
HXLINE(5089)		::cpp::VirtualArray params = null();
HXLINE(5091)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(5092)			params = ::cpp::VirtualArray_obj::__new();
HXLINE(5093)			{
HXLINE(5093)				int _g = 0;
HXDLIN(5093)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(5093)				while((_g < _g1->length)){
HXLINE(5093)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5093)					_g = (_g + 1);
HXLINE(5094)					bool _hx_tmp;
HXDLIN(5094)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(5094)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(5094)						_hx_tmp = false;
            					}
HXDLIN(5094)					if (_hx_tmp) {
HXLINE(5095)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXLINE(5096)						type = type.toLowerCase();
HXLINE(5097)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXLINE(5098)						 ::Dynamic value = valueStr;
HXLINE(5099)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXLINE(5100)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(5106)							::String str = ::String(valueStr);
HXLINE(5107)							str = str.toLowerCase();
HXLINE(5108)							bool _hx_tmp1;
HXDLIN(5108)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(5108)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(5108)								_hx_tmp1 = true;
            							}
HXDLIN(5108)							if (_hx_tmp1) {
HXLINE(5109)								value = true;
            							}
            							else {
HXLINE(5111)								value = false;
            							}
HXLINE(5105)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(5103)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(5103)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(5104)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(5104)							if (::hx::IsNull( return_val )) {
HXLINE(5104)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(5104)							value = return_val;
HXDLIN(5104)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(5102)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(5102)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(5101)							value = ::String(valueStr);
HXDLIN(5101)							goto _hx_goto_286;
            						}
            						_hx_goto_286:;
HXLINE(5116)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXLINE(5121)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXLINE(5124)			{
HXLINE(5124)				int _g2 = 0;
HXDLIN(5124)				int _g3 = params->get_length();
HXDLIN(5124)				while((_g2 < _g3)){
HXLINE(5124)					_g2 = (_g2 + 1);
HXDLIN(5124)					int i = (_g2 - 1);
HXLINE(5125)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXLINE(5128)		return params;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getParams,return )

int FlxUI_obj::sortParams( ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5132_sortParams)
HXLINE(5133)		if (::hx::IsLess( a->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic),b->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic) )) {
HXLINE(5133)			return -1;
            		}
HXLINE(5134)		if (::hx::IsGreater( a->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic),b->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic) )) {
HXLINE(5134)			return 1;
            		}
HXLINE(5135)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sortParams,return )


::hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__new( ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	::hx::ObjectPtr< FlxUI_obj > __this = new FlxUI_obj();
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

::hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	FlxUI_obj *__this = (FlxUI_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUI_obj), true, "flixel.addons.ui.FlxUI"));
	*(void **)__this = FlxUI_obj::_hx_vtable;
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

FlxUI_obj::FlxUI_obj()
{
}

void FlxUI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUI);
	HX_MARK_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_MARK_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_MARK_MEMBER_NAME(failed,"failed");
	HX_MARK_MEMBER_NAME(failed_by,"failed_by");
	HX_MARK_MEMBER_NAME(isRoot,"isRoot");
	HX_MARK_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_MARK_MEMBER_NAME(focus,"focus");
	HX_MARK_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_MARK_MEMBER_NAME(cursorLists,"cursorLists");
	HX_MARK_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_MARK_MEMBER_NAME(_pointX,"_pointX");
	HX_MARK_MEMBER_NAME(_pointY,"_pointY");
	HX_MARK_MEMBER_NAME(_group_index,"_group_index");
	HX_MARK_MEMBER_NAME(_asset_index,"_asset_index");
	HX_MARK_MEMBER_NAME(_tag_index,"_tag_index");
	HX_MARK_MEMBER_NAME(_definition_index,"_definition_index");
	HX_MARK_MEMBER_NAME(_variable_index,"_variable_index");
	HX_MARK_MEMBER_NAME(_mode_index,"_mode_index");
	HX_MARK_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_MARK_MEMBER_NAME(_ptr,"_ptr");
	HX_MARK_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_MARK_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_MARK_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_MARK_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_MARK_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_VISIT_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_VISIT_MEMBER_NAME(failed,"failed");
	HX_VISIT_MEMBER_NAME(failed_by,"failed_by");
	HX_VISIT_MEMBER_NAME(isRoot,"isRoot");
	HX_VISIT_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_VISIT_MEMBER_NAME(focus,"focus");
	HX_VISIT_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_VISIT_MEMBER_NAME(cursorLists,"cursorLists");
	HX_VISIT_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_VISIT_MEMBER_NAME(_pointX,"_pointX");
	HX_VISIT_MEMBER_NAME(_pointY,"_pointY");
	HX_VISIT_MEMBER_NAME(_group_index,"_group_index");
	HX_VISIT_MEMBER_NAME(_asset_index,"_asset_index");
	HX_VISIT_MEMBER_NAME(_tag_index,"_tag_index");
	HX_VISIT_MEMBER_NAME(_definition_index,"_definition_index");
	HX_VISIT_MEMBER_NAME(_variable_index,"_variable_index");
	HX_VISIT_MEMBER_NAME(_mode_index,"_mode_index");
	HX_VISIT_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_VISIT_MEMBER_NAME(_ptr,"_ptr");
	HX_VISIT_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_VISIT_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_VISIT_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_VISIT_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_VISIT_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxUI_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"_ptr") ) { return ::hx::Val( _ptr ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { return ::hx::Val( focus ); }
		if (HX_FIELD_EQ(inName,"_data") ) { return ::hx::Val( _data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { return ::hx::Val( failed ); }
		if (HX_FIELD_EQ(inName,"isRoot") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_isRoot() : isRoot ); }
		if (HX_FIELD_EQ(inName,"tongue") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_tongue() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadX") ) { return ::hx::Val( _loadX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadY") ) { return ::hx::Val( _loadY_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"_sendTo") ) { return ::hx::Val( _sendTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMode") ) { return ::hx::Val( setMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMode") ) { return ::hx::Val( getMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"_pointX") ) { return ::hx::Val( _pointX ); }
		if (HX_FIELD_EQ(inName,"_pointY") ) { return ::hx::Val( _pointY ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return ::hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"doRound") ) { return ::hx::Val( doRound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return ::hx::Val( getText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAsset") ) { return ::hx::Val( addAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadSub") ) { return ::hx::Val( _loadSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"_addTags") ) { return ::hx::Val( _addTags_dyn() ); }
		if (HX_FIELD_EQ(inName,"currMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currMode() ); }
		if (HX_FIELD_EQ(inName,"getGroup") ) { return ::hx::Val( getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasAsset") ) { return ::hx::Val( hasAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAsset") ) { return ::hx::Val( getAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doAlign") ) { return ::hx::Val( _doAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"createUI") ) { return ::hx::Val( createUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBox") ) { return ::hx::Val( _loadBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBar") ) { return ::hx::Val( _loadBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRound") ) { return ::hx::Val( getRound_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { return ::hx::Val( failed_by ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return ::hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"callEvent") ) { return ::hx::Val( callEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"showGroup") ) { return ::hx::Val( showGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"showAsset") ) { return ::hx::Val( showAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoad") ) { return ::hx::Val( _postLoad_dyn() ); }
		if (HX_FIELD_EQ(inName,"showThing") ) { return ::hx::Val( showThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadThing") ) { return ::hx::Val( loadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadText") ) { return ::hx::Val( _loadText_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTest") ) { return ::hx::Val( _loadTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadLine") ) { return ::hx::Val( _loadLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"thisWidth") ) { return ::hx::Val( thisWidth_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_isRoot") ) { return ::hx::Val( get_isRoot_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tongue") ) { return ::hx::Val( get_tongue_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tongue") ) { return ::hx::Val( set_tongue_dyn() ); }
		if (HX_FIELD_EQ(inName,"_tongueSet") ) { return ::hx::Val( _tongueSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRequest") ) { return ::hx::Val( getRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"toggleShow") ) { return ::hx::Val( toggleShow_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToBack") ) { return ::hx::Val( sendToBack_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFlxText") ) { return ::hx::Val( getFlxText_dyn() ); }
		if (HX_FIELD_EQ(inName,"_tag_index") ) { return ::hx::Val( _tag_index ); }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { return ::hx::Val( _curr_mode ); }
		if (HX_FIELD_EQ(inName,"_loadThing") ) { return ::hx::Val( _loadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScale") ) { return ::hx::Val( _loadScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadWidth") ) { return ::hx::Val( _loadWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadSmooth") ) { return ::hx::Val( loadSmooth_dyn() ); }
		if (HX_FIELD_EQ(inName,"thisHeight") ) { return ::hx::Val( thisHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadColor") ) { return ::hx::Val( _loadColor_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { return ::hx::Val( cursorLists ); }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { return ::hx::Val( _ptr_tongue ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAsset") ) { return ::hx::Val( removeAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"unparentXML") ) { return ::hx::Val( unparentXML_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToFront") ) { return ::hx::Val( sendToFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVariable") ) { return ::hx::Val( setVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVariable") ) { return ::hx::Val( getVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenWidth") ) { return ::hx::Val( screenWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { return ::hx::Val( _postLoaded ); }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { return ::hx::Val( _mode_index ); }
		if (HX_FIELD_EQ(inName,"_loadAnchor") ) { return ::hx::Val( _loadAnchor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScaleX") ) { return ::hx::Val( _loadScaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScaleY") ) { return ::hx::Val( _loadScaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadHeight") ) { return ::hx::Val( _loadHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_alignThing") ) { return ::hx::Val( _alignThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadString") ) { return ::hx::Val( _loadString_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadLayout") ) { return ::hx::Val( _loadLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadButton") ) { return ::hx::Val( _loadButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadRegion") ) { return ::hx::Val( _loadRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadSprite") ) { return ::hx::Val( _loadSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getStretch") ) { return ::hx::Val( _getStretch_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCursor") ) { return ::hx::Val( _loadCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBorder") ) { return ::hx::Val( _loadBorder_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { return ::hx::Val( liveFilePath ); }
		if (HX_FIELD_EQ(inName,"replaceAsset") ) { return ::hx::Val( replaceAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadGlobals") ) { return ::hx::Val( _loadGlobals_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currMode") ) { return ::hx::Val( get_currMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_currMode") ) { return ::hx::Val( set_currMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAllAssets") ) { return ::hx::Val( getAllAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetKeys") ) { return ::hx::Val( getAssetKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenHeight") ) { return ::hx::Val( screenHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_group_index") ) { return ::hx::Val( _group_index ); }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { return ::hx::Val( _asset_index ); }
		if (HX_FIELD_EQ(inName,"_loadTooltip") ) { return ::hx::Val( _loadTooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCompass") ) { return ::hx::Val( _loadCompass_dyn() ); }
		if (HX_FIELD_EQ(inName,"_changeThing") ) { return ::hx::Val( _changeThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_resizeThing") ) { return ::hx::Val( _resizeThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTestSub") ) { return ::hx::Val( _loadTestSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToCleanup") ) { return ::hx::Val( addToCleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTabMenu") ) { return ::hx::Val( _loadTabMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getDataSize") ) { return ::hx::Val( _getDataSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doOperation") ) { return ::hx::Val( _doOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadFontDef") ) { return ::hx::Val( _loadFontDef_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setSuperIndex") ) { return ::hx::Val( setSuperIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetGroup") ) { return ::hx::Val( getAssetGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkVariable") ) { return ::hx::Val( checkVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDefinition") ) { return ::hx::Val( getDefinition_dyn() ); }
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { return ::hx::Val( _superIndexUI ); }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { return ::hx::Val( _scaledAssets ); }
		if (HX_FIELD_EQ(inName,"_checkFailure") ) { return ::hx::Val( _checkFailure_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTileTest") ) { return ::hx::Val( _loadTileTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCheckBox") ) { return ::hx::Val( _loadCheckBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseVarValue") ) { return ::hx::Val( parseVarValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTileRule") ) { return ::hx::Val( _loadTileRule_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadScaledSrc") ) { return ::hx::Val( loadScaledSrc_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getAnchorPos") ) { return ::hx::Val( _getAnchorPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getOperation") ) { return ::hx::Val( _getOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadPosition") ) { return ::hx::Val( _loadPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadFontFace") ) { return ::hx::Val( _loadFontFace_dyn() ); }
		if (HX_FIELD_EQ(inName,"_onFinishLoad") ) { return ::hx::Val( _onFinishLoad_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_loadPointSize") ) { return ::hx::Val( _loadPointSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceInGroup") ) { return ::hx::Val( replaceInGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoadThing") ) { return ::hx::Val( _postLoadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadInputText") ) { return ::hx::Val( _loadInputText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getResizeRatio") ) { return ::hx::Val( getResizeRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcMaxMinSize") ) { return ::hx::Val( calcMaxMinSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatFromCode") ) { return ::hx::Val( formatFromCode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { return ::hx::Val( getTextFallback ); }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { return ::hx::Val( _variable_index ); }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { return ::hx::Val( _failure_checks ); }
		if (HX_FIELD_EQ(inName,"_loadRadioGroup") ) { return ::hx::Val( _loadRadioGroup_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getAssetsWithTag") ) { return ::hx::Val( getAssetsWithTag_dyn() ); }
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { return ::hx::Val( _assetsToCleanUp ); }
		if (HX_FIELD_EQ(inName,"applyNodeChanges") ) { return ::hx::Val( applyNodeChanges_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipData") ) { return ::hx::Val( _loadTooltipData_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipText") ) { return ::hx::Val( _loadTooltipText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetProperty") ) { return ::hx::Val( getAssetProperty_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatButtonText") ) { return ::hx::Val( formatButtonText_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { return ::hx::Val( _definition_index ); }
		if (HX_FIELD_EQ(inName,"_loadThingGetInfo") ) { return ::hx::Val( _loadThingGetInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipStyle") ) { return ::hx::Val( _loadTooltipStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadDropDownMenu") ) { return ::hx::Val( _loadDropDownMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToScaledAssets") ) { return ::hx::Val( addToScaledAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"_load9SliceSprite") ) { return ::hx::Val( _load9SliceSprite_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_changeParamsThing") ) { return ::hx::Val( _changeParamsThing_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { return ::hx::Val( do_safe_input_delay ); }
		if (HX_FIELD_EQ(inName,"_loadNumericStepper") ) { return ::hx::Val( _loadNumericStepper_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setWidgetSuppression") ) { return ::hx::Val( setWidgetSuppression_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { return ::hx::Val( safe_input_delay_time ); }
		if (HX_FIELD_EQ(inName,"getLabelStyleFromData") ) { return ::hx::Val( getLabelStyleFromData_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyNodeConditionals") ) { return ::hx::Val( applyNodeConditionals_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { return ::hx::Val( _safe_input_delay_elapsed ); }
		if (HX_FIELD_EQ(inName,"load9SliceSprite_scaleSub") ) { return ::hx::Val( load9SliceSprite_scaleSub_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"getLabelStyleFromDefinition") ) { return ::hx::Val( getLabelStyleFromDefinition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUI_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { outValue = event_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_delta") ) { outValue = _delta_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fontStr") ) { outValue = fontStr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"request") ) { outValue = request_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_center") ) { outValue = _center_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontSize") ) { outValue = fontSize_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getParams") ) { outValue = getParams_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceFocus") ) { outValue = forceFocus_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortParams") ) { outValue = sortParams_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__getTongue") ) { outValue = _hx___getTongue_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getLeafUIState") ) { outValue = getLeafUIState_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"consolidateData") ) { outValue = consolidateData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_loadBitmapRect") ) { outValue = _loadBitmapRect_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxUI_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_ptr") ) { _ptr=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_focus(inValue.Cast< ::Dynamic >()) );focus=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { failed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isRoot") ) { isRoot=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tongue") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_tongue(inValue.Cast< ::Dynamic >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_pointX") ) { _pointX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointY") ) { _pointY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_currMode(inValue.Cast< ::String >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { failed_by=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_tag_index") ) { _tag_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { _curr_mode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { cursorLists=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { _ptr_tongue=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { _postLoaded=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { _mode_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { liveFilePath=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_group_index") ) { _group_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { _asset_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { _superIndexUI=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { _scaledAssets=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { getTextFallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { _variable_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { _failure_checks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { _assetsToCleanUp=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { _definition_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { do_safe_input_delay=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { safe_input_delay_time=inValue.Cast< Float >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { _safe_input_delay_elapsed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("do_safe_input_delay",90,5b,9d,88));
	outFields->push(HX_("safe_input_delay_time",50,71,b0,f4));
	outFields->push(HX_("failed",bd,c5,fe,e7));
	outFields->push(HX_("failed_by",59,1a,00,5f));
	outFields->push(HX_("isRoot",2c,b3,15,69));
	outFields->push(HX_("liveFilePath",4d,75,d5,b0));
	outFields->push(HX_("tongue",c4,45,e4,93));
	outFields->push(HX_("focus",d8,5f,89,04));
	outFields->push(HX_("cursorLists",9f,0f,e7,fd));
	outFields->push(HX_("_ptr_tongue",54,fc,53,03));
	outFields->push(HX_("_data",09,72,74,f5));
	outFields->push(HX_("currMode",75,ab,68,8b));
	outFields->push(HX_("_postLoaded",a4,95,31,80));
	outFields->push(HX_("_pointX",a7,23,a5,65));
	outFields->push(HX_("_pointY",a8,23,a5,65));
	outFields->push(HX_("_group_index",d3,bc,ca,66));
	outFields->push(HX_("_asset_index",44,0e,d3,80));
	outFields->push(HX_("_tag_index",ee,f7,41,12));
	outFields->push(HX_("_definition_index",85,96,e5,82));
	outFields->push(HX_("_variable_index",2e,92,8a,75));
	outFields->push(HX_("_mode_index",15,af,93,a2));
	outFields->push(HX_("_curr_mode",d1,32,bc,27));
	outFields->push(HX_("_ptr",ef,a6,20,3f));
	outFields->push(HX_("_superIndexUI",8a,fc,6d,d1));
	outFields->push(HX_("_safe_input_delay_elapsed",38,44,1a,3b));
	outFields->push(HX_("_failure_checks",df,fd,ae,28));
	outFields->push(HX_("_assetsToCleanUp",87,59,f7,5a));
	outFields->push(HX_("_scaledAssets",9c,29,61,6b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxUI_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxUI_obj,do_safe_input_delay),HX_("do_safe_input_delay",90,5b,9d,88)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,safe_input_delay_time),HX_("safe_input_delay_time",50,71,b0,f4)},
	{::hx::fsBool,(int)offsetof(FlxUI_obj,failed),HX_("failed",bd,c5,fe,e7)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,failed_by),HX_("failed_by",59,1a,00,5f)},
	{::hx::fsBool,(int)offsetof(FlxUI_obj,isRoot),HX_("isRoot",2c,b3,15,69)},
	{::hx::fsString,(int)offsetof(FlxUI_obj,liveFilePath),HX_("liveFilePath",4d,75,d5,b0)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,focus),HX_("focus",d8,5f,89,04)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxUI_obj,getTextFallback),HX_("getTextFallback",a5,c3,03,82)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUI_obj,cursorLists),HX_("cursorLists",9f,0f,e7,fd)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,_ptr_tongue),HX_("_ptr_tongue",54,fc,53,03)},
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(FlxUI_obj,_data),HX_("_data",09,72,74,f5)},
	{::hx::fsBool,(int)offsetof(FlxUI_obj,_postLoaded),HX_("_postLoaded",a4,95,31,80)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_pointX),HX_("_pointX",a7,23,a5,65)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_pointY),HX_("_pointY",a8,23,a5,65)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_group_index),HX_("_group_index",d3,bc,ca,66)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_asset_index),HX_("_asset_index",44,0e,d3,80)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_tag_index),HX_("_tag_index",ee,f7,41,12)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_definition_index),HX_("_definition_index",85,96,e5,82)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_variable_index),HX_("_variable_index",2e,92,8a,75)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_mode_index),HX_("_mode_index",15,af,93,a2)},
	{::hx::fsString,(int)offsetof(FlxUI_obj,_curr_mode),HX_("_curr_mode",d1,32,bc,27)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,_ptr),HX_("_ptr",ef,a6,20,3f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUI */ ,(int)offsetof(FlxUI_obj,_superIndexUI),HX_("_superIndexUI",8a,fc,6d,d1)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_safe_input_delay_elapsed),HX_("_safe_input_delay_elapsed",38,44,1a,3b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUI_obj,_failure_checks),HX_("_failure_checks",df,fd,ae,28)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FlxUI_obj,_assetsToCleanUp),HX_("_assetsToCleanUp",87,59,f7,5a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FlxUI_obj,_scaledAssets),HX_("_scaledAssets",9c,29,61,6b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxUI_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUI_obj_sMemberFields[] = {
	HX_("do_safe_input_delay",90,5b,9d,88),
	HX_("safe_input_delay_time",50,71,b0,f4),
	HX_("failed",bd,c5,fe,e7),
	HX_("failed_by",59,1a,00,5f),
	HX_("isRoot",2c,b3,15,69),
	HX_("get_isRoot",f5,22,9d,59),
	HX_("liveFilePath",4d,75,d5,b0),
	HX_("get_tongue",8d,b5,6b,84),
	HX_("set_tongue",01,54,e9,87),
	HX_("focus",d8,5f,89,04),
	HX_("set_focus",3b,a8,83,2b),
	HX_("getTextFallback",a5,c3,03,82),
	HX_("cursorLists",9f,0f,e7,fd),
	HX_("_ptr_tongue",54,fc,53,03),
	HX_("_data",09,72,74,f5),
	HX_("_tongueSet",ff,7b,c4,6b),
	HX_("callEvent",9c,22,04,02),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("getRequest",59,65,e6,93),
	HX_("onFocus",39,fe,c6,9a),
	HX_("setWidgetSuppression",4d,9a,d2,bf),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("setSuperIndex",d9,09,3c,bf),
	HX_("update",09,86,05,87),
	HX_("toggleShow",b1,1a,09,e4),
	HX_("showGroup",02,19,59,c8),
	HX_("showAsset",b3,cf,9d,54),
	HX_("removeAsset",0c,47,6d,24),
	HX_("addAsset",0f,90,96,9f),
	HX_("replaceAsset",1c,55,c8,19),
	HX_("destroy",fa,2c,86,24),
	HX_("load",26,9a,b7,47),
	HX_("unparentXML",54,a1,ff,04),
	HX_("_loadPointSize",6c,aa,6c,e2),
	HX_("_loadSub",7b,7c,9a,42),
	HX_("_addTags",1b,51,ec,c2),
	HX_("_loadGlobals",2b,72,e0,4a),
	HX_("_postLoad",05,f2,8c,4d),
	HX_("_sendTo",82,ca,fb,d9),
	HX_("sendToFront",c6,b8,1e,5d),
	HX_("sendToBack",aa,6c,20,18),
	HX_("get_currMode",7e,5f,82,40),
	HX_("set_currMode",f2,82,7b,55),
	HX_("setMode",25,14,e5,0d),
	HX_("showThing",b1,ed,ed,3d),
	HX_("getGroup",c9,c2,cb,f9),
	HX_("getFlxText",49,64,62,5f),
	HX_("getAllAssets",0e,61,bd,29),
	HX_("getAssetKeys",8e,cc,03,bb),
	HX_("hasAsset",36,b4,91,b2),
	HX_("getAsset",7a,79,10,86),
	HX_("getAssetsWithTag",3b,93,24,96),
	HX_("getAssetGroup",65,0f,45,a3),
	HX_("getMode",19,83,e3,1a),
	HX_("getLabelStyleFromDefinition",d0,35,54,c4),
	HX_("getLabelStyleFromData",a7,ba,4b,0c),
	HX_("checkVariable",24,6f,67,51),
	HX_("setVariable",fe,db,6d,99),
	HX_("getVariable",f2,d4,00,8f),
	HX_("getDefinition",c9,31,80,48),
	HX_("screenWidth",fa,02,e8,81),
	HX_("screenHeight",73,10,6a,df),
	HX_("_postLoaded",a4,95,31,80),
	HX_("_pointX",a7,23,a5,65),
	HX_("_pointY",a8,23,a5,65),
	HX_("_group_index",d3,bc,ca,66),
	HX_("_asset_index",44,0e,d3,80),
	HX_("_tag_index",ee,f7,41,12),
	HX_("_definition_index",85,96,e5,82),
	HX_("_variable_index",2e,92,8a,75),
	HX_("_mode_index",15,af,93,a2),
	HX_("_curr_mode",d1,32,bc,27),
	HX_("_ptr",ef,a6,20,3f),
	HX_("_superIndexUI",8a,fc,6d,d1),
	HX_("_safe_input_delay_elapsed",38,44,1a,3b),
	HX_("_failure_checks",df,fd,ae,28),
	HX_("_assetsToCleanUp",87,59,f7,5a),
	HX_("_scaledAssets",9c,29,61,6b),
	HX_("replaceInGroup",46,97,32,5c),
	HX_("applyNodeConditionals",1d,b1,ba,ec),
	HX_("applyNodeChanges",53,40,3a,89),
	HX_("loadThing",e8,d3,c0,2a),
	HX_("_loadThingGetInfo",7b,f7,10,95),
	HX_("_loadTooltip",7e,19,34,a1),
	HX_("_loadTooltipData",c8,32,6e,09),
	HX_("_loadTooltipStyle",d3,d2,93,e6),
	HX_("_loadTooltipText",4b,a9,04,14),
	HX_("_loadAnchor",5a,36,26,e8),
	HX_("_loadThing",a9,4f,63,86),
	HX_("_loadX",b3,8e,d6,74),
	HX_("_loadY",b4,8e,d6,74),
	HX_("_loadScale",45,96,a8,ef),
	HX_("_loadScaleX",73,e6,da,c3),
	HX_("_loadScaleY",74,e6,da,c3),
	HX_("_loadWidth",c1,7d,3c,41),
	HX_("_loadHeight",cc,03,01,8a),
	HX_("_loadCompass",0d,86,10,ba),
	HX_("_changeParamsThing",f9,9f,76,8d),
	HX_("_changeThing",5f,de,58,9b),
	HX_("_alignThing",08,c4,65,7b),
	HX_("_doAlign",bb,90,76,8e),
	HX_("_checkFailure",41,bb,ef,e6),
	HX_("_resizeThing",5b,b7,96,b4),
	HX_("_postLoadThing",a9,93,c5,16),
	HX_("_loadTileTest",c5,6d,d7,22),
	HX_("_loadString",b6,24,e5,98),
	HX_("_loadText",52,95,2f,05),
	HX_("_loadInputText",12,4b,dc,d4),
	HX_("_loadRadioGroup",a9,f6,74,63),
	HX_("_loadCheckBox",48,09,b5,48),
	HX_("_loadDropDownMenu",15,f4,83,17),
	HX_("_loadTest",f7,90,2f,05),
	HX_("_loadTestSub",c9,84,6d,f4),
	HX_("parseVarValue",5d,e2,a6,bd),
	HX_("_loadLayout",8f,aa,6d,e0),
	HX_("addToCleanup",88,65,2a,da),
	HX_("addToScaledAssets",d9,b2,d7,0f),
	HX_("cleanup",24,0c,42,ab),
	HX_("createUI",50,68,f4,2b),
	HX_("_loadTabMenu",0f,87,76,77),
	HX_("_loadNumericStepper",a9,d6,b0,b0),
	HX_("getResizeRatio",81,09,c6,aa),
	HX_("_loadButton",d7,5d,95,61),
	HX_("_loadRegion",d9,bc,41,88),
	HX_("_load9SliceSprite",c3,47,93,cb),
	HX_("load9SliceSprite_scaleSub",91,16,9e,f3),
	HX_("_loadTileRule",6f,1e,91,21),
	HX_("_loadBox",06,91,8d,42),
	HX_("_loadLine",99,e0,e8,ff),
	HX_("_loadBar",ce,84,8d,42),
	HX_("_loadSprite",ea,d7,4a,4b),
	HX_("loadSmooth",f4,36,96,bc),
	HX_("loadScaledSrc",64,61,58,bd),
	HX_("thisWidth",c8,4a,ca,38),
	HX_("thisHeight",e5,9c,86,2e),
	HX_("_getAnchorPos",88,41,e7,51),
	HX_("getRound",d8,07,3d,4d),
	HX_("doRound",c3,d8,92,20),
	HX_("calcMaxMinSize",24,12,ef,e7),
	HX_("_getDataSize",c2,f0,c4,17),
	HX_("_getOperation",90,b3,05,92),
	HX_("_doOperation",1d,f1,48,5f),
	HX_("_getStretch",2e,91,3e,18),
	HX_("getAssetProperty",ef,87,a7,3d),
	HX_("_loadCursor",bb,8a,9d,c6),
	HX_("_loadPosition",ce,1f,d2,66),
	HX_("_loadBorder",d1,48,cf,eb),
	HX_("_loadColor",1e,39,36,c1),
	HX_("_loadFontDef",b1,4b,c6,cc),
	HX_("_loadFontFace",31,51,0b,62),
	HX_("_onFinishLoad",f7,60,a4,8e),
	HX_("getText",63,7c,7c,1f),
	HX_("formatFromCode",0e,5a,55,e0),
	HX_("formatButtonText",d6,99,61,56),
	::String(null()) };

::hx::Class FlxUI_obj::__mClass;

static ::String FlxUI_obj_sStaticFields[] = {
	HX_("event",1a,c8,c4,75),
	HX_("fontStr",22,4e,2a,96),
	HX_("fontSize",30,be,d1,ce),
	HX_("font",cf,5d,c0,43),
	HX_("__getTongue",da,17,67,3e),
	HX_("forceFocus",ed,49,5e,9b),
	HX_("getLeafUIState",49,ca,4d,90),
	HX_("request",4f,df,84,44),
	HX_("_delta",39,2f,0e,d3),
	HX_("_center",74,37,52,74),
	HX_("consolidateData",d3,c5,7a,dc),
	HX_("_loadBitmapRect",18,ff,15,1d),
	HX_("getParams",7c,84,d1,69),
	HX_("sortParams",44,71,60,4a),
	::String(null())
};

void FlxUI_obj::__register()
{
	FlxUI_obj _hx_dummy;
	FlxUI_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxUI",55,08,11,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUI_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxUI_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxUI_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxUI_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUI_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
