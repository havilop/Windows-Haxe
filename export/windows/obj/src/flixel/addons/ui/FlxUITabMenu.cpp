// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_21_new,"flixel.addons.ui.FlxUITabMenu","new",0xc82b8b31,"flixel.addons.ui.FlxUITabMenu.new","flixel/addons/ui/FlxUITabMenu.hx",21,0x21d3489e)
static const ::String _hx_array_data_6a801ebf_3[] = {
	HX_("front",a9,18,8e,06),HX_("back",27,da,10,41),
};
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_176_new,"flixel.addons.ui.FlxUITabMenu","new",0xc82b8b31,"flixel.addons.ui.FlxUITabMenu.new","flixel/addons/ui/FlxUITabMenu.hx",176,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_30_get_numTabs,"flixel.addons.ui.FlxUITabMenu","get_numTabs",0xbaaa29cc,"flixel.addons.ui.FlxUITabMenu.get_numTabs","flixel/addons/ui/FlxUITabMenu.hx",30,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_39_getEvent,"flixel.addons.ui.FlxUITabMenu","getEvent",0x34184733,"flixel.addons.ui.FlxUITabMenu.getEvent","flixel/addons/ui/FlxUITabMenu.hx",39,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_45_getRequest,"flixel.addons.ui.FlxUITabMenu","getRequest",0xde0916a8,"flixel.addons.ui.FlxUITabMenu.getRequest","flixel/addons/ui/FlxUITabMenu.hx",45,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_51_set_skipButtonUpdate,"flixel.addons.ui.FlxUITabMenu","set_skipButtonUpdate",0x94812946,"flixel.addons.ui.FlxUITabMenu.set_skipButtonUpdate","flixel/addons/ui/FlxUITabMenu.hx",51,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_71_get_width,"flixel.addons.ui.FlxUITabMenu","get_width",0x5c713fee,"flixel.addons.ui.FlxUITabMenu.get_width","flixel/addons/ui/FlxUITabMenu.hx",71,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_74_get_height,"flixel.addons.ui.FlxUITabMenu","get_height",0x3cf628ff,"flixel.addons.ui.FlxUITabMenu.get_height","flixel/addons/ui/FlxUITabMenu.hx",74,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_82_resize,"flixel.addons.ui.FlxUITabMenu","resize",0xfcd977c3,"flixel.addons.ui.FlxUITabMenu.resize","flixel/addons/ui/FlxUITabMenu.hx",82,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_102_get_selected_tab,"flixel.addons.ui.FlxUITabMenu","get_selected_tab",0xa5609649,"flixel.addons.ui.FlxUITabMenu.get_selected_tab","flixel/addons/ui/FlxUITabMenu.hx",102,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_103_set_selected_tab,"flixel.addons.ui.FlxUITabMenu","set_selected_tab",0xfba283bd,"flixel.addons.ui.FlxUITabMenu.set_selected_tab","flixel/addons/ui/FlxUITabMenu.hx",103,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_109_get_selected_tab_id,"flixel.addons.ui.FlxUITabMenu","get_selected_tab_id",0x4d2a2f51,"flixel.addons.ui.FlxUITabMenu.get_selected_tab_id","flixel/addons/ui/FlxUITabMenu.hx",109,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_110_set_selected_tab_id,"flixel.addons.ui.FlxUITabMenu","set_selected_tab_id",0x89c7225d,"flixel.addons.ui.FlxUITabMenu.set_selected_tab_id","flixel/addons/ui/FlxUITabMenu.hx",110,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_185_destroy,"flixel.addons.ui.FlxUITabMenu","destroy",0x0282244b,"flixel.addons.ui.FlxUITabMenu.destroy","flixel/addons/ui/FlxUITabMenu.hx",185,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_194_getTab,"flixel.addons.ui.FlxUITabMenu","getTab",0x9785b12e,"flixel.addons.ui.FlxUITabMenu.getTab","flixel/addons/ui/FlxUITabMenu.hx",194,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_210_getTabGroup,"flixel.addons.ui.FlxUITabMenu","getTabGroup",0xc2c56b31,"flixel.addons.ui.FlxUITabMenu.getTabGroup","flixel/addons/ui/FlxUITabMenu.hx",210,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_227_getBack,"flixel.addons.ui.FlxUITabMenu","getBack",0xf18f812e,"flixel.addons.ui.FlxUITabMenu.getBack","flixel/addons/ui/FlxUITabMenu.hx",227,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_230_replaceBack,"flixel.addons.ui.FlxUITabMenu","replaceBack",0xe9e4ec4c,"flixel.addons.ui.FlxUITabMenu.replaceBack","flixel/addons/ui/FlxUITabMenu.hx",230,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_247_addGroup,"flixel.addons.ui.FlxUITabMenu","addGroup",0x71ce48ed,"flixel.addons.ui.FlxUITabMenu.addGroup","flixel/addons/ui/FlxUITabMenu.hx",247,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_272__onTabEvent,"flixel.addons.ui.FlxUITabMenu","_onTabEvent",0x28e25eb4,"flixel.addons.ui.FlxUITabMenu._onTabEvent","flixel/addons/ui/FlxUITabMenu.hx",272,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_282_stackTabs,"flixel.addons.ui.FlxUITabMenu","stackTabs",0x2659b577,"flixel.addons.ui.FlxUITabMenu.stackTabs","flixel/addons/ui/FlxUITabMenu.hx",282,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_322_showTabId,"flixel.addons.ui.FlxUITabMenu","showTabId",0x87ad2ce4,"flixel.addons.ui.FlxUITabMenu.showTabId","flixel/addons/ui/FlxUITabMenu.hx",322,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_359_sortTabs,"flixel.addons.ui.FlxUITabMenu","sortTabs",0xaeee7a8b,"flixel.addons.ui.FlxUITabMenu.sortTabs","flixel/addons/ui/FlxUITabMenu.hx",359,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_369_showTabInt,"flixel.addons.ui.FlxUITabMenu","showTabInt",0x2fda23c6,"flixel.addons.ui.FlxUITabMenu.showTabInt","flixel/addons/ui/FlxUITabMenu.hx",369,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_379__showOnlyGroup,"flixel.addons.ui.FlxUITabMenu","_showOnlyGroup",0xbe9f6e86,"flixel.addons.ui.FlxUITabMenu._showOnlyGroup","flixel/addons/ui/FlxUITabMenu.hx",379,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_388_getFirstTab,"flixel.addons.ui.FlxUITabMenu","getFirstTab",0xab440e8c,"flixel.addons.ui.FlxUITabMenu.getFirstTab","flixel/addons/ui/FlxUITabMenu.hx",388,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_396_distributeTabs,"flixel.addons.ui.FlxUITabMenu","distributeTabs",0xcf609f0e,"flixel.addons.ui.FlxUITabMenu.distributeTabs","flixel/addons/ui/FlxUITabMenu.hx",396,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_24_boot,"flixel.addons.ui.FlxUITabMenu","boot",0x56074041,"flixel.addons.ui.FlxUITabMenu.boot","flixel/addons/ui/FlxUITabMenu.hx",24,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_26_boot,"flixel.addons.ui.FlxUITabMenu","boot",0x56074041,"flixel.addons.ui.FlxUITabMenu.boot","flixel/addons/ui/FlxUITabMenu.hx",26,0x21d3489e)
HX_LOCAL_STACK_FRAME(_hx_pos_261d41b9609a7d0a_27_boot,"flixel.addons.ui.FlxUITabMenu","boot",0x56074041,"flixel.addons.ui.FlxUITabMenu.boot","flixel/addons/ui/FlxUITabMenu.hx",27,0x21d3489e)
namespace flixel{
namespace addons{
namespace ui{

void FlxUITabMenu_obj::__construct( ::flixel::FlxSprite back_,::Array< ::Dynamic> tabs_,::Array< ::Dynamic> tab_names_and_labels_, ::flixel::math::FlxBasePoint tab_offset, ::Dynamic __o_stretch_tabs, ::Dynamic tab_spacing,::Array< ::String > tab_stacking){
            		 ::Dynamic stretch_tabs = __o_stretch_tabs;
            		if (::hx::IsNull(__o_stretch_tabs)) stretch_tabs = false;
            	HX_GC_STACKFRAME(&_hx_pos_261d41b9609a7d0a_21_new)
HXLINE( 355)		this->_selected_tab = -1;
HXLINE( 354)		this->_selected_tab_id = HX_("",00,00,00,00);
HXLINE( 352)		this->_tab_offset = null();
HXLINE( 351)		this->_tab_stacking = null();
HXLINE( 350)		this->_tab_spacing = null();
HXLINE( 349)		this->_stretch_tabs = false;
HXLINE( 119)		super::__construct(null(),null());
HXLINE( 121)		if (::hx::IsNull( back_ )) {
HXLINE( 123)			back_ =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("flixel/flixel-ui/img/chrome_flat.png",30,cf,0a,80), ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,200,200),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 126)		this->_back = back_;
HXLINE( 127)		this->add(this->_back);
HXLINE( 129)		if (::hx::IsNull( tabs_ )) {
HXLINE( 130)			if (::hx::IsNotNull( tab_names_and_labels_ )) {
HXLINE( 131)				tabs_ = ::Array_obj< ::Dynamic>::__new();
HXLINE( 134)				{
HXLINE( 134)					int _g = 0;
HXDLIN( 134)					while((_g < tab_names_and_labels_->length)){
HXLINE( 134)						 ::Dynamic tdata = tab_names_and_labels_->__get(_g);
HXDLIN( 134)						_g = (_g + 1);
HXLINE( 136)						 ::flixel::addons::ui::FlxUIButton fb =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,0,0,( (::String)(tdata->__Field(HX_("label",f4,0d,af,6f),::hx::paccDynamic)) ),null(),null(),null(),null());
HXLINE( 139)						fb->up_color = 16777215;
HXLINE( 140)						fb->down_color = 16777215;
HXLINE( 141)						fb->over_color = 16777215;
HXLINE( 142)						fb->up_toggle_color = 16777215;
HXLINE( 143)						fb->down_toggle_color = 16777215;
HXLINE( 144)						fb->over_toggle_color = 16777215;
HXLINE( 146)						( ( ::flixel::text::FlxText)(fb->label) )->set_color(16777215);
HXLINE( 147)						{
HXLINE( 147)							 ::flixel::addons::ui::FlxUIText _this = ( ( ::flixel::addons::ui::FlxUIText)(fb->label) );
HXDLIN( 147)							_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 147)							_this->set_borderColor(0);
HXDLIN( 147)							_this->set_borderSize(( (Float)(1) ));
HXDLIN( 147)							_this->set_borderQuality(( (Float)(1) ));
            						}
HXLINE( 149)						fb->name = ( (::String)(tdata->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE( 152)						::cpp::VirtualArray graphic_names = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(1,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(2,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(3,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(4,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(5,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04));
HXLINE( 153)						::Array< int > slice9tab = ::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07));
HXLINE( 154)						::Array< ::Dynamic> slice9_names = ::Array_obj< ::Dynamic>::__new(6)->init(0,slice9tab)->init(1,slice9tab)->init(2,slice9tab)->init(3,slice9tab)->init(4,slice9tab)->init(5,slice9tab);
HXLINE( 155)						fb->loadGraphicSlice9(graphic_names,0,0,slice9_names,0,-1,true,null(),null(),null());
HXLINE( 156)						tabs_->push(fb);
            					}
            				}
            			}
            		}
HXLINE( 161)		this->_tabs = tabs_;
HXLINE( 162)		this->_stretch_tabs = ( (bool)(stretch_tabs) );
HXLINE( 163)		this->_tab_spacing = tab_spacing;
HXLINE( 164)		this->_tab_stacking = tab_stacking;
HXLINE( 165)		if (::hx::IsNull( this->_tab_stacking )) {
HXLINE( 166)			this->_tab_stacking = ::Array_obj< ::String >::fromData( _hx_array_data_6a801ebf_3,2);
            		}
HXLINE( 168)		this->_tab_offset = tab_offset;
HXLINE( 170)		int i = 0;
HXLINE( 171)		 ::flixel::addons::ui::FlxUITypedButton tab = null();
HXLINE( 172)		{
HXLINE( 172)			int _g1 = 0;
HXDLIN( 172)			::Array< ::Dynamic> _g2 = this->_tabs;
HXDLIN( 172)			while((_g1 < _g2->length)){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::String,name, ::flixel::addons::ui::FlxUITabMenu,_g3) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_261d41b9609a7d0a_176_new)
HXLINE( 176)					_g3->_onTabEvent(name);
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 172)				::Dynamic t = _g2->__get(_g1);
HXDLIN( 172)				_g1 = (_g1 + 1);
HXLINE( 174)				tab = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE( 175)				this->add(tab);
HXLINE( 176)				 ::flixel::addons::ui::FlxUITabMenu _g3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 176)				::String name = tab->name;
HXDLIN( 176)				 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(name,_g3));
HXDLIN( 176)				tab->onUp->callback = _hx_tmp;
HXLINE( 177)				i = (i + 1);
            			}
            		}
HXLINE( 180)		this->distributeTabs(null());
HXLINE( 182)		this->_tab_groups = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic FlxUITabMenu_obj::__CreateEmpty() { return new FlxUITabMenu_obj; }

void *FlxUITabMenu_obj::_hx_vtable = 0;

Dynamic FlxUITabMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxUITabMenu_obj > _hx_result = new FlxUITabMenu_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool FlxUITabMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x398eb8dc) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x398eb8dc;
		}
	} else {
		if (inClassId<=(int)0x7dab0655) {
			return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
		} else {
			return inClassId==(int)0x7f2b8171;
		}
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUITabMenu_obj::getEvent,
	(  ::Dynamic (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUITabMenu_obj::getRequest,
};

static ::flixel::addons::ui::interfaces::IFlxUIClickable_obj _hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IFlxUIClickable= {
	( bool (::hx::Object::*)(bool))&::flixel::addons::ui::FlxUITabMenu_obj::set_skipButtonUpdate,
};

static ::flixel::addons::ui::interfaces::IResizable_obj _hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IResizable= {
	( Float (::hx::Object::*)())&::flixel::addons::ui::FlxUITabMenu_obj::get_width,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUITabMenu_obj::set_width,
	( Float (::hx::Object::*)())&::flixel::addons::ui::FlxUITabMenu_obj::get_height,
	( Float (::hx::Object::*)(Float))&::flixel::addons::ui::FlxUITabMenu_obj::set_height,
	( void (::hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUITabMenu_obj::resize,
};

void *FlxUITabMenu_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IEventGetter;
		case (int)0x3e998408: return &_hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IFlxUIClickable;
		case (int)0x194a3c9f: return &_hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IResizable;
	}
	return super::_hx_getInterface(inHash);
}

int FlxUITabMenu_obj::get_numTabs(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_30_get_numTabs)
HXLINE(  31)		if (::hx::IsNotNull( this->_tabs )) {
HXLINE(  33)			return this->_tabs->length;
            		}
HXLINE(  35)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,get_numTabs,return )

void FlxUITabMenu_obj::getEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_39_getEvent)
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUITabMenu_obj,getEvent,(void))

 ::Dynamic FlxUITabMenu_obj::getRequest(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_45_getRequest)
HXDLIN(  45)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUITabMenu_obj,getRequest,return )

bool FlxUITabMenu_obj::set_skipButtonUpdate(bool b){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_51_set_skipButtonUpdate)
HXLINE(  52)		this->skipButtonUpdate = b;
HXLINE(  53)		{
HXLINE(  53)			int _g = 0;
HXDLIN(  53)			::Array< ::Dynamic> _g1 = this->_tabs;
HXDLIN(  53)			while((_g < _g1->length)){
HXLINE(  53)				::Dynamic tab = _g1->__get(_g);
HXDLIN(  53)				_g = (_g + 1);
HXLINE(  54)				 ::flixel::addons::ui::FlxUITypedButton tabtyped = ( ( ::flixel::addons::ui::FlxUITypedButton)(tab) );
HXLINE(  55)				tabtyped->set_skipButtonUpdate(b);
            			}
            		}
HXLINE(  57)		{
HXLINE(  57)			int _g2 = 0;
HXDLIN(  57)			::Array< ::Dynamic> _g3 = this->_tab_groups;
HXDLIN(  57)			while((_g2 < _g3->length)){
HXLINE(  57)				 ::flixel::addons::ui::FlxUIGroup group = _g3->__get(_g2).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXDLIN(  57)				_g2 = (_g2 + 1);
HXLINE(  58)				{
HXLINE(  58)					int _g4 = 0;
HXDLIN(  58)					::Array< ::Dynamic> _g5 = group->group->members;
HXDLIN(  58)					while((_g4 < _g5->length)){
HXLINE(  58)						 ::flixel::FlxSprite sprite = _g5->__get(_g4).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  58)						_g4 = (_g4 + 1);
HXLINE(  59)						if (::Std_obj::isOfType(sprite,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIClickable >()) ))) {
HXLINE(  60)							::Dynamic widget = sprite;
HXLINE(  61)							::flixel::addons::ui::interfaces::IFlxUIClickable_obj::set_skipButtonUpdate(widget,b);
            						}
            					}
            				}
            			}
            		}
HXLINE(  65)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,set_skipButtonUpdate,return )

Float FlxUITabMenu_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_71_get_width)
HXDLIN(  71)		return this->_back->get_width();
            	}


Float FlxUITabMenu_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_74_get_height)
HXLINE(  75)		::Dynamic fbt = this->getFirstTab();
HXLINE(  76)		if (::hx::IsNotNull( fbt )) {
HXLINE(  77)			Float _hx_tmp = this->_back->y;
HXDLIN(  77)			Float _hx_tmp1 = (_hx_tmp + this->_back->get_height());
HXDLIN(  77)			return (_hx_tmp1 - ( (Float)(fbt->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
            		}
HXLINE(  79)		return this->_back->get_height();
            	}


void FlxUITabMenu_obj::resize(Float W,Float H){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_82_resize)
HXLINE(  83)		::Dynamic ir;
HXLINE(  84)		if (::Std_obj::isOfType(this->_back,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >()) ))) {
HXLINE(  86)			this->distributeTabs(W);
HXLINE(  87)			ir = this->_back;
HXLINE(  88)			 ::flixel::addons::ui::FlxUITypedButton fbt = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->getFirstTab()) );
HXLINE(  89)			if (::hx::IsNotNull( fbt )) {
HXLINE(  90)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,W,(H - fbt->get_height()));
            			}
            			else {
HXLINE(  92)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,W,H);
            			}
            		}
            		else {
HXLINE(  97)			this->distributeTabs(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITabMenu_obj,resize,(void))

int FlxUITabMenu_obj::get_selected_tab(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_102_get_selected_tab)
HXDLIN( 102)		return this->_selected_tab;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,get_selected_tab,return )

int FlxUITabMenu_obj::set_selected_tab(int i){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_103_set_selected_tab)
HXLINE( 104)		this->showTabInt(i);
HXLINE( 105)		return this->_selected_tab;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,set_selected_tab,return )

::String FlxUITabMenu_obj::get_selected_tab_id(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_109_get_selected_tab_id)
HXDLIN( 109)		return this->_selected_tab_id;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,get_selected_tab_id,return )

::String FlxUITabMenu_obj::set_selected_tab_id(::String str){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_110_set_selected_tab_id)
HXLINE( 111)		this->showTabId(str);
HXLINE( 112)		return this->_selected_tab_id;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,set_selected_tab_id,return )

void FlxUITabMenu_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_185_destroy)
HXLINE( 186)		this->super::destroy();
HXLINE( 187)		::flixel::addons::ui::U_obj::clearArray(this->_tab_groups);
HXLINE( 188)		::flixel::addons::ui::U_obj::clearArray(this->_tabs);
HXLINE( 189)		this->_back = null();
HXLINE( 190)		this->_tabs = null();
HXLINE( 191)		this->_tab_groups = null();
            	}


::Dynamic FlxUITabMenu_obj::getTab(::String name, ::Dynamic index){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_194_getTab)
HXLINE( 195)		if (::hx::IsNotNull( name )) {
HXLINE( 196)			int _g = 0;
HXDLIN( 196)			::Array< ::Dynamic> _g1 = this->_tabs;
HXDLIN( 196)			while((_g < _g1->length)){
HXLINE( 196)				::Dynamic tab = _g1->__get(_g);
HXDLIN( 196)				_g = (_g + 1);
HXLINE( 197)				if (::hx::IsEq( tab->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),name )) {
HXLINE( 198)					return tab;
            				}
            			}
            		}
HXLINE( 202)		if (::hx::IsNotNull( index )) {
HXLINE( 203)			if (::hx::IsLess( index,this->_tabs->length )) {
HXLINE( 204)				return this->_tabs->__get(( (int)(index) ));
            			}
            		}
HXLINE( 207)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITabMenu_obj,getTab,return )

 ::flixel::addons::ui::FlxUIGroup FlxUITabMenu_obj::getTabGroup(::String name, ::Dynamic index){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_210_getTabGroup)
HXLINE( 211)		if (::hx::IsNotNull( name )) {
HXLINE( 212)			int _g = 0;
HXDLIN( 212)			::Array< ::Dynamic> _g1 = this->_tab_groups;
HXDLIN( 212)			while((_g < _g1->length)){
HXLINE( 212)				 ::flixel::addons::ui::FlxUIGroup tabGroup = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXDLIN( 212)				_g = (_g + 1);
HXLINE( 213)				if ((tabGroup->name == name)) {
HXLINE( 214)					return tabGroup;
            				}
            			}
            		}
HXLINE( 218)		if (::hx::IsNotNull( index )) {
HXLINE( 219)			if (::hx::IsLess( index,this->_tab_groups->length )) {
HXLINE( 220)				return this->_tab_groups->__get(( (int)(index) )).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
            			}
            		}
HXLINE( 223)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITabMenu_obj,getTabGroup,return )

 ::flixel::FlxSprite FlxUITabMenu_obj::getBack(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_227_getBack)
HXDLIN( 227)		return this->_back;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,getBack,return )

void FlxUITabMenu_obj::replaceBack( ::flixel::FlxSprite newBack){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_230_replaceBack)
HXLINE( 231)		int i = this->group->members->indexOf(this->_back,null());
HXLINE( 232)		if ((i != -1)) {
HXLINE( 234)			 ::flixel::FlxSprite oldBack = this->_back;
HXLINE( 235)			if (::Std_obj::isOfType(newBack,( ( ::Dynamic)(::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >()) ))) {
HXLINE( 237)				::Dynamic ir = newBack;
HXLINE( 238)				Float _hx_tmp = oldBack->get_width();
HXDLIN( 238)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,_hx_tmp,oldBack->get_height());
            			}
HXLINE( 240)			this->group->members->set(i,newBack);
HXLINE( 241)			newBack->set_x(oldBack->x);
HXLINE( 242)			newBack->set_y(oldBack->y);
HXLINE( 243)			oldBack->destroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,replaceBack,(void))

void FlxUITabMenu_obj::addGroup( ::flixel::addons::ui::FlxUIGroup g){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_247_addGroup)
HXLINE( 248)		if (::hx::IsInstanceEq( g,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 249)			return;
            		}
HXLINE( 252)		if (!(this->hasThis(g))) {
HXLINE( 253)			g->set_y((this->_back->y - this->y));
HXLINE( 254)			this->add(g);
HXLINE( 255)			this->_tab_groups->push(g);
            		}
HXLINE( 259)		this->_showOnlyGroup(HX_("",00,00,00,00));
HXLINE( 262)		if ((this->_tab_groups->length == 1)) {
HXLINE( 263)			this->set_selected_tab(0);
            		}
HXLINE( 267)		if ((this->_selected_tab != -1)) {
HXLINE( 268)			this->set_selected_tab(this->_selected_tab);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,addGroup,(void))

void FlxUITabMenu_obj::_onTabEvent(::String name){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_272__onTabEvent)
HXLINE( 273)		this->showTabId(name);
HXLINE( 274)		::Dynamic tab = this->getTab(name,null());
HXLINE( 275)		::cpp::VirtualArray params;
HXDLIN( 275)		if (::hx::IsNotNull( tab )) {
HXLINE( 275)			params = ( (::cpp::VirtualArray)(tab->__Field(HX_("params",46,fb,7a,ed),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 275)			params = null();
            		}
HXLINE( 276)		if (this->broadcastToFlxUI) {
HXLINE( 277)			::flixel::addons::ui::FlxUI_obj::event(HX_("tab_menu_click",52,a3,80,94),::hx::ObjectPtr<OBJ_>(this),name,params);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,_onTabEvent,(void))

void FlxUITabMenu_obj::stackTabs(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_282_stackTabs)
HXLINE( 283)		Float _backx = this->_back->x;
HXLINE( 284)		Float _backy = this->_back->y;
HXLINE( 286)		this->group->remove(this->_back,true).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 288)		 ::flixel::addons::ui::FlxUITypedButton tab = null();
HXLINE( 289)		{
HXLINE( 289)			int _g = 0;
HXDLIN( 289)			::Array< ::Dynamic> _g1 = this->_tabs;
HXDLIN( 289)			while((_g < _g1->length)){
HXLINE( 289)				::Dynamic t = _g1->__get(_g);
HXDLIN( 289)				_g = (_g + 1);
HXLINE( 290)				tab = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE( 291)				if (tab->toggled) {
HXLINE( 293)					this->group->remove(tab,true).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
HXLINE( 297)		this->group->add(this->_back).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 299)		{
HXLINE( 299)			int _g2 = 0;
HXDLIN( 299)			::Array< ::Dynamic> _g3 = this->_tabs;
HXDLIN( 299)			while((_g2 < _g3->length)){
HXLINE( 299)				::Dynamic t1 = _g3->__get(_g2);
HXDLIN( 299)				_g2 = (_g2 + 1);
HXLINE( 300)				tab = ( ( ::flixel::addons::ui::FlxUITypedButton)(t1) );
HXLINE( 301)				if (tab->toggled) {
HXLINE( 303)					this->group->add(tab).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
HXLINE( 308)		{
HXLINE( 308)			int _g4 = 0;
HXDLIN( 308)			::Array< ::Dynamic> _g5 = this->_tab_groups;
HXDLIN( 308)			while((_g4 < _g5->length)){
HXLINE( 308)				 ::flixel::addons::ui::FlxUIGroup group = _g5->__get(_g4).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXDLIN( 308)				_g4 = (_g4 + 1);
HXLINE( 310)				Float tempX = group->x;
HXLINE( 311)				Float tempY = group->y;
HXLINE( 312)				this->remove(group,true);
HXLINE( 313)				this->add(group);
HXLINE( 314)				group->set_x(tempX);
HXLINE( 315)				group->set_y(tempY);
            			}
            		}
HXLINE( 318)		this->_back->set_x(_backx);
HXLINE( 319)		this->_back->set_y(_backy);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,stackTabs,(void))

void FlxUITabMenu_obj::showTabId(::String name){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_322_showTabId)
HXLINE( 324)		this->_selected_tab = -1;
HXLINE( 325)		this->_selected_tab_id = HX_("",00,00,00,00);
HXLINE( 327)		int i = 0;
HXLINE( 328)		{
HXLINE( 328)			int _g = 0;
HXDLIN( 328)			::Array< ::Dynamic> _g1 = this->_tabs;
HXDLIN( 328)			while((_g < _g1->length)){
HXLINE( 328)				::Dynamic tab = _g1->__get(_g);
HXDLIN( 328)				_g = (_g + 1);
HXLINE( 330)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::set_toggled(tab,false);
HXLINE( 331)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::forceStateHandler(tab,HX_("out_button",c3,20,d2,fb));
HXLINE( 332)				if (::hx::IsEq( tab->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),name )) {
HXLINE( 333)					::flixel::addons::ui::interfaces::IFlxUIButton_obj::set_toggled(tab,true);
HXLINE( 334)					this->_selected_tab_id = name;
HXLINE( 335)					this->_selected_tab = i;
            				}
HXLINE( 337)				i = (i + 1);
            			}
            		}
HXLINE( 340)		this->_showOnlyGroup(name);
HXLINE( 341)		this->stackTabs();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,showTabId,(void))

int FlxUITabMenu_obj::sortTabs(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_359_sortTabs)
HXLINE( 360)		if (::hx::IsLess( a->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),b->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE( 361)			return -1;
            		}
            		else {
HXLINE( 362)			if (::hx::IsGreater( a->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),b->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE( 363)				return 1;
            			}
            		}
HXLINE( 365)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITabMenu_obj,sortTabs,return )

void FlxUITabMenu_obj::showTabInt(int i){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_369_showTabInt)
HXDLIN( 369)		bool _hx_tmp;
HXDLIN( 369)		bool _hx_tmp1;
HXDLIN( 369)		if ((i >= 0)) {
HXDLIN( 369)			_hx_tmp1 = ::hx::IsNotNull( this->_tabs );
            		}
            		else {
HXDLIN( 369)			_hx_tmp1 = false;
            		}
HXDLIN( 369)		if (_hx_tmp1) {
HXDLIN( 369)			_hx_tmp = (this->_tabs->length > i);
            		}
            		else {
HXDLIN( 369)			_hx_tmp = false;
            		}
HXDLIN( 369)		if (_hx_tmp) {
HXLINE( 370)			::Dynamic _tab = this->_tabs->__get(i);
HXLINE( 371)			::String name = ( (::String)(_tab->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE( 372)			this->showTabId(name);
            		}
            		else {
HXLINE( 374)			this->showTabId(HX_("",00,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,showTabInt,(void))

void FlxUITabMenu_obj::_showOnlyGroup(::String name){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_379__showOnlyGroup)
HXDLIN( 379)		int _g = 0;
HXDLIN( 379)		::Array< ::Dynamic> _g1 = this->_tab_groups;
HXDLIN( 379)		while((_g < _g1->length)){
HXDLIN( 379)			 ::flixel::addons::ui::FlxUIGroup group = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXDLIN( 379)			_g = (_g + 1);
HXLINE( 380)			if ((group->name == name)) {
HXLINE( 381)				group->set_visible(group->set_active(true));
            			}
            			else {
HXLINE( 383)				group->set_visible(group->set_active(false));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,_showOnlyGroup,(void))

::Dynamic FlxUITabMenu_obj::getFirstTab(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_388_getFirstTab)
HXLINE( 389)		::Dynamic _the_tab = null();
HXLINE( 390)		bool _hx_tmp;
HXDLIN( 390)		if (::hx::IsNotNull( this->_tabs )) {
HXLINE( 390)			_hx_tmp = (this->_tabs->length > 0);
            		}
            		else {
HXLINE( 390)			_hx_tmp = false;
            		}
HXDLIN( 390)		if (_hx_tmp) {
HXLINE( 391)			_the_tab = this->_tabs->__get(0);
            		}
HXLINE( 393)		return _the_tab;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,getFirstTab,return )

void FlxUITabMenu_obj::distributeTabs(::hx::Null< Float >  __o_W){
            		Float W = __o_W.Default(-1);
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_396_distributeTabs)
HXLINE( 397)		Float xx = ( (Float)(0) );
HXLINE( 399)		Float tab_width = ( (Float)(0) );
HXLINE( 401)		if ((W == -1)) {
HXLINE( 403)			W = this->_back->get_width();
            		}
HXLINE( 406)		Float diff_size = ( (Float)(0) );
HXLINE( 407)		if (this->_stretch_tabs) {
HXLINE( 408)			tab_width = (W / ( (Float)(this->_tabs->length) ));
HXLINE( 409)			int tot_size = ::Std_obj::_hx_int(tab_width);
HXDLIN( 409)			Float tot_size1 = ( (Float)((tot_size * this->_tabs->length)) );
HXLINE( 410)			if ((tot_size1 < W)) {
HXLINE( 411)				diff_size = (W - tot_size1);
            			}
            		}
HXLINE( 415)		this->_tabs->sort(this->sortTabs_dyn());
HXLINE( 417)		int i = 0;
HXLINE( 418)		Float firstHeight = ( (Float)(0) );
HXLINE( 420)		 ::flixel::addons::ui::FlxUITypedButton tab;
HXLINE( 421)		{
HXLINE( 421)			int _g = 0;
HXDLIN( 421)			::Array< ::Dynamic> _g1 = this->_tabs;
HXDLIN( 421)			while((_g < _g1->length)){
HXLINE( 421)				::Dynamic t = _g1->__get(_g);
HXDLIN( 421)				_g = (_g + 1);
HXLINE( 423)				tab = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE( 425)				tab->set_x((this->x + xx));
HXLINE( 426)				tab->set_y(this->y);
HXLINE( 428)				if (::hx::IsNotNull( this->_tab_offset )) {
HXLINE( 429)					tab->set_x((tab->x + this->_tab_offset->x));
HXLINE( 430)					tab->set_y((tab->y + this->_tab_offset->y));
            				}
HXLINE( 433)				if (this->_stretch_tabs) {
HXLINE( 434)					Float theHeight = tab->get_height();
HXLINE( 435)					if ((i != 0)) {
HXLINE( 440)						theHeight = firstHeight;
HXLINE( 441)						tab->resize_ratio = ( (Float)(-1) );
            					}
HXLINE( 443)					if ((diff_size > 0)) {
HXLINE( 444)						tab->resize((tab_width + 1),theHeight);
HXLINE( 445)						xx = (xx + (::Std_obj::_hx_int(tab_width) + 1));
HXLINE( 446)						diff_size = (diff_size - ( (Float)(1) ));
            					}
            					else {
HXLINE( 448)						tab->resize(tab_width,theHeight);
HXLINE( 449)						xx = (xx + ::Std_obj::_hx_int(tab_width));
            					}
            				}
            				else {
HXLINE( 452)					if (::hx::IsNotNull( this->_tab_spacing )) {
HXLINE( 453)						Float xx1 = tab->get_width();
HXDLIN( 453)						xx = (xx + (xx1 + this->_tab_spacing));
            					}
            					else {
HXLINE( 455)						xx = (xx + tab->get_width());
            					}
            				}
HXLINE( 458)				if ((i == 0)) {
HXLINE( 460)					firstHeight = tab->get_height();
            				}
HXLINE( 462)				i = (i + 1);
            			}
            		}
HXLINE( 465)		bool _hx_tmp;
HXDLIN( 465)		bool _hx_tmp1;
HXDLIN( 465)		if (::hx::IsNotNull( this->_tabs )) {
HXLINE( 465)			_hx_tmp1 = (this->_tabs->length > 0);
            		}
            		else {
HXLINE( 465)			_hx_tmp1 = false;
            		}
HXDLIN( 465)		if (_hx_tmp1) {
HXLINE( 465)			_hx_tmp = ::hx::IsNotNull( this->_tabs->__get(0) );
            		}
            		else {
HXLINE( 465)			_hx_tmp = false;
            		}
HXDLIN( 465)		if (_hx_tmp) {
HXLINE( 467)			 ::flixel::FlxSprite _hx_tmp2 = this->_back;
HXDLIN( 467)			Float _hx_tmp3 = ( (Float)(this->_tabs->__get(0)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 467)			_hx_tmp2->set_y(((_hx_tmp3 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(this->_tabs->__get(0))) - ( (Float)(2) )));
HXLINE( 468)			if (::hx::IsNotNull( this->_tab_offset )) {
HXLINE( 470)				 ::flixel::FlxSprite fh = this->_back;
HXDLIN( 470)				fh->set_y((fh->y - this->_tab_offset->y));
            			}
            		}
HXLINE( 474)		this->calcBounds(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,distributeTabs,(void))

::String FlxUITabMenu_obj::CLICK_EVENT;

::String FlxUITabMenu_obj::STACK_FRONT;

::String FlxUITabMenu_obj::STACK_BACK;


::hx::ObjectPtr< FlxUITabMenu_obj > FlxUITabMenu_obj::__new( ::flixel::FlxSprite back_,::Array< ::Dynamic> tabs_,::Array< ::Dynamic> tab_names_and_labels_, ::flixel::math::FlxBasePoint tab_offset, ::Dynamic __o_stretch_tabs, ::Dynamic tab_spacing,::Array< ::String > tab_stacking) {
	::hx::ObjectPtr< FlxUITabMenu_obj > __this = new FlxUITabMenu_obj();
	__this->__construct(back_,tabs_,tab_names_and_labels_,tab_offset,__o_stretch_tabs,tab_spacing,tab_stacking);
	return __this;
}

::hx::ObjectPtr< FlxUITabMenu_obj > FlxUITabMenu_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxSprite back_,::Array< ::Dynamic> tabs_,::Array< ::Dynamic> tab_names_and_labels_, ::flixel::math::FlxBasePoint tab_offset, ::Dynamic __o_stretch_tabs, ::Dynamic tab_spacing,::Array< ::String > tab_stacking) {
	FlxUITabMenu_obj *__this = (FlxUITabMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUITabMenu_obj), true, "flixel.addons.ui.FlxUITabMenu"));
	*(void **)__this = FlxUITabMenu_obj::_hx_vtable;
	__this->__construct(back_,tabs_,tab_names_and_labels_,tab_offset,__o_stretch_tabs,tab_spacing,tab_stacking);
	return __this;
}

FlxUITabMenu_obj::FlxUITabMenu_obj()
{
}

void FlxUITabMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUITabMenu);
	HX_MARK_MEMBER_NAME(numTabs,"numTabs");
	HX_MARK_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	HX_MARK_MEMBER_NAME(_back,"_back");
	HX_MARK_MEMBER_NAME(_tabs,"_tabs");
	HX_MARK_MEMBER_NAME(_tab_groups,"_tab_groups");
	HX_MARK_MEMBER_NAME(_stretch_tabs,"_stretch_tabs");
	HX_MARK_MEMBER_NAME(_tab_spacing,"_tab_spacing");
	HX_MARK_MEMBER_NAME(_tab_stacking,"_tab_stacking");
	HX_MARK_MEMBER_NAME(_tab_offset,"_tab_offset");
	HX_MARK_MEMBER_NAME(_selected_tab_id,"_selected_tab_id");
	HX_MARK_MEMBER_NAME(_selected_tab,"_selected_tab");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUITabMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(numTabs,"numTabs");
	HX_VISIT_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	HX_VISIT_MEMBER_NAME(_back,"_back");
	HX_VISIT_MEMBER_NAME(_tabs,"_tabs");
	HX_VISIT_MEMBER_NAME(_tab_groups,"_tab_groups");
	HX_VISIT_MEMBER_NAME(_stretch_tabs,"_stretch_tabs");
	HX_VISIT_MEMBER_NAME(_tab_spacing,"_tab_spacing");
	HX_VISIT_MEMBER_NAME(_tab_stacking,"_tab_stacking");
	HX_VISIT_MEMBER_NAME(_tab_offset,"_tab_offset");
	HX_VISIT_MEMBER_NAME(_selected_tab_id,"_selected_tab_id");
	HX_VISIT_MEMBER_NAME(_selected_tab,"_selected_tab");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxUITabMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_back") ) { return ::hx::Val( _back ); }
		if (HX_FIELD_EQ(inName,"_tabs") ) { return ::hx::Val( _tabs ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTab") ) { return ::hx::Val( getTab_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numTabs") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_numTabs() : numTabs ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBack") ) { return ::hx::Val( getBack_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGroup") ) { return ::hx::Val( addGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortTabs") ) { return ::hx::Val( sortTabs_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"stackTabs") ) { return ::hx::Val( stackTabs_dyn() ); }
		if (HX_FIELD_EQ(inName,"showTabId") ) { return ::hx::Val( showTabId_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getRequest") ) { return ::hx::Val( getRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"showTabInt") ) { return ::hx::Val( showTabInt_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_numTabs") ) { return ::hx::Val( get_numTabs_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTabGroup") ) { return ::hx::Val( getTabGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceBack") ) { return ::hx::Val( replaceBack_dyn() ); }
		if (HX_FIELD_EQ(inName,"_onTabEvent") ) { return ::hx::Val( _onTabEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"_tab_groups") ) { return ::hx::Val( _tab_groups ); }
		if (HX_FIELD_EQ(inName,"_tab_offset") ) { return ::hx::Val( _tab_offset ); }
		if (HX_FIELD_EQ(inName,"getFirstTab") ) { return ::hx::Val( getFirstTab_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selected_tab") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selected_tab() ); }
		if (HX_FIELD_EQ(inName,"_tab_spacing") ) { return ::hx::Val( _tab_spacing ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_stretch_tabs") ) { return ::hx::Val( _stretch_tabs ); }
		if (HX_FIELD_EQ(inName,"_tab_stacking") ) { return ::hx::Val( _tab_stacking ); }
		if (HX_FIELD_EQ(inName,"_selected_tab") ) { return ::hx::Val( _selected_tab ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_showOnlyGroup") ) { return ::hx::Val( _showOnlyGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"distributeTabs") ) { return ::hx::Val( distributeTabs_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"selected_tab_id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selected_tab_id() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { return ::hx::Val( skipButtonUpdate ); }
		if (HX_FIELD_EQ(inName,"get_selected_tab") ) { return ::hx::Val( get_selected_tab_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selected_tab") ) { return ::hx::Val( set_selected_tab_dyn() ); }
		if (HX_FIELD_EQ(inName,"_selected_tab_id") ) { return ::hx::Val( _selected_tab_id ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_selected_tab_id") ) { return ::hx::Val( get_selected_tab_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selected_tab_id") ) { return ::hx::Val( set_selected_tab_id_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_skipButtonUpdate") ) { return ::hx::Val( set_skipButtonUpdate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxUITabMenu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_back") ) { _back=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tabs") ) { _tabs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numTabs") ) { numTabs=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_tab_groups") ) { _tab_groups=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tab_offset") ) { _tab_offset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selected_tab") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selected_tab(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"_tab_spacing") ) { _tab_spacing=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_stretch_tabs") ) { _stretch_tabs=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tab_stacking") ) { _tab_stacking=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selected_tab") ) { _selected_tab=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"selected_tab_id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selected_tab_id(inValue.Cast< ::String >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_skipButtonUpdate(inValue.Cast< bool >()) );skipButtonUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selected_tab_id") ) { _selected_tab_id=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUITabMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("numTabs",e4,55,77,a0));
	outFields->push(HX_("skipButtonUpdate",ba,02,f2,13));
	outFields->push(HX_("selected_tab",31,93,e4,e4));
	outFields->push(HX_("selected_tab_id",69,33,a5,8c));
	outFields->push(HX_("_back",06,f6,21,f4));
	outFields->push(HX_("_tabs",5d,cc,07,00));
	outFields->push(HX_("_tab_groups",5d,cd,af,51));
	outFields->push(HX_("_stretch_tabs",17,2f,6b,3f));
	outFields->push(HX_("_tab_spacing",5a,72,e7,32));
	outFields->push(HX_("_tab_stacking",e3,1f,41,ff));
	outFields->push(HX_("_tab_offset",9c,40,c7,95));
	outFields->push(HX_("_selected_tab_id",ea,75,84,77));
	outFields->push(HX_("_selected_tab",10,26,53,c7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxUITabMenu_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FlxUITabMenu_obj,numTabs),HX_("numTabs",e4,55,77,a0)},
	{::hx::fsBool,(int)offsetof(FlxUITabMenu_obj,skipButtonUpdate),HX_("skipButtonUpdate",ba,02,f2,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxUITabMenu_obj,_back),HX_("_back",06,f6,21,f4)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUITabMenu_obj,_tabs),HX_("_tabs",5d,cc,07,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUITabMenu_obj,_tab_groups),HX_("_tab_groups",5d,cd,af,51)},
	{::hx::fsBool,(int)offsetof(FlxUITabMenu_obj,_stretch_tabs),HX_("_stretch_tabs",17,2f,6b,3f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxUITabMenu_obj,_tab_spacing),HX_("_tab_spacing",5a,72,e7,32)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FlxUITabMenu_obj,_tab_stacking),HX_("_tab_stacking",e3,1f,41,ff)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxUITabMenu_obj,_tab_offset),HX_("_tab_offset",9c,40,c7,95)},
	{::hx::fsString,(int)offsetof(FlxUITabMenu_obj,_selected_tab_id),HX_("_selected_tab_id",ea,75,84,77)},
	{::hx::fsInt,(int)offsetof(FlxUITabMenu_obj,_selected_tab),HX_("_selected_tab",10,26,53,c7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxUITabMenu_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &FlxUITabMenu_obj::CLICK_EVENT,HX_("CLICK_EVENT",63,89,c0,0d)},
	{::hx::fsString,(void *) &FlxUITabMenu_obj::STACK_FRONT,HX_("STACK_FRONT",f2,04,39,17)},
	{::hx::fsString,(void *) &FlxUITabMenu_obj::STACK_BACK,HX_("STACK_BACK",de,2d,ef,d2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUITabMenu_obj_sMemberFields[] = {
	HX_("numTabs",e4,55,77,a0),
	HX_("get_numTabs",fb,b5,71,26),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("getRequest",59,65,e6,93),
	HX_("skipButtonUpdate",ba,02,f2,13),
	HX_("set_skipButtonUpdate",37,1f,14,ff),
	HX_("get_width",5d,12,0c,0e),
	HX_("get_height",b0,77,d3,f2),
	HX_("resize",f4,59,7b,08),
	HX_("get_selected_tab",ba,7f,83,e9),
	HX_("set_selected_tab",2e,6d,c5,3f),
	HX_("get_selected_tab_id",80,02,b0,17),
	HX_("set_selected_tab_id",8c,f5,4c,54),
	HX_("destroy",fa,2c,86,24),
	HX_("getTab",5f,93,27,a3),
	HX_("getTabGroup",60,f7,8c,2e),
	HX_("getBack",dd,89,93,13),
	HX_("replaceBack",7b,78,ac,55),
	HX_("addGroup",5e,d9,51,13),
	HX_("_onTabEvent",e3,ea,a9,94),
	HX_("stackTabs",e6,87,f4,d7),
	HX_("showTabId",53,ff,47,39),
	HX_("_back",06,f6,21,f4),
	HX_("_tabs",5d,cc,07,00),
	HX_("_tab_groups",5d,cd,af,51),
	HX_("_stretch_tabs",17,2f,6b,3f),
	HX_("_tab_spacing",5a,72,e7,32),
	HX_("_tab_stacking",e3,1f,41,ff),
	HX_("_tab_offset",9c,40,c7,95),
	HX_("_selected_tab_id",ea,75,84,77),
	HX_("_selected_tab",10,26,53,c7),
	HX_("sortTabs",fc,0a,72,50),
	HX_("showTabInt",77,72,b7,e5),
	HX_("_showOnlyGroup",b7,69,28,52),
	HX_("getFirstTab",bb,9a,0b,17),
	HX_("distributeTabs",3f,9a,e9,62),
	::String(null()) };

static void FlxUITabMenu_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUITabMenu_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_MARK_MEMBER_NAME(FlxUITabMenu_obj::STACK_FRONT,"STACK_FRONT");
	HX_MARK_MEMBER_NAME(FlxUITabMenu_obj::STACK_BACK,"STACK_BACK");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUITabMenu_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUITabMenu_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_VISIT_MEMBER_NAME(FlxUITabMenu_obj::STACK_FRONT,"STACK_FRONT");
	HX_VISIT_MEMBER_NAME(FlxUITabMenu_obj::STACK_BACK,"STACK_BACK");
};

#endif

::hx::Class FlxUITabMenu_obj::__mClass;

static ::String FlxUITabMenu_obj_sStaticFields[] = {
	HX_("CLICK_EVENT",63,89,c0,0d),
	HX_("STACK_FRONT",f2,04,39,17),
	HX_("STACK_BACK",de,2d,ef,d2),
	::String(null())
};

void FlxUITabMenu_obj::__register()
{
	FlxUITabMenu_obj _hx_dummy;
	FlxUITabMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxUITabMenu",bf,1e,80,6a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUITabMenu_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxUITabMenu_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxUITabMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxUITabMenu_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUITabMenu_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUITabMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUITabMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUITabMenu_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_24_boot)
HXDLIN(  24)		CLICK_EVENT = HX_("tab_menu_click",52,a3,80,94);
            	}
{
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_26_boot)
HXDLIN(  26)		STACK_FRONT = HX_("front",a9,18,8e,06);
            	}
{
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_27_boot)
HXDLIN(  27)		STACK_BACK = HX_("back",27,da,10,41);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
