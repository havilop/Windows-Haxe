// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TestDesktop
#include <TestDesktop.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ffd1fb4af69ecc4a_13_new,"TestDesktop","new",0x6919797c,"TestDesktop.new","TestDesktop.hx",13,0x48cb4974)
HX_LOCAL_STACK_FRAME(_hx_pos_ffd1fb4af69ecc4a_66_createFolderSprites,"TestDesktop","createFolderSprites",0xd1998840,"TestDesktop.createFolderSprites","TestDesktop.hx",66,0x48cb4974)

void TestDesktop_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ffd1fb4af69ecc4a_13_new)
HXLINE(  15)		this->folders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  19)		super::__construct(null());
HXLINE(  21)		if (::sys::FileSystem_obj::exists(HX_("assets/Windows/mbr.json",71,7f,52,64))) {
HXLINE(  23)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  25)				::String data = ::sys::io::File_obj::getContent(HX_("assets/Windows/mbr.json",71,7f,52,64));
HXLINE(  26)				 ::Dynamic jsonData =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
HXLINE(  29)				{
HXLINE(  29)					int _g = 0;
HXDLIN(  29)					::Array< ::String > _g1 = ::Reflect_obj::fields(jsonData);
HXDLIN(  29)					while((_g < _g1->length)){
HXLINE(  29)						::String field = _g1->__get(_g);
HXDLIN(  29)						_g = (_g + 1);
HXLINE(  31)						if (::StringTools_obj::startsWith(field,HX_(".exe",24,dd,b4,1e))) {
HXLINE(  33)							::String fieldValue = ( (::String)(::Reflect_obj::field(jsonData,field)) );
HXLINE(  35)							bool _hx_tmp;
HXDLIN(  35)							if (!(::StringTools_obj::endsWith(field,HX_(".x",8a,28,00,00)))) {
HXLINE(  35)								_hx_tmp = ::StringTools_obj::endsWith(field,HX_(".y",8b,28,00,00));
            							}
            							else {
HXLINE(  35)								_hx_tmp = true;
            							}
HXDLIN(  35)							if (_hx_tmp) {
HXLINE(  38)								continue;
            							}
HXLINE(  42)							::String folderName = field.substr(HX_(".exe",24,dd,b4,1e).length,null());
HXLINE(  47)							 ::Dynamic tmp = ::Reflect_obj::field(jsonData,((HX_("",00,00,00,00) + field) + HX_(".x",8a,28,00,00)));
HXDLIN(  47)							int folderData;
HXDLIN(  47)							if (::hx::IsNotNull( tmp )) {
HXLINE(  47)								folderData = ( (int)(tmp) );
            							}
            							else {
HXLINE(  47)								folderData = 0;
            							}
HXLINE(  48)							 ::Dynamic tmp1 = ::Reflect_obj::field(jsonData,((HX_("",00,00,00,00) + field) + HX_(".y",8b,28,00,00)));
HXDLIN(  48)							int folderData1;
HXDLIN(  48)							if (::hx::IsNotNull( tmp1 )) {
HXLINE(  48)								folderData1 = ( (int)(tmp1) );
            							}
            							else {
HXLINE(  48)								folderData1 = 0;
            							}
HXLINE(  45)							 ::Dynamic folderData2 =  ::Dynamic(::hx::Anon_obj::Create(3)
            								->setFixed(0,HX_("x",78,00,00,00),( (Float)(folderData) ))
            								->setFixed(1,HX_("y",79,00,00,00),( (Float)(folderData1) ))
            								->setFixed(2,HX_("path",a5,e5,51,4a),fieldValue));
HXLINE(  50)							this->folders->set(folderName,folderData2);
            						}
            					}
            				}
HXLINE(  55)				this->createFolderSprites();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g2 = _hx_e;
HXLINE(  57)					 ::Dynamic e = _g2;
HXLINE(  59)					{
HXLINE(  59)						 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(  59)						::String _hx_tmp2 = (HX_("Error parsing JSON: ",36,42,5e,36) + ::Std_obj::string(e));
HXDLIN(  59)						_hx_tmp1(_hx_tmp2,::hx::SourceInfo(HX_("source/TestDesktop.hx",68,1b,65,12),59,HX_("TestDesktop",8a,4b,90,bf),HX_("new",60,d0,53,00)));
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}

Dynamic TestDesktop_obj::__CreateEmpty() { return new TestDesktop_obj; }

void *TestDesktop_obj::_hx_vtable = 0;

Dynamic TestDesktop_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TestDesktop_obj > _hx_result = new TestDesktop_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TestDesktop_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x728b90ca) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x728b90ca;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void TestDesktop_obj::createFolderSprites(){
            	HX_GC_STACKFRAME(&_hx_pos_ffd1fb4af69ecc4a_66_createFolderSprites)
HXDLIN(  66)		::Dynamic map = this->folders;
HXDLIN(  66)		::Dynamic _g_map = map;
HXDLIN(  66)		 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  66)		while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN(  66)			::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  66)			 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN(  66)			::String _g_key = key;
HXDLIN(  66)			::String folderName = _g_key;
HXDLIN(  66)			 ::Dynamic data = _g_value;
HXLINE(  67)			{
HXLINE(  68)				 ::flixel::FlxSprite sprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,data->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),data->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),null());
HXLINE(  69)				sprite->loadGraphic(HX_("assets/images/icons/folder.png",e9,c8,20,ba),null(),null(),null(),null(),null());
HXLINE(  70)				this->add(sprite);
HXLINE(  73)				::haxe::Log_obj::trace( ::Dynamic(((((((HX_("Created folder sprite: ",45,4f,cb,e7) + folderName) + HX_(" at (",db,63,48,ad)) + data->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) + HX_(", ",74,26,00,00)) + data->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) + HX_(")",29,00,00,00))),::hx::SourceInfo(HX_("source/TestDesktop.hx",68,1b,65,12),73,HX_("TestDesktop",8a,4b,90,bf),HX_("createFolderSprites",24,e7,86,86)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDesktop_obj,createFolderSprites,(void))


::hx::ObjectPtr< TestDesktop_obj > TestDesktop_obj::__new() {
	::hx::ObjectPtr< TestDesktop_obj > __this = new TestDesktop_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TestDesktop_obj > TestDesktop_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TestDesktop_obj *__this = (TestDesktop_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TestDesktop_obj), true, "TestDesktop"));
	*(void **)__this = TestDesktop_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TestDesktop_obj::TestDesktop_obj()
{
}

void TestDesktop_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestDesktop);
	HX_MARK_MEMBER_NAME(folders,"folders");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TestDesktop_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(folders,"folders");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TestDesktop_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"folders") ) { return ::hx::Val( folders ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createFolderSprites") ) { return ::hx::Val( createFolderSprites_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TestDesktop_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"folders") ) { folders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestDesktop_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("folders",05,62,d7,64));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TestDesktop_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(TestDesktop_obj,folders),HX_("folders",05,62,d7,64)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TestDesktop_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDesktop_obj_sMemberFields[] = {
	HX_("folders",05,62,d7,64),
	HX_("createFolderSprites",24,e7,86,86),
	::String(null()) };

::hx::Class TestDesktop_obj::__mClass;

void TestDesktop_obj::__register()
{
	TestDesktop_obj _hx_dummy;
	TestDesktop_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TestDesktop",8a,4b,90,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TestDesktop_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TestDesktop_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDesktop_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDesktop_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

