// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_MessageBox
#include <MessageBox.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_40851479de562a79_14_new,"MessageBox","new",0x1d329d96,"MessageBox.new","MessageBox.hx",14,0x2603a69a)
HX_LOCAL_STACK_FRAME(_hx_pos_40851479de562a79_79_update,"MessageBox","update",0xed565e93,"MessageBox.update","MessageBox.hx",79,0x2603a69a)

void MessageBox_obj::__construct(::String text, ::Dynamic ok, ::Dynamic can){
            	HX_GC_STACKFRAME(&_hx_pos_40851479de562a79_14_new)
HXLINE(  21)		this->inm = false;
HXLINE(  20)		this->wasOverlapping = false;
HXLINE(  27)		super::__construct(null());
HXLINE(  28)		if (::sys::FileSystem_obj::exists(HX_("assets/Windows/mbr.json",71,7f,52,64))) {
HXLINE(  32)			::String data = ::sys::io::File_obj::getContent(HX_("assets/Windows/mbr.json",71,7f,52,64));
HXLINE(  33)			this->l =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE(  37)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/bg.png",3d,7e,fe,cd));
HXLINE(  38)		this->bg->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE(  39)		this->bg->updateHitbox();
HXLINE(  40)		this->bg->set_color(-16777216);
HXLINE(  41)		this->bg->set_alpha(((Float)0.5));
HXLINE(  42)		this->add(this->bg);
HXLINE(  44)		this->mainMessage =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/bg.png",3d,7e,fe,cd));
HXLINE(  45)		this->mainMessage->setGraphicSize(625,188);
HXLINE(  46)		this->mainMessage->updateHitbox();
HXLINE(  47)		{
HXLINE(  47)			 ::flixel::FlxSprite _this = this->mainMessage;
HXDLIN(  47)			int axes = 17;
HXDLIN(  47)			bool _hx_tmp;
HXDLIN(  47)			if ((axes != 1)) {
HXLINE(  47)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  47)				_hx_tmp = true;
            			}
HXDLIN(  47)			if (_hx_tmp) {
HXLINE(  47)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  47)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  47)			bool _hx_tmp2;
HXDLIN(  47)			if ((axes != 16)) {
HXLINE(  47)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  47)				_hx_tmp2 = true;
            			}
HXDLIN(  47)			if (_hx_tmp2) {
HXLINE(  47)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  47)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  48)		this->mainMessage->set_color(1346025);
HXLINE(  49)		this->add(this->mainMessage);
HXLINE(  51)		this->textMessage =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),26,null());
HXLINE(  52)		this->textMessage->set_text(text);
HXLINE(  53)		::String _hx_tmp4;
HXDLIN(  53)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  53)			_hx_tmp4 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE(  53)			_hx_tmp4 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN(  53)		this->textMessage->set_font(_hx_tmp4);
HXLINE(  54)		{
HXLINE(  54)			 ::flixel::text::FlxText _this1 = this->textMessage;
HXDLIN(  54)			int axes1 = 17;
HXDLIN(  54)			bool _hx_tmp5;
HXDLIN(  54)			if ((axes1 != 1)) {
HXLINE(  54)				_hx_tmp5 = (axes1 == 17);
            			}
            			else {
HXLINE(  54)				_hx_tmp5 = true;
            			}
HXDLIN(  54)			if (_hx_tmp5) {
HXLINE(  54)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN(  54)				_this1->set_x(((( (Float)(_hx_tmp6) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  54)			bool _hx_tmp7;
HXDLIN(  54)			if ((axes1 != 16)) {
HXLINE(  54)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE(  54)				_hx_tmp7 = true;
            			}
HXDLIN(  54)			if (_hx_tmp7) {
HXLINE(  54)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN(  54)				_this1->set_y(((( (Float)(_hx_tmp8) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  55)		this->textMessage->set_x((this->mainMessage->x + 10));
HXLINE(  56)		this->textMessage->set_y(this->mainMessage->y);
HXLINE(  57)		this->add(this->textMessage);
HXLINE(  59)		this->okBUTTON =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),ok);
HXLINE(  60)		::String _hx_tmp9;
HXDLIN(  60)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  60)			_hx_tmp9 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE(  60)			_hx_tmp9 = HX_("assets/fonts/ots/ttf",6e,e6,30,bb);
            		}
HXDLIN(  60)		this->okBUTTON->label->setFormat(_hx_tmp9,16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  61)		this->okBUTTON->makeGraphic(81,25,-16776961,null(),null());
HXLINE(  62)		this->okBUTTON->setGraphicSize(81,25);
HXLINE(  63)		this->okBUTTON->updateHitbox();
HXLINE(  64)		{
HXLINE(  64)			 ::flixel::ui::FlxButton _this2 = this->okBUTTON;
HXDLIN(  64)			::String Text;
HXDLIN(  64)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  64)				Text = HX_("OK",1c,45,00,00);
            			}
            			else {
HXLINE(  64)				Text = HX_("OK",1c,45,00,00);
            			}
HXDLIN(  64)			if (::hx::IsNull( _this2->label )) {
HXLINE(  64)				if (::hx::IsNotNull( Text )) {
HXLINE(  64)					_this2->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this2->x + _this2->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this2->y + _this2->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text,null(),null()));
HXDLIN(  64)					_this2->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN(  64)					_this2->label->set_alpha(_this2->labelAlphas->__get(_this2->status));
HXDLIN(  64)					_this2->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE(  64)				_this2->label->set_text(Text);
            			}
            		}
HXLINE(  65)		 ::flixel::ui::FlxButton _hx_tmp10 = this->okBUTTON;
HXDLIN(  65)		Float _hx_tmp11 = this->mainMessage->x;
HXDLIN(  65)		_hx_tmp10->set_x(((_hx_tmp11 + this->mainMessage->get_width()) - ( (Float)(195) )));
HXLINE(  66)		this->okBUTTON->set_y((this->mainMessage->y + 150));
HXLINE(  67)		this->add(this->okBUTTON);
HXLINE(  69)		this->cancelBUTTON =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),can);
HXLINE(  70)		::String _hx_tmp12;
HXDLIN(  70)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  70)			_hx_tmp12 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE(  70)			_hx_tmp12 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN(  70)		this->cancelBUTTON->label->setFormat(_hx_tmp12,16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  71)		this->cancelBUTTON->makeGraphic(81,25,-16776961,null(),null());
HXLINE(  72)		this->cancelBUTTON->setGraphicSize(81,25);
HXLINE(  73)		this->cancelBUTTON->updateHitbox();
HXLINE(  74)		{
HXLINE(  74)			 ::flixel::ui::FlxButton _this3 = this->cancelBUTTON;
HXDLIN(  74)			::String Text1;
HXDLIN(  74)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  74)				Text1 = HX_("CANCEL",7a,99,b6,6a);
            			}
            			else {
HXLINE(  74)				Text1 = HX_W(u"\u041e\u0422\u041c\u0415\u041d\u0410",e6fe,fd09);
            			}
HXDLIN(  74)			if (::hx::IsNull( _this3->label )) {
HXLINE(  74)				if (::hx::IsNotNull( Text1 )) {
HXLINE(  74)					_this3->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this3->x + _this3->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this3->y + _this3->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text1,null(),null()));
HXDLIN(  74)					_this3->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN(  74)					_this3->label->set_alpha(_this3->labelAlphas->__get(_this3->status));
HXDLIN(  74)					_this3->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE(  74)				_this3->label->set_text(Text1);
            			}
            		}
HXLINE(  75)		 ::flixel::ui::FlxButton _hx_tmp13 = this->cancelBUTTON;
HXDLIN(  75)		Float _hx_tmp14 = this->mainMessage->x;
HXDLIN(  75)		_hx_tmp13->set_x(((_hx_tmp14 + this->mainMessage->get_width()) - ( (Float)(95) )));
HXLINE(  76)		this->cancelBUTTON->set_y((this->mainMessage->y + 150));
HXLINE(  77)		this->add(this->cancelBUTTON);
            	}

Dynamic MessageBox_obj::__CreateEmpty() { return new MessageBox_obj; }

void *MessageBox_obj::_hx_vtable = 0;

Dynamic MessageBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MessageBox_obj > _hx_result = new MessageBox_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MessageBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x203f03c8) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x203f03c8;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void MessageBox_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_40851479de562a79_79_update)
HXLINE(  80)		this->super::update(elapsed);
HXLINE(  82)		 ::flixel::FlxSprite isOverlapping = this->mainMessage;
HXDLIN(  82)		bool isOverlapping1 = isOverlapping->overlapsPoint(::flixel::FlxG_obj::mouse->getWorldPosition(null(),null()),null(),null());
HXLINE(  84)		bool _hx_tmp;
HXDLIN(  84)		if (this->wasOverlapping) {
HXLINE(  84)			_hx_tmp = isOverlapping1;
            		}
            		else {
HXLINE(  84)			_hx_tmp = false;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  86)			this->inm = true;
            		}
HXLINE(  89)		bool _hx_tmp1;
HXDLIN(  89)		if (this->wasOverlapping) {
HXLINE(  89)			_hx_tmp1 = !(isOverlapping1);
            		}
            		else {
HXLINE(  89)			_hx_tmp1 = false;
            		}
HXDLIN(  89)		if (_hx_tmp1) {
HXLINE(  91)			this->inm = false;
            		}
HXLINE(  94)		this->wasOverlapping = isOverlapping1;
HXLINE(  96)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(  98)			if ((this->inm == false)) {
HXLINE( 100)				this->kill();
            			}
            		}
            	}



::hx::ObjectPtr< MessageBox_obj > MessageBox_obj::__new(::String text, ::Dynamic ok, ::Dynamic can) {
	::hx::ObjectPtr< MessageBox_obj > __this = new MessageBox_obj();
	__this->__construct(text,ok,can);
	return __this;
}

::hx::ObjectPtr< MessageBox_obj > MessageBox_obj::__alloc(::hx::Ctx *_hx_ctx,::String text, ::Dynamic ok, ::Dynamic can) {
	MessageBox_obj *__this = (MessageBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MessageBox_obj), true, "MessageBox"));
	*(void **)__this = MessageBox_obj::_hx_vtable;
	__this->__construct(text,ok,can);
	return __this;
}

MessageBox_obj::MessageBox_obj()
{
}

void MessageBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MessageBox);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(mainMessage,"mainMessage");
	HX_MARK_MEMBER_NAME(textMessage,"textMessage");
	HX_MARK_MEMBER_NAME(l,"l");
	HX_MARK_MEMBER_NAME(wasOverlapping,"wasOverlapping");
	HX_MARK_MEMBER_NAME(inm,"inm");
	HX_MARK_MEMBER_NAME(okBUTTON,"okBUTTON");
	HX_MARK_MEMBER_NAME(cancelBUTTON,"cancelBUTTON");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MessageBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(mainMessage,"mainMessage");
	HX_VISIT_MEMBER_NAME(textMessage,"textMessage");
	HX_VISIT_MEMBER_NAME(l,"l");
	HX_VISIT_MEMBER_NAME(wasOverlapping,"wasOverlapping");
	HX_VISIT_MEMBER_NAME(inm,"inm");
	HX_VISIT_MEMBER_NAME(okBUTTON,"okBUTTON");
	HX_VISIT_MEMBER_NAME(cancelBUTTON,"cancelBUTTON");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MessageBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"l") ) { return ::hx::Val( l ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"inm") ) { return ::hx::Val( inm ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"okBUTTON") ) { return ::hx::Val( okBUTTON ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mainMessage") ) { return ::hx::Val( mainMessage ); }
		if (HX_FIELD_EQ(inName,"textMessage") ) { return ::hx::Val( textMessage ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cancelBUTTON") ) { return ::hx::Val( cancelBUTTON ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wasOverlapping") ) { return ::hx::Val( wasOverlapping ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MessageBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"l") ) { l=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"inm") ) { inm=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"okBUTTON") ) { okBUTTON=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mainMessage") ) { mainMessage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textMessage") ) { textMessage=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cancelBUTTON") ) { cancelBUTTON=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wasOverlapping") ) { wasOverlapping=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MessageBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("mainMessage",8e,8e,fe,3a));
	outFields->push(HX_("textMessage",9a,30,91,75));
	outFields->push(HX_("l",6c,00,00,00));
	outFields->push(HX_("wasOverlapping",d0,2a,10,a9));
	outFields->push(HX_("inm",e8,0c,50,00));
	outFields->push(HX_("okBUTTON",0e,2c,bb,ba));
	outFields->push(HX_("cancelBUTTON",ec,52,01,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MessageBox_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MessageBox_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MessageBox_obj,mainMessage),HX_("mainMessage",8e,8e,fe,3a)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MessageBox_obj,textMessage),HX_("textMessage",9a,30,91,75)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(MessageBox_obj,l),HX_("l",6c,00,00,00)},
	{::hx::fsBool,(int)offsetof(MessageBox_obj,wasOverlapping),HX_("wasOverlapping",d0,2a,10,a9)},
	{::hx::fsBool,(int)offsetof(MessageBox_obj,inm),HX_("inm",e8,0c,50,00)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(MessageBox_obj,okBUTTON),HX_("okBUTTON",0e,2c,bb,ba)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(MessageBox_obj,cancelBUTTON),HX_("cancelBUTTON",ec,52,01,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MessageBox_obj_sStaticStorageInfo = 0;
#endif

static ::String MessageBox_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("mainMessage",8e,8e,fe,3a),
	HX_("textMessage",9a,30,91,75),
	HX_("l",6c,00,00,00),
	HX_("wasOverlapping",d0,2a,10,a9),
	HX_("inm",e8,0c,50,00),
	HX_("okBUTTON",0e,2c,bb,ba),
	HX_("cancelBUTTON",ec,52,01,1d),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class MessageBox_obj::__mClass;

void MessageBox_obj::__register()
{
	MessageBox_obj _hx_dummy;
	MessageBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MessageBox",a4,da,4a,c9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MessageBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MessageBox_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MessageBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MessageBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

