// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Logon
#include <Logon.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c6237339799cc946_35_new,"Logon","new",0xfe19ecf5,"Logon.new","Logon.hx",35,0x63dda81b)
HX_DEFINE_STACK_FRAME(_hx_pos_c6237339799cc946_18_new,"Logon","new",0xfe19ecf5,"Logon.new","Logon.hx",18,0x63dda81b)
HX_DEFINE_STACK_FRAME(_hx_pos_c6237339799cc946_99_new,"Logon","new",0xfe19ecf5,"Logon.new","Logon.hx",99,0x63dda81b)
HX_DEFINE_STACK_FRAME(_hx_pos_c6237339799cc946_104_new,"Logon","new",0xfe19ecf5,"Logon.new","Logon.hx",104,0x63dda81b)
HX_LOCAL_STACK_FRAME(_hx_pos_c6237339799cc946_133_update,"Logon","update",0xcd75b494,"Logon.update","Logon.hx",133,0x63dda81b)
HX_LOCAL_STACK_FRAME(_hx_pos_c6237339799cc946_139_updateTime,"Logon","updateTime",0xbb8386c1,"Logon.updateTime","Logon.hx",139,0x63dda81b)

void Logon_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Logon,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_c6237339799cc946_35_new)
HXLINE(  36)			if ((_gthis->is == true)) {
HXLINE(  38)				if (::hx::IsEq( _gthis->o->__Field(HX_("password",1b,23,d0,48),::hx::paccDynamic),_gthis->inputPassword->text )) {
HXLINE(  40)					::Logon_obj::logon = false;
HXLINE(  41)					_gthis->kill();
            				}
            			}
HXLINE(  44)			if ((_gthis->is == false)) {
HXLINE(  46)				::Logon_obj::logon = false;
HXLINE(  47)				_gthis->kill();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c6237339799cc946_18_new)
HXLINE(  28)		this->isVision = true;
HXLINE(  32)		 ::Logon _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  33)		super::__construct(null());
HXLINE(  35)		 ::Dynamic click =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  50)		if (::sys::FileSystem_obj::exists(HX_("assets/Windows/mbr.json",71,7f,52,64))) {
HXLINE(  54)			::String dat = ::sys::io::File_obj::getContent(HX_("assets/Windows/mbr.json",71,7f,52,64));
HXLINE(  55)			this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,dat)->doParse();
            		}
HXLINE(  59)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/wallpaperdark.png",e8,8c,45,44));
HXLINE(  60)		{
HXLINE(  60)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  60)			int axes = 1;
HXDLIN(  60)			bool _hx_tmp;
HXDLIN(  60)			if ((axes != 1)) {
HXLINE(  60)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  60)				_hx_tmp = true;
            			}
HXDLIN(  60)			if (_hx_tmp) {
HXLINE(  60)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  60)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  60)			bool _hx_tmp2;
HXDLIN(  60)			if ((axes != 16)) {
HXLINE(  60)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  60)				_hx_tmp2 = true;
            			}
HXDLIN(  60)			if (_hx_tmp2) {
HXLINE(  60)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  60)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  61)		this->add(this->bg);
HXLINE(  63)		this->user =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/user.png",b1,ab,d4,b4));
HXLINE(  64)		{
HXLINE(  64)			 ::flixel::FlxSprite _this1 = this->user;
HXDLIN(  64)			int axes1 = 17;
HXDLIN(  64)			bool _hx_tmp4;
HXDLIN(  64)			if ((axes1 != 1)) {
HXLINE(  64)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE(  64)				_hx_tmp4 = true;
            			}
HXDLIN(  64)			if (_hx_tmp4) {
HXLINE(  64)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(  64)				_this1->set_x(((( (Float)(_hx_tmp5) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  64)			bool _hx_tmp6;
HXDLIN(  64)			if ((axes1 != 16)) {
HXLINE(  64)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE(  64)				_hx_tmp6 = true;
            			}
HXDLIN(  64)			if (_hx_tmp6) {
HXLINE(  64)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(  64)				_this1->set_y(((( (Float)(_hx_tmp7) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  65)		 ::flixel::FlxSprite fh = this->user;
HXDLIN(  65)		fh->set_y((fh->y - ( (Float)(100) )));
HXLINE(  66)		this->add(this->user);
HXLINE(  68)		this->timeText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("",00,00,00,00),32,null());
HXLINE(  69)		this->timeText->set_font(HX_("assets/fonts/my.ttf",5b,83,ee,55));
HXLINE(  70)		this->timeText->set_color(-1);
HXLINE(  71)		this->timeText->set_alignment(HX_("left",07,08,b0,47));
HXLINE(  72)		this->add(this->timeText);
HXLINE(  74)		this->userNameText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),45,null());
HXLINE(  75)		this->userNameText->set_color(16777215);
HXLINE(  76)		this->userNameText->set_font(HX_("assets/fonts/my.ttf",5b,83,ee,55));
HXLINE(  77)		this->userNameText->set_text(( (::String)(this->o->__Field(HX_("userName",36,b2,c4,0b),::hx::paccDynamic)) ));
HXLINE(  78)		{
HXLINE(  78)			 ::flixel::text::FlxText _this2 = this->userNameText;
HXDLIN(  78)			int axes2 = 17;
HXDLIN(  78)			bool _hx_tmp8;
HXDLIN(  78)			if ((axes2 != 1)) {
HXLINE(  78)				_hx_tmp8 = (axes2 == 17);
            			}
            			else {
HXLINE(  78)				_hx_tmp8 = true;
            			}
HXDLIN(  78)			if (_hx_tmp8) {
HXLINE(  78)				int _hx_tmp9 = ::flixel::FlxG_obj::width;
HXDLIN(  78)				_this2->set_x(((( (Float)(_hx_tmp9) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  78)			bool _hx_tmp10;
HXDLIN(  78)			if ((axes2 != 16)) {
HXLINE(  78)				_hx_tmp10 = (axes2 == 17);
            			}
            			else {
HXLINE(  78)				_hx_tmp10 = true;
            			}
HXDLIN(  78)			if (_hx_tmp10) {
HXLINE(  78)				int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN(  78)				_this2->set_y(((( (Float)(_hx_tmp11) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  79)		 ::flixel::text::FlxText fh1 = this->userNameText;
HXDLIN(  79)		fh1->set_y((fh1->y + 50));
HXLINE(  80)		this->add(this->userNameText);
HXLINE(  82)		this->Next =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("Next",13,b1,db,33),click);
HXLINE(  83)		::String _hx_tmp12;
HXDLIN(  83)		if (::hx::IsEq( this->o->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  83)			_hx_tmp12 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE(  83)			_hx_tmp12 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN(  83)		this->Next->label->setFormat(_hx_tmp12,22,0,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  84)		this->Next->makeGraphic(100,28,-1,null(),null());
HXLINE(  85)		this->Next->updateHitbox();
HXLINE(  86)		this->Next->set_visible(true);
HXLINE(  87)		{
HXLINE(  87)			 ::flixel::ui::FlxButton _this3 = this->Next;
HXDLIN(  87)			::String Text;
HXDLIN(  87)			if (::hx::IsEq( this->o->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  87)				Text = HX_("Next",13,b1,db,33);
            			}
            			else {
HXLINE(  87)				Text = HX_W(u"\u0414\u0430\u043b\u0435\u0435",6e19,a000);
            			}
HXDLIN(  87)			if (::hx::IsNull( _this3->label )) {
HXLINE(  87)				if (::hx::IsNotNull( Text )) {
HXLINE(  87)					_this3->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this3->x + _this3->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this3->y + _this3->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text,null(),null()));
HXDLIN(  87)					_this3->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN(  87)					_this3->label->set_alpha(_this3->labelAlphas->__get(_this3->status));
HXDLIN(  87)					_this3->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE(  87)				_this3->label->set_text(Text);
            			}
            		}
HXLINE(  88)		this->add(this->Next);
HXLINE(  90)		if (::hx::IsNotEq( this->o->__Field(HX_("password",1b,23,d0,48),::hx::paccDynamic),HX_("",00,00,00,00) )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::Logon,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_c6237339799cc946_99_new)
HXLINE( 100)				if ((_gthis->isVision == true)) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Logon,_gthis) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_c6237339799cc946_104_new)
HXLINE( 104)						_gthis->isVision = false;
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 101)					_gthis->inputPassword->set_passwordMode(false);
HXLINE( 102)					_gthis->visionButton->loadGraphic(HX_("assets/images/visionOn.png",0d,0c,b7,64),null(),null(),null(),null(),null());
HXLINE( 103)					 ::Dynamic name =  ::Dynamic(new _hx_Closure_1(_gthis));
HXDLIN( 103)					::haxe::Timer_obj::delay(name,100);
            				}
HXLINE( 108)				if ((_gthis->isVision == false)) {
HXLINE( 109)					_gthis->inputPassword->set_passwordMode(true);
HXLINE( 110)					_gthis->visionButton->loadGraphic(HX_("assets/images/visionOff.png",97,8e,6a,9b),null(),null(),null(),null(),null());
HXLINE( 111)					_gthis->isVision = true;
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  91)			this->inputPassword =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,100,50,200,HX_("",00,00,00,00),16,null(),null(),null());
HXLINE(  92)			this->inputPassword->set_font(HX_("assets/fonts/my.ttf",5b,83,ee,55));
HXLINE(  93)			this->inputPassword->set_visible(true);
HXLINE(  94)			this->inputPassword->set_passwordMode(true);
HXLINE(  95)			{
HXLINE(  95)				 ::flixel::addons::ui::FlxUIInputText _this4 = this->inputPassword;
HXDLIN(  95)				int axes3 = 17;
HXDLIN(  95)				bool _hx_tmp13;
HXDLIN(  95)				if ((axes3 != 1)) {
HXLINE(  95)					_hx_tmp13 = (axes3 == 17);
            				}
            				else {
HXLINE(  95)					_hx_tmp13 = true;
            				}
HXDLIN(  95)				if (_hx_tmp13) {
HXLINE(  95)					int _hx_tmp14 = ::flixel::FlxG_obj::width;
HXDLIN(  95)					_this4->set_x(((( (Float)(_hx_tmp14) ) - _this4->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  95)				bool _hx_tmp15;
HXDLIN(  95)				if ((axes3 != 16)) {
HXLINE(  95)					_hx_tmp15 = (axes3 == 17);
            				}
            				else {
HXLINE(  95)					_hx_tmp15 = true;
            				}
HXDLIN(  95)				if (_hx_tmp15) {
HXLINE(  95)					int _hx_tmp16 = ::flixel::FlxG_obj::height;
HXDLIN(  95)					_this4->set_y(((( (Float)(_hx_tmp16) ) - _this4->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(  96)			 ::flixel::addons::ui::FlxUIInputText fh2 = this->inputPassword;
HXDLIN(  96)			fh2->set_y((fh2->y + 100));
HXLINE(  97)			this->add(this->inputPassword);
HXLINE(  99)			 ::Dynamic name =  ::Dynamic(new _hx_Closure_2(_gthis));
HXDLIN(  99)			this->visionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name);
HXLINE( 114)			this->visionButton->loadGraphic(HX_("assets/images/visionOff.png",97,8e,6a,9b),null(),null(),null(),null(),null());
HXLINE( 115)			this->visionButton->updateHitbox();
HXLINE( 116)			{
HXLINE( 116)				 ::flixel::ui::FlxButton _this5 = this->visionButton;
HXDLIN( 116)				int axes4 = 17;
HXDLIN( 116)				bool _hx_tmp17;
HXDLIN( 116)				if ((axes4 != 1)) {
HXLINE( 116)					_hx_tmp17 = (axes4 == 17);
            				}
            				else {
HXLINE( 116)					_hx_tmp17 = true;
            				}
HXDLIN( 116)				if (_hx_tmp17) {
HXLINE( 116)					int _hx_tmp18 = ::flixel::FlxG_obj::width;
HXDLIN( 116)					_this5->set_x(((( (Float)(_hx_tmp18) ) - _this5->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 116)				bool _hx_tmp19;
HXDLIN( 116)				if ((axes4 != 16)) {
HXLINE( 116)					_hx_tmp19 = (axes4 == 17);
            				}
            				else {
HXLINE( 116)					_hx_tmp19 = true;
            				}
HXDLIN( 116)				if (_hx_tmp19) {
HXLINE( 116)					int _hx_tmp20 = ::flixel::FlxG_obj::height;
HXDLIN( 116)					_this5->set_y(((( (Float)(_hx_tmp20) ) - _this5->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 117)			this->visionButton->set_y(this->inputPassword->y);
HXLINE( 118)			 ::flixel::ui::FlxButton fh3 = this->visionButton;
HXDLIN( 118)			fh3->set_x((fh3->x + 135));
HXLINE( 119)			this->add(this->visionButton);
HXLINE( 121)			{
HXLINE( 121)				 ::flixel::ui::FlxButton _this6 = this->Next;
HXDLIN( 121)				int axes5 = 17;
HXDLIN( 121)				bool _hx_tmp21;
HXDLIN( 121)				if ((axes5 != 1)) {
HXLINE( 121)					_hx_tmp21 = (axes5 == 17);
            				}
            				else {
HXLINE( 121)					_hx_tmp21 = true;
            				}
HXDLIN( 121)				if (_hx_tmp21) {
HXLINE( 121)					int _hx_tmp22 = ::flixel::FlxG_obj::width;
HXDLIN( 121)					_this6->set_x(((( (Float)(_hx_tmp22) ) - _this6->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 121)				bool _hx_tmp23;
HXDLIN( 121)				if ((axes5 != 16)) {
HXLINE( 121)					_hx_tmp23 = (axes5 == 17);
            				}
            				else {
HXLINE( 121)					_hx_tmp23 = true;
            				}
HXDLIN( 121)				if (_hx_tmp23) {
HXLINE( 121)					int _hx_tmp24 = ::flixel::FlxG_obj::height;
HXDLIN( 121)					_this6->set_y(((( (Float)(_hx_tmp24) ) - _this6->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 122)			 ::flixel::ui::FlxButton fh4 = this->Next;
HXDLIN( 122)			fh4->set_y((fh4->y + 150));
HXLINE( 123)			this->is = true;
            		}
HXLINE( 125)		if (::hx::IsEq( this->o->__Field(HX_("password",1b,23,d0,48),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE( 126)			{
HXLINE( 126)				 ::flixel::ui::FlxButton _this7 = this->Next;
HXDLIN( 126)				int axes6 = 17;
HXDLIN( 126)				bool _hx_tmp25;
HXDLIN( 126)				if ((axes6 != 1)) {
HXLINE( 126)					_hx_tmp25 = (axes6 == 17);
            				}
            				else {
HXLINE( 126)					_hx_tmp25 = true;
            				}
HXDLIN( 126)				if (_hx_tmp25) {
HXLINE( 126)					int _hx_tmp26 = ::flixel::FlxG_obj::width;
HXDLIN( 126)					_this7->set_x(((( (Float)(_hx_tmp26) ) - _this7->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 126)				bool _hx_tmp27;
HXDLIN( 126)				if ((axes6 != 16)) {
HXLINE( 126)					_hx_tmp27 = (axes6 == 17);
            				}
            				else {
HXLINE( 126)					_hx_tmp27 = true;
            				}
HXDLIN( 126)				if (_hx_tmp27) {
HXLINE( 126)					int _hx_tmp28 = ::flixel::FlxG_obj::height;
HXDLIN( 126)					_this7->set_y(((( (Float)(_hx_tmp28) ) - _this7->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 127)			 ::flixel::ui::FlxButton fh5 = this->Next;
HXDLIN( 127)			fh5->set_y((fh5->y + 100));
HXLINE( 128)			this->is = false;
            		}
HXLINE( 131)		this->updateTime();
            	}

Dynamic Logon_obj::__CreateEmpty() { return new Logon_obj; }

void *Logon_obj::_hx_vtable = 0;

Dynamic Logon_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Logon_obj > _hx_result = new Logon_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Logon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0065b7df) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0065b7df;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void Logon_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c6237339799cc946_133_update)
HXLINE( 134)		this->super::update(elapsed);
HXLINE( 135)		this->updateTime();
            	}


void Logon_obj::updateTime(){
            	HX_STACKFRAME(&_hx_pos_c6237339799cc946_139_updateTime)
HXLINE( 140)		 ::Date now = ::Date_obj::now();
HXLINE( 141)		int hours = now->getHours();
HXLINE( 142)		int minutes = now->getMinutes();
HXLINE( 143)		int day = now->getDate();
HXLINE( 144)		int month = (now->getMonth() + 1);
HXLINE( 145)		int year = now->getFullYear();
HXLINE( 148)		::String timeStr = (::StringTools_obj::lpad(::Std_obj::string(hours),HX_("0",30,00,00,00),2) + HX_(":",3a,00,00,00));
HXDLIN( 148)		::String timeStr1 = (timeStr + ::StringTools_obj::lpad(::Std_obj::string(minutes),HX_("0",30,00,00,00),2));
HXLINE( 152)		::String dateStr = (::StringTools_obj::lpad(::Std_obj::string(day),HX_("0",30,00,00,00),2) + HX_(".",2e,00,00,00));
HXDLIN( 152)		::String dateStr1 = ((dateStr + ::StringTools_obj::lpad(::Std_obj::string(month),HX_("0",30,00,00,00),2)) + HX_(".",2e,00,00,00));
HXDLIN( 152)		::String dateStr2 = (dateStr1 + ::Std_obj::string(year));
HXLINE( 157)		this->timeText->set_text(((timeStr1 + HX_("\n",0a,00,00,00)) + dateStr2));
HXLINE( 160)		 ::flixel::text::FlxText _hx_tmp = this->timeText;
HXDLIN( 160)		_hx_tmp->set_width((this->timeText->textField->get_textWidth() + 10));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Logon_obj,updateTime,(void))

bool Logon_obj::logon;


::hx::ObjectPtr< Logon_obj > Logon_obj::__new() {
	::hx::ObjectPtr< Logon_obj > __this = new Logon_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Logon_obj > Logon_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Logon_obj *__this = (Logon_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Logon_obj), true, "Logon"));
	*(void **)__this = Logon_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Logon_obj::Logon_obj()
{
}

void Logon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Logon);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(user,"user");
	HX_MARK_MEMBER_NAME(visionButton,"visionButton");
	HX_MARK_MEMBER_NAME(inputPassword,"inputPassword");
	HX_MARK_MEMBER_NAME(userNameText,"userNameText");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(is,"is");
	HX_MARK_MEMBER_NAME(isVision,"isVision");
	HX_MARK_MEMBER_NAME(Next,"Next");
	HX_MARK_MEMBER_NAME(timeText,"timeText");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Logon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(user,"user");
	HX_VISIT_MEMBER_NAME(visionButton,"visionButton");
	HX_VISIT_MEMBER_NAME(inputPassword,"inputPassword");
	HX_VISIT_MEMBER_NAME(userNameText,"userNameText");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(is,"is");
	HX_VISIT_MEMBER_NAME(isVision,"isVision");
	HX_VISIT_MEMBER_NAME(Next,"Next");
	HX_VISIT_MEMBER_NAME(timeText,"timeText");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Logon_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		if (HX_FIELD_EQ(inName,"is") ) { return ::hx::Val( is ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { return ::hx::Val( user ); }
		if (HX_FIELD_EQ(inName,"Next") ) { return ::hx::Val( Next ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isVision") ) { return ::hx::Val( isVision ); }
		if (HX_FIELD_EQ(inName,"timeText") ) { return ::hx::Val( timeText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateTime") ) { return ::hx::Val( updateTime_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visionButton") ) { return ::hx::Val( visionButton ); }
		if (HX_FIELD_EQ(inName,"userNameText") ) { return ::hx::Val( userNameText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputPassword") ) { return ::hx::Val( inputPassword ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Logon_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"logon") ) { outValue = ( logon ); return true; }
	}
	return false;
}

::hx::Val Logon_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"is") ) { is=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { user=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Next") ) { Next=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isVision") ) { isVision=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeText") ) { timeText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visionButton") ) { visionButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"userNameText") ) { userNameText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputPassword") ) { inputPassword=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Logon_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"logon") ) { logon=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Logon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("user",4b,92,ad,4d));
	outFields->push(HX_("visionButton",fa,c7,7b,c9));
	outFields->push(HX_("inputPassword",45,bd,71,d7));
	outFields->push(HX_("userNameText",03,fe,7b,e0));
	outFields->push(HX_("o",6f,00,00,00));
	outFields->push(HX_("is",ea,5b,00,00));
	outFields->push(HX_("isVision",72,af,ec,47));
	outFields->push(HX_("Next",13,b1,db,33));
	outFields->push(HX_("timeText",5a,4f,5b,ed));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Logon_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Logon_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Logon_obj,user),HX_("user",4b,92,ad,4d)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(Logon_obj,visionButton),HX_("visionButton",fa,c7,7b,c9)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(Logon_obj,inputPassword),HX_("inputPassword",45,bd,71,d7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Logon_obj,userNameText),HX_("userNameText",03,fe,7b,e0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Logon_obj,o),HX_("o",6f,00,00,00)},
	{::hx::fsBool,(int)offsetof(Logon_obj,is),HX_("is",ea,5b,00,00)},
	{::hx::fsBool,(int)offsetof(Logon_obj,isVision),HX_("isVision",72,af,ec,47)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(Logon_obj,Next),HX_("Next",13,b1,db,33)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Logon_obj,timeText),HX_("timeText",5a,4f,5b,ed)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Logon_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Logon_obj::logon,HX_("logon",a3,de,f3,78)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Logon_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("user",4b,92,ad,4d),
	HX_("visionButton",fa,c7,7b,c9),
	HX_("inputPassword",45,bd,71,d7),
	HX_("userNameText",03,fe,7b,e0),
	HX_("o",6f,00,00,00),
	HX_("is",ea,5b,00,00),
	HX_("isVision",72,af,ec,47),
	HX_("Next",13,b1,db,33),
	HX_("timeText",5a,4f,5b,ed),
	HX_("update",09,86,05,87),
	HX_("updateTime",b6,b6,b1,05),
	::String(null()) };

static void Logon_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Logon_obj::logon,"logon");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Logon_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Logon_obj::logon,"logon");
};

#endif

::hx::Class Logon_obj::__mClass;

static ::String Logon_obj_sStaticFields[] = {
	HX_("logon",a3,de,f3,78),
	::String(null())
};

void Logon_obj::__register()
{
	Logon_obj _hx_dummy;
	Logon_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Logon",83,4e,21,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Logon_obj::__GetStatic;
	__mClass->mSetStaticField = &Logon_obj::__SetStatic;
	__mClass->mMarkFunc = Logon_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Logon_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Logon_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Logon_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Logon_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Logon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Logon_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

