// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Console
#include <Console.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_BIOState
#include <states/BIOState.h>
#endif
#ifndef INCLUDED_states_LoadState
#include <states/LoadState.h>
#endif
#ifndef INCLUDED_states_MBRstate
#include <states/MBRstate.h>
#endif
#ifndef INCLUDED_states_SetupState
#include <states/SetupState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9b0ca03e92855c49_24_new,"Console","new",0xec721ba9,"Console.new","Console.hx",24,0xdfc4cbe7)
static const ::String _hx_array_data_e6271337_1[] = {
	HX_("/fixmbr",37,2a,8f,2f),HX_("/help",70,76,e0,54),HX_("/exit",cd,3a,f3,52),HX_("/clear",fe,66,21,13),HX_("/loadmbr",c8,c0,38,89),HX_("/autoconsole",f9,87,8d,43),HX_("/install windows",2f,97,08,74),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9b0ca03e92855c49_34_create,"Console","create",0x39f28f53,"Console.create","Console.hx",34,0xdfc4cbe7)
HX_LOCAL_STACK_FRAME(_hx_pos_9b0ca03e92855c49_64_onConsoleCommandEntered,"Console","onConsoleCommandEntered",0xcfcfc14d,"Console.onConsoleCommandEntered","Console.hx",64,0xdfc4cbe7)
HX_LOCAL_STACK_FRAME(_hx_pos_9b0ca03e92855c49_81_onConsoleCommandEntered,"Console","onConsoleCommandEntered",0xcfcfc14d,"Console.onConsoleCommandEntered","Console.hx",81,0xdfc4cbe7)
HX_LOCAL_STACK_FRAME(_hx_pos_9b0ca03e92855c49_97_onConsoleCommandEntered,"Console","onConsoleCommandEntered",0xcfcfc14d,"Console.onConsoleCommandEntered","Console.hx",97,0xdfc4cbe7)
HX_LOCAL_STACK_FRAME(_hx_pos_9b0ca03e92855c49_83_onConsoleCommandEntered,"Console","onConsoleCommandEntered",0xcfcfc14d,"Console.onConsoleCommandEntered","Console.hx",83,0xdfc4cbe7)
HX_LOCAL_STACK_FRAME(_hx_pos_9b0ca03e92855c49_110_logToConsole,"Console","logToConsole",0x2be2818f,"Console.logToConsole","Console.hx",110,0xdfc4cbe7)
HX_LOCAL_STACK_FRAME(_hx_pos_9b0ca03e92855c49_117_update,"Console","update",0x44e8ae60,"Console.update","Console.hx",117,0xdfc4cbe7)

void Console_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9b0ca03e92855c49_24_new)
HXLINE(  31)		this->cmd = null();
HXLINE(  30)		this->isAutoConsole = false;
HXLINE(  28)		this->listCommand = ::Array_obj< ::String >::fromData( _hx_array_data_e6271337_1,7);
HXLINE(  24)		super::__construct();
            	}

Dynamic Console_obj::__CreateEmpty() { return new Console_obj; }

void *Console_obj::_hx_vtable = 0;

Dynamic Console_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Console_obj > _hx_result = new Console_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Console_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x1aa204e7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1aa204e7;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void Console_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_9b0ca03e92855c49_34_create)
HXLINE(  35)		this->super::create();
HXLINE(  36)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  38)		this->consoleOutput =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,20,(::flixel::FlxG_obj::width - 40),HX_("",00,00,00,00),12,null());
HXLINE(  39)		this->consoleOutput->set_color(-1);
HXLINE(  40)		{
HXLINE(  40)			 ::flixel::math::FlxBasePoint this1 = this->consoleOutput->scrollFactor;
HXDLIN(  40)			this1->set_x(( (Float)(0) ));
HXDLIN(  40)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  41)		this->add(this->consoleOutput);
HXLINE(  44)		this->consoleInput =  ::flixel::addons::ui::FlxInputText_obj::__alloc( HX_CTX ,20,(::flixel::FlxG_obj::height - 40),(::flixel::FlxG_obj::width - 40),HX_("",00,00,00,00),12,-1,-8355712,null());
HXLINE(  45)		this->consoleInput->callback = this->onConsoleCommandEntered_dyn();
HXLINE(  46)		{
HXLINE(  46)			 ::flixel::math::FlxBasePoint this2 = this->consoleInput->scrollFactor;
HXDLIN(  46)			this2->set_x(( (Float)(0) ));
HXDLIN(  46)			this2->set_y(( (Float)(0) ));
            		}
HXLINE(  47)		this->add(this->consoleInput);
HXLINE(  50)		this->consoleInput->set_hasFocus(false);
HXLINE(  51)		this->consoleInput->set_hasFocus(true);
HXLINE(  53)		this->logToConsole(HX_("Type /help to list commands",9b,ab,ba,b9));
HXLINE(  54)		if (::sys::FileSystem_obj::exists(HX_("assets/data/settings.json",fa,e4,b3,61))) {
HXLINE(  56)			::String data = ::sys::io::File_obj::getContent(HX_("assets/data/settings.json",fa,e4,b3,61));
HXLINE(  57)			this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
            	}


void Console_obj::onConsoleCommandEntered(::String text,::String action){
            	HX_STACKFRAME(&_hx_pos_9b0ca03e92855c49_64_onConsoleCommandEntered)
HXDLIN(  64)		if ((action == HX_("enter",18,6d,86,70))) {
HXLINE(  66)			::String _hx_switch_0 = text;
            			if (  (_hx_switch_0==HX_("/autoconsole",f9,87,8d,43)) ){
HXLINE(  85)				this->logToConsole(HX_("Please, write variable autoconsole false or true\nExample: /autoconsole true",7e,fd,69,20));
HXDLIN(  85)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("/autoconsole false",3c,0a,08,f6)) ){
HXLINE(  87)				this->o->__SetField(HX_("console",57,eb,d5,18),false,::hx::paccDynamic);
HXLINE(  88)				 ::Dynamic replacer = null();
HXDLIN(  88)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(this->o,replacer,HX_("",00,00,00,00)));
HXLINE(  89)				this->logToConsole(HX_("Succes!",51,4d,9f,85));
HXLINE(  86)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("/autoconsole true",d5,28,bc,33)) ){
HXLINE(  91)				this->o->__SetField(HX_("console",57,eb,d5,18),true,::hx::paccDynamic);
HXLINE(  92)				 ::Dynamic replacer1 = null();
HXDLIN(  92)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(this->o,replacer1,HX_("",00,00,00,00)));
HXLINE(  93)				this->logToConsole(HX_("Succes!",51,4d,9f,85));
HXLINE(  90)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("/clear",fe,66,21,13)) ){
HXLINE(  73)				this->consoleOutput->set_text(HX_("",00,00,00,00));
HXLINE(  74)				this->logToConsole(HX_("Type /help to list commands",9b,ab,ba,b9));
HXLINE(  72)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("/exit",cd,3a,f3,52)) ){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				 ::states::BIOState _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_9b0ca03e92855c49_81_onConsoleCommandEntered)
HXLINE(  81)					return  ::states::BIOState_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE(  81)				::states::LoadState_obj::setLoadingScreen(2000,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0())));
HXDLIN(  81)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("/fixmbr",37,2a,8f,2f)) ){
HXLINE(  69)				this->logToConsole(HX_("Mbr Was Fixed",7a,b0,0f,fc));
HXLINE(  70)				this->o->__SetField(HX_("isWindowsInstalled",41,af,3b,c7),true,::hx::paccDynamic);
HXLINE(  71)				 ::Dynamic replacer2 = null();
HXDLIN(  71)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(this->o,replacer2,HX_("",00,00,00,00)));
HXLINE(  68)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("/help",70,76,e0,54)) ){
HXLINE(  76)				int _g = 0;
HXDLIN(  76)				::Array< ::String > _g1 = this->listCommand;
HXDLIN(  76)				while((_g < _g1->length)){
HXLINE(  76)					::String cmd = _g1->__get(_g);
HXDLIN(  76)					_g = (_g + 1);
HXLINE(  78)					this->logToConsole(cmd);
            				}
HXLINE(  76)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("/install windows",2f,97,08,74)) ){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            				 ::states::SetupState _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_9b0ca03e92855c49_97_onConsoleCommandEntered)
HXLINE(  97)					return  ::states::SetupState_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE(  95)				this->o->__SetField(HX_("isWindowsInstalled",41,af,3b,c7),false,::hx::paccDynamic);
HXLINE(  96)				 ::Dynamic replacer3 = null();
HXDLIN(  96)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(this->o,replacer3,HX_("",00,00,00,00)));
HXLINE(  97)				::states::LoadState_obj::setLoadingScreen(1000,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_1())));
HXLINE(  94)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("/loadmbr",c8,c0,38,89)) ){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            				 ::states::MBRstate _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_9b0ca03e92855c49_83_onConsoleCommandEntered)
HXLINE(  83)					return  ::states::MBRstate_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE(  83)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_2()));
HXDLIN(  83)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  83)				bool _hx_tmp;
HXDLIN(  83)				if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  83)					_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            				}
            				else {
HXLINE(  83)					_hx_tmp = true;
            				}
HXDLIN(  83)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_9b0ca03e92855c49_83_onConsoleCommandEntered)
HXLINE(  83)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  83)							::flixel::FlxG_obj::game->_nextState = nextState;
            						}
            						else {
HXLINE(  83)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  83)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_3(nextState,stateOnCall)));
            				}
HXDLIN(  83)				goto _hx_goto_3;
            			}
            			/* default */{
HXLINE(  99)				this->logToConsole((HX_("Error invalid command ",36,c6,2e,92) + text));
            			}
            			_hx_goto_3:;
HXLINE( 103)			this->consoleInput->set_text(HX_("",00,00,00,00));
HXLINE( 104)			this->consoleInput->set_hasFocus(false);
HXLINE( 105)			this->consoleInput->set_hasFocus(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Console_obj,onConsoleCommandEntered,(void))

void Console_obj::logToConsole(::String message){
            	HX_STACKFRAME(&_hx_pos_9b0ca03e92855c49_110_logToConsole)
HXLINE( 111)		 ::flixel::text::FlxText fh = this->consoleOutput;
HXDLIN( 111)		fh->set_text((fh->text + ((HX_("> ",22,36,00,00) + message) + HX_("\n",0a,00,00,00))));
HXLINE( 112)		this->consoleInput->set_hasFocus(false);
HXLINE( 113)		this->consoleInput->set_hasFocus(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Console_obj,logToConsole,(void))

void Console_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9b0ca03e92855c49_117_update)
HXLINE( 118)		this->super::update(elapsed);
HXLINE( 122)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 122)		if (_this->keyManager->checkStatusUnsafe(192,_this->status)) {
HXLINE( 124)			this->consoleInput->set_visible(!(this->consoleInput->visible));
HXLINE( 125)			this->consoleInput->set_hasFocus(this->consoleInput->visible);
            		}
            	}



::hx::ObjectPtr< Console_obj > Console_obj::__new() {
	::hx::ObjectPtr< Console_obj > __this = new Console_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Console_obj > Console_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Console_obj *__this = (Console_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Console_obj), true, "Console"));
	*(void **)__this = Console_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Console_obj::Console_obj()
{
}

void Console_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Console);
	HX_MARK_MEMBER_NAME(consoleInput,"consoleInput");
	HX_MARK_MEMBER_NAME(consoleOutput,"consoleOutput");
	HX_MARK_MEMBER_NAME(listCommand,"listCommand");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(isAutoConsole,"isAutoConsole");
	HX_MARK_MEMBER_NAME(cmd,"cmd");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Console_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(consoleInput,"consoleInput");
	HX_VISIT_MEMBER_NAME(consoleOutput,"consoleOutput");
	HX_VISIT_MEMBER_NAME(listCommand,"listCommand");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(isAutoConsole,"isAutoConsole");
	HX_VISIT_MEMBER_NAME(cmd,"cmd");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Console_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cmd") ) { return ::hx::Val( cmd ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"listCommand") ) { return ::hx::Val( listCommand ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"consoleInput") ) { return ::hx::Val( consoleInput ); }
		if (HX_FIELD_EQ(inName,"logToConsole") ) { return ::hx::Val( logToConsole_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"consoleOutput") ) { return ::hx::Val( consoleOutput ); }
		if (HX_FIELD_EQ(inName,"isAutoConsole") ) { return ::hx::Val( isAutoConsole ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"onConsoleCommandEntered") ) { return ::hx::Val( onConsoleCommandEntered_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Console_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cmd") ) { cmd=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"listCommand") ) { listCommand=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"consoleInput") ) { consoleInput=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"consoleOutput") ) { consoleOutput=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isAutoConsole") ) { isAutoConsole=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Console_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("consoleInput",33,cd,2d,bb));
	outFields->push(HX_("consoleOutput",b8,09,79,7d));
	outFields->push(HX_("listCommand",8d,e4,6c,38));
	outFields->push(HX_("o",6f,00,00,00));
	outFields->push(HX_("isAutoConsole",de,df,dd,07));
	outFields->push(HX_("cmd",7a,7e,4b,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Console_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(Console_obj,consoleInput),HX_("consoleInput",33,cd,2d,bb)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Console_obj,consoleOutput),HX_("consoleOutput",b8,09,79,7d)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Console_obj,listCommand),HX_("listCommand",8d,e4,6c,38)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Console_obj,o),HX_("o",6f,00,00,00)},
	{::hx::fsBool,(int)offsetof(Console_obj,isAutoConsole),HX_("isAutoConsole",de,df,dd,07)},
	{::hx::fsString,(int)offsetof(Console_obj,cmd),HX_("cmd",7a,7e,4b,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Console_obj_sStaticStorageInfo = 0;
#endif

static ::String Console_obj_sMemberFields[] = {
	HX_("consoleInput",33,cd,2d,bb),
	HX_("consoleOutput",b8,09,79,7d),
	HX_("listCommand",8d,e4,6c,38),
	HX_("o",6f,00,00,00),
	HX_("isAutoConsole",de,df,dd,07),
	HX_("cmd",7a,7e,4b,00),
	HX_("create",fc,66,0f,7c),
	HX_("onConsoleCommandEntered",84,bb,c9,7f),
	HX_("logToConsole",f8,fd,65,e5),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Console_obj::__mClass;

void Console_obj::__register()
{
	Console_obj _hx_dummy;
	Console_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Console",37,13,27,e6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Console_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Console_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Console_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Console_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

