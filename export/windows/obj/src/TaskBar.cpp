// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_CommandFunction
#include <CommandFunction.h>
#endif
#ifndef INCLUDED_CustomWindow
#include <CustomWindow.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TaskBar
#include <TaskBar.h>
#endif
#ifndef INCLUDED_applications_SettingsApplication
#include <applications/SettingsApplication.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_states_BIOState
#include <states/BIOState.h>
#endif
#ifndef INCLUDED_states_LoadState
#include <states/LoadState.h>
#endif
#ifndef INCLUDED_states_WindowsState
#include <states/WindowsState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_69_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",69,0xa1f3b010)
HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_76_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",76,0xa1f3b010)
HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_88_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",88,0xa1f3b010)
HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_101_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",101,0xa1f3b010)
HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_115_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",115,0xa1f3b010)
HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_95_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",95,0xa1f3b010)
HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_127_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",127,0xa1f3b010)
HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_161_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",161,0xa1f3b010)
HX_DEFINE_STACK_FRAME(_hx_pos_62c2ef01b2c78538_29_new,"TaskBar","new",0x134adb60,"TaskBar.new","TaskBar.hx",29,0xa1f3b010)
HX_LOCAL_STACK_FRAME(_hx_pos_62c2ef01b2c78538_55_updateTaskBarMembers,"TaskBar","updateTaskBarMembers",0xe0510bd4,"TaskBar.updateTaskBarMembers","TaskBar.hx",55,0xa1f3b010)
HX_LOCAL_STACK_FRAME(_hx_pos_62c2ef01b2c78538_188_update,"TaskBar","update",0xadc75b09,"TaskBar.update","TaskBar.hx",188,0xa1f3b010)
HX_LOCAL_STACK_FRAME(_hx_pos_62c2ef01b2c78538_248_updateTime,"TaskBar","updateTime",0x7a820bb6,"TaskBar.updateTime","TaskBar.hx",248,0xa1f3b010)

void TaskBar_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::TaskBar,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_69_new)
HXLINE(  70)			if ((_gthis->swithcFirstTimed == false)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::TaskBar,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_76_new)
HXLINE(  76)					_gthis->swithcFirstTimed = true;
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  72)				_gthis->menu->set_visible(true);
HXLINE(  73)				_gthis->menuextraOFF->set_visible(true);
HXLINE(  74)				_gthis->menuextraSETTINGS->set_visible(true);
HXLINE(  75)				 ::Dynamic name =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN(  75)				::haxe::Timer_obj::delay(name,100);
            			}
HXLINE(  79)			if ((_gthis->swithcFirstTimed == true)) {
HXLINE(  81)				_gthis->menu->set_visible(false);
HXLINE(  82)				_gthis->menuextraOFF->set_visible(false);
HXLINE(  83)				_gthis->menuextraSETTINGS->set_visible(false);
HXLINE(  84)				_gthis->swithcFirstTimed = false;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::TaskBar,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_88_new)
HXLINE(  89)			_gthis->windowEXIT->set_visible(true);
HXLINE(  90)			_gthis->bgturnoff->set_visible(true);
HXLINE(  91)			_gthis->off->set_visible(true);
HXLINE(  92)			_gthis->restart->set_visible(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::TaskBar,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::TaskBar,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_101_new)
HXLINE( 102)				 ::CommandFunction off =  ::CommandFunction_obj::__alloc( HX_CTX ,HX_("shutdown /off",6a,ce,c2,21));
HXLINE( 103)				_gthis->add(off).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(0)
            			void _hx_run(){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            				 ::states::BIOState _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_115_new)
HXLINE( 115)					return  ::states::BIOState_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

            				HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_115_new)
HXLINE( 115)				::states::LoadState_obj::setLoadingScreen(2000,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_4())));
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_95_new)
HXLINE(  96)			_gthis->bgturnoff =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/turnoff.png",82,24,2b,24));
HXLINE(  97)			_gthis->bgturnoff->set_visible(false);
HXLINE(  98)			{
HXLINE(  98)				 ::flixel::FlxSprite _this = _gthis->bgturnoff;
HXDLIN(  98)				int axes = 17;
HXDLIN(  98)				bool name;
HXDLIN(  98)				if ((axes != 1)) {
HXLINE(  98)					name = (axes == 17);
            				}
            				else {
HXLINE(  98)					name = true;
            				}
HXDLIN(  98)				if (name) {
HXLINE(  98)					int name1 = ::flixel::FlxG_obj::width;
HXDLIN(  98)					_this->set_x(((( (Float)(name1) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  98)				bool name2;
HXDLIN(  98)				if ((axes != 16)) {
HXLINE(  98)					name2 = (axes == 17);
            				}
            				else {
HXLINE(  98)					name2 = true;
            				}
HXDLIN(  98)				if (name2) {
HXLINE(  98)					int name3 = ::flixel::FlxG_obj::height;
HXDLIN(  98)					_this->set_y(((( (Float)(name3) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(  99)			_gthis->add(_gthis->bgturnoff).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 101)			 ::Dynamic name4 =  ::Dynamic(new _hx_Closure_3(_gthis));
HXDLIN( 101)			_gthis->off =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name4);
HXLINE( 105)			{
HXLINE( 105)				 ::flixel::ui::FlxButton _this1 = _gthis->off;
HXDLIN( 105)				int axes1 = 17;
HXDLIN( 105)				bool name5;
HXDLIN( 105)				if ((axes1 != 1)) {
HXLINE( 105)					name5 = (axes1 == 17);
            				}
            				else {
HXLINE( 105)					name5 = true;
            				}
HXDLIN( 105)				if (name5) {
HXLINE( 105)					int name6 = ::flixel::FlxG_obj::width;
HXDLIN( 105)					_this1->set_x(((( (Float)(name6) ) - _this1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 105)				bool name7;
HXDLIN( 105)				if ((axes1 != 16)) {
HXLINE( 105)					name7 = (axes1 == 17);
            				}
            				else {
HXLINE( 105)					name7 = true;
            				}
HXDLIN( 105)				if (name7) {
HXLINE( 105)					int name8 = ::flixel::FlxG_obj::height;
HXDLIN( 105)					_this1->set_y(((( (Float)(name8) ) - _this1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 106)			 ::flixel::ui::FlxButton fh = _gthis->off;
HXDLIN( 106)			fh->set_x((fh->x - ( (Float)(150) )));
HXLINE( 107)			 ::flixel::ui::FlxButton fh1 = _gthis->off;
HXDLIN( 107)			fh1->set_y((fh1->y - ( (Float)(25) )));
HXLINE( 108)			_gthis->off->set_visible(false);
HXLINE( 109)			_gthis->off->loadGraphic(HX_("assets/images/off.png",df,77,bf,9b),null(),null(),null(),null(),null());
HXLINE( 110)			_gthis->off->setGraphicSize(150,150);
HXLINE( 111)			_gthis->off->updateHitbox();
HXLINE( 112)			_gthis->add(_gthis->off).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 114)			 ::Dynamic name9 =  ::Dynamic(new _hx_Closure_5());
HXDLIN( 114)			_gthis->restart =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name9);
HXLINE( 117)			{
HXLINE( 117)				 ::flixel::ui::FlxButton _this2 = _gthis->restart;
HXDLIN( 117)				int axes2 = 17;
HXDLIN( 117)				bool name10;
HXDLIN( 117)				if ((axes2 != 1)) {
HXLINE( 117)					name10 = (axes2 == 17);
            				}
            				else {
HXLINE( 117)					name10 = true;
            				}
HXDLIN( 117)				if (name10) {
HXLINE( 117)					int name11 = ::flixel::FlxG_obj::width;
HXDLIN( 117)					_this2->set_x(((( (Float)(name11) ) - _this2->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 117)				bool name12;
HXDLIN( 117)				if ((axes2 != 16)) {
HXLINE( 117)					name12 = (axes2 == 17);
            				}
            				else {
HXLINE( 117)					name12 = true;
            				}
HXDLIN( 117)				if (name12) {
HXLINE( 117)					int name13 = ::flixel::FlxG_obj::height;
HXDLIN( 117)					_this2->set_y(((( (Float)(name13) ) - _this2->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 118)			 ::flixel::ui::FlxButton fh2 = _gthis->restart;
HXDLIN( 118)			fh2->set_x((fh2->x + 100));
HXLINE( 119)			 ::flixel::ui::FlxButton fh3 = _gthis->restart;
HXDLIN( 119)			fh3->set_y((fh3->y - ( (Float)(25) )));
HXLINE( 120)			_gthis->restart->set_visible(false);
HXLINE( 121)			_gthis->restart->loadGraphic(HX_("assets/images/restart.png",bf,da,9e,dd),null(),null(),null(),null(),null());
HXLINE( 122)			_gthis->restart->setGraphicSize(150,150);
HXLINE( 123)			_gthis->restart->updateHitbox();
HXLINE( 124)			_gthis->add(_gthis->restart).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::TaskBar,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_127_new)
HXLINE( 128)			_gthis->bgturnoff->set_visible(false);
HXLINE( 129)			_gthis->windowEXIT->set_visible(false);
HXLINE( 130)			_gthis->off->set_visible(false);
HXLINE( 131)			_gthis->restart->set_visible(false);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_8, ::TaskBar,_gthis, ::Dynamic,appear) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_161_new)
HXLINE( 162)			::states::WindowsState_obj::IsSystem = true;
HXLINE( 163)			_gthis->swithcFirstTimed = true;
HXLINE( 164)			appear();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_62c2ef01b2c78538_29_new)
HXLINE(  46)		this->wasOverlappin = false;
HXLINE(  45)		this->swithcFirstTimed = false;
HXLINE(  42)		this->listApplications = ::Array_obj< ::String >::__new(0);
HXLINE(  40)		this->was = false;
HXLINE(  37)		this->allowcover = false;
HXLINE(  36)		this->wasoff = false;
HXLINE(  35)		this->wasOverlapping = false;
HXLINE(  57)		 ::TaskBar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  58)		super::__construct(null());
HXLINE(  59)		if (::sys::FileSystem_obj::exists(HX_("assets/Windows/mbr.json",71,7f,52,64))) {
HXLINE(  63)			::String data = ::sys::io::File_obj::getContent(HX_("assets/Windows/mbr.json",71,7f,52,64));
HXLINE(  64)			this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE(  68)		 ::Dynamic appear =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(  87)		 ::Dynamic appearOFF =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE(  94)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_6(_gthis));
HXLINE( 126)		 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE(  94)		this->windowEXIT =  ::CustomWindow_obj::__alloc( HX_CTX ,536,277,HX_("Turn off PC",27,28,e1,40),HX_("assets/images/icons/null.png",42,d1,d8,bb),name,name1,false);
HXLINE( 134)		{
HXLINE( 134)			 ::CustomWindow _this = this->windowEXIT;
HXDLIN( 134)			int axes = 17;
HXDLIN( 134)			bool _hx_tmp;
HXDLIN( 134)			if ((axes != 1)) {
HXLINE( 134)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 134)				_hx_tmp = true;
            			}
HXDLIN( 134)			if (_hx_tmp) {
HXLINE( 134)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 134)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 134)			bool _hx_tmp2;
HXDLIN( 134)			if ((axes != 16)) {
HXLINE( 134)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 134)				_hx_tmp2 = true;
            			}
HXDLIN( 134)			if (_hx_tmp2) {
HXLINE( 134)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 134)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 135)		this->windowEXIT->set_visible(false);
HXLINE( 136)		this->add(this->windowEXIT);
HXLINE( 138)		this->menu =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/menu.png",05,99,7e,f8));
HXLINE( 139)		Float _hx_tmp4;
HXDLIN( 139)		if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 139)			_hx_tmp4 = ( (Float)((::flixel::FlxG_obj::height - 768)) );
            		}
            		else {
HXLINE( 139)			if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("up",5b,66,00,00) )) {
HXLINE( 139)				_hx_tmp4 = ( (Float)(40) );
            			}
            			else {
HXLINE( 139)				_hx_tmp4 = ( (Float)(40) );
            			}
            		}
HXDLIN( 139)		this->menu->set_y(_hx_tmp4);
HXLINE( 140)		this->menu->set_visible(false);
HXLINE( 141)		this->add(this->menu);
HXLINE( 144)		this->mainpart =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/taskbar.png",1e,fa,22,12));
HXLINE( 145)		{
HXLINE( 145)			 ::flixel::FlxSprite _this1 = this->mainpart;
HXDLIN( 145)			int axes1 = 1;
HXDLIN( 145)			bool _hx_tmp5;
HXDLIN( 145)			if ((axes1 != 1)) {
HXLINE( 145)				_hx_tmp5 = (axes1 == 17);
            			}
            			else {
HXLINE( 145)				_hx_tmp5 = true;
            			}
HXDLIN( 145)			if (_hx_tmp5) {
HXLINE( 145)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN( 145)				_this1->set_x(((( (Float)(_hx_tmp6) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 145)			bool _hx_tmp7;
HXDLIN( 145)			if ((axes1 != 16)) {
HXLINE( 145)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE( 145)				_hx_tmp7 = true;
            			}
HXDLIN( 145)			if (_hx_tmp7) {
HXLINE( 145)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN( 145)				_this1->set_y(((( (Float)(_hx_tmp8) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 146)		 ::flixel::FlxSprite fh = this->mainpart;
HXDLIN( 146)		int _hx_tmp9;
HXDLIN( 146)		if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 146)			_hx_tmp9 = (::flixel::FlxG_obj::height - 40);
            		}
            		else {
HXLINE( 146)			if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("up",5b,66,00,00) )) {
HXLINE( 146)				_hx_tmp9 = 0;
            			}
            			else {
HXLINE( 146)				_hx_tmp9 = 0;
            			}
            		}
HXDLIN( 146)		fh->set_y((fh->y + _hx_tmp9));
HXLINE( 147)		this->add(this->mainpart);
HXLINE( 149)		this->startmenu =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),appear);
HXLINE( 150)		this->startmenu->loadGraphic(HX_("assets/images/startmenu.png",31,de,97,9e),null(),null(),null(),null(),null());
HXLINE( 151)		this->startmenu->updateHitbox();
HXLINE( 152)		 ::flixel::ui::FlxButton fh1 = this->startmenu;
HXDLIN( 152)		int _hx_tmp10;
HXDLIN( 152)		if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 152)			_hx_tmp10 = (::flixel::FlxG_obj::height - 40);
            		}
            		else {
HXLINE( 152)			if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("up",5b,66,00,00) )) {
HXLINE( 152)				_hx_tmp10 = 0;
            			}
            			else {
HXLINE( 152)				_hx_tmp10 = 0;
            			}
            		}
HXDLIN( 152)		fh1->set_y((fh1->y + _hx_tmp10));
HXLINE( 153)		this->add(this->startmenu);
HXLINE( 155)		this->menuextraOFF =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),appearOFF);
HXLINE( 156)		this->menuextraOFF->loadGraphic(HX_("assets/images/menuEXTRAOFF.png",64,51,a5,cf),null(),null(),null(),null(),null());
HXLINE( 157)		Float _hx_tmp11;
HXDLIN( 157)		if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 157)			_hx_tmp11 = ( (Float)((::flixel::FlxG_obj::height - 87)) );
            		}
            		else {
HXLINE( 157)			if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("up",5b,66,00,00) )) {
HXLINE( 157)				_hx_tmp11 = ( (Float)(719) );
            			}
            			else {
HXLINE( 157)				_hx_tmp11 = ( (Float)(719) );
            			}
            		}
HXDLIN( 157)		this->menuextraOFF->set_y(_hx_tmp11);
HXLINE( 158)		this->menuextraOFF->set_visible(false);
HXLINE( 159)		this->add(this->menuextraOFF);
HXLINE( 161)		 ::Dynamic Open =  ::Dynamic(new _hx_Closure_8(_gthis,appear));
HXDLIN( 161)		this->menuextraSETTINGS =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),Open);
HXLINE( 166)		this->menuextraSETTINGS->loadGraphic(HX_("assets/images/menuEXTRASETTINGS.png",04,20,62,cc),null(),null(),null(),null(),null());
HXLINE( 167)		Float _hx_tmp12;
HXDLIN( 167)		if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 167)			_hx_tmp12 = ( (Float)((::flixel::FlxG_obj::height - 133)) );
            		}
            		else {
HXLINE( 167)			if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("up",5b,66,00,00) )) {
HXLINE( 167)				_hx_tmp12 = ( (Float)(670) );
            			}
            			else {
HXLINE( 167)				_hx_tmp12 = ( (Float)(670) );
            			}
            		}
HXDLIN( 167)		this->menuextraSETTINGS->set_y(_hx_tmp12);
HXLINE( 168)		this->menuextraSETTINGS->set_visible(false);
HXLINE( 169)		this->add(this->menuextraSETTINGS);
HXLINE( 171)		this->timeText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,10,0,HX_("",00,00,00,00),12,null());
HXLINE( 172)		this->timeText->set_font(HX_("assets/fonts/my.ttf",5b,83,ee,55));
HXLINE( 173)		this->timeText->set_color(-1);
HXLINE( 174)		this->timeText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 175)		this->timeText->set_x(( (Float)((::flixel::FlxG_obj::width - 65)) ));
HXLINE( 176)		 ::flixel::text::FlxText fh2 = this->timeText;
HXDLIN( 176)		int _hx_tmp13;
HXDLIN( 176)		if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 176)			_hx_tmp13 = (::flixel::FlxG_obj::height - 50);
            		}
            		else {
HXLINE( 176)			if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("up",5b,66,00,00) )) {
HXLINE( 176)				_hx_tmp13 = -10;
            			}
            			else {
HXLINE( 176)				_hx_tmp13 = -10;
            			}
            		}
HXDLIN( 176)		fh2->set_y((fh2->y + _hx_tmp13));
HXLINE( 177)		this->add(this->timeText);
HXLINE( 179)		this->volume =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),null());
HXLINE( 180)		this->volume->loadGraphic(HX_("assets/images/volume.png",80,f7,8e,46),null(),null(),null(),null(),null());
HXLINE( 181)		this->volume->updateHitbox();
HXLINE( 182)		this->volume->set_x(( (Float)((::flixel::FlxG_obj::width - 90)) ));
HXLINE( 183)		 ::flixel::ui::FlxButton fh3 = this->volume;
HXDLIN( 183)		int _hx_tmp14;
HXDLIN( 183)		if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 183)			_hx_tmp14 = (::flixel::FlxG_obj::height - 40);
            		}
            		else {
HXLINE( 183)			if (::hx::IsEq( this->o->__Field(HX_("taskbar",ae,0b,71,1e),::hx::paccDynamic),HX_("up",5b,66,00,00) )) {
HXLINE( 183)				_hx_tmp14 = 0;
            			}
            			else {
HXLINE( 183)				_hx_tmp14 = 0;
            			}
            		}
HXDLIN( 183)		fh3->set_y((fh3->y + _hx_tmp14));
HXLINE( 184)		this->add(this->volume);
HXLINE( 186)		this->updateTime();
            	}

Dynamic TaskBar_obj::__CreateEmpty() { return new TaskBar_obj; }

void *TaskBar_obj::_hx_vtable = 0;

Dynamic TaskBar_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TaskBar_obj > _hx_result = new TaskBar_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TaskBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x030e0a02) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x030e0a02;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void TaskBar_obj::updateTaskBarMembers(){
            	HX_STACKFRAME(&_hx_pos_62c2ef01b2c78538_55_updateTaskBarMembers)
HXDLIN(  55)		::haxe::Log_obj::trace(HX_("Updated",1b,ea,20,6b), ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("TaskBar",6e,eb,a9,eb))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,this->listApplications))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("updateTaskBarMembers",d4,76,e4,6d))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/TaskBar.hx",04,78,58,2e))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),55)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TaskBar_obj,updateTaskBarMembers,(void))

void TaskBar_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_62c2ef01b2c78538_188_update)
HXLINE( 189)		this->super::update(elapsed);
HXLINE( 192)		 ::flixel::ui::FlxButton isOverlapping = this->startmenu;
HXDLIN( 192)		bool isOverlapping1 = isOverlapping->overlapsPoint(::flixel::FlxG_obj::mouse->getWorldPosition(null(),null()),null(),null());
HXLINE( 194)		bool _hx_tmp;
HXDLIN( 194)		if (this->wasOverlapping) {
HXLINE( 194)			_hx_tmp = isOverlapping1;
            		}
            		else {
HXLINE( 194)			_hx_tmp = false;
            		}
HXDLIN( 194)		if (_hx_tmp) {
HXLINE( 195)			this->startmenu->loadGraphic(HX_("assets/images/startmenuCOVER.png",1c,4f,60,b5),null(),null(),null(),null(),null());
            		}
HXLINE( 198)		bool _hx_tmp1;
HXDLIN( 198)		if (this->wasOverlapping) {
HXLINE( 198)			_hx_tmp1 = !(isOverlapping1);
            		}
            		else {
HXLINE( 198)			_hx_tmp1 = false;
            		}
HXDLIN( 198)		if (_hx_tmp1) {
HXLINE( 199)			::haxe::Log_obj::trace(HX_("out",8e,a0,54,00),::hx::SourceInfo(HX_("source/TaskBar.hx",04,78,58,2e),199,HX_("TaskBar",6e,eb,a9,eb),HX_("update",09,86,05,87)));
HXLINE( 200)			this->startmenu->loadGraphic(HX_("assets/images/startmenu.png",31,de,97,9e),null(),null(),null(),null(),null());
            		}
HXLINE( 203)		this->wasOverlapping = isOverlapping1;
HXLINE( 205)		 ::flixel::ui::FlxButton isOveroOff = this->menuextraOFF;
HXDLIN( 205)		bool isOveroOff1 = isOveroOff->overlapsPoint(::flixel::FlxG_obj::mouse->getWorldPosition(null(),null()),null(),null());
HXLINE( 207)		bool _hx_tmp2;
HXDLIN( 207)		if (this->wasoff) {
HXLINE( 207)			_hx_tmp2 = isOveroOff1;
            		}
            		else {
HXLINE( 207)			_hx_tmp2 = false;
            		}
HXDLIN( 207)		if (_hx_tmp2) {
HXLINE( 208)			this->menuextraOFF->loadGraphic(HX_("assets/images/menuEXTRAOFFCOVER.png",09,63,e5,03),null(),null(),null(),null(),null());
            		}
HXLINE( 211)		bool _hx_tmp3;
HXDLIN( 211)		if (this->wasoff) {
HXLINE( 211)			_hx_tmp3 = !(isOveroOff1);
            		}
            		else {
HXLINE( 211)			_hx_tmp3 = false;
            		}
HXDLIN( 211)		if (_hx_tmp3) {
HXLINE( 212)			this->menuextraOFF->loadGraphic(HX_("assets/images/menuEXTRAOFF.png",64,51,a5,cf),null(),null(),null(),null(),null());
            		}
HXLINE( 215)		this->wasoff = isOveroOff1;
HXLINE( 218)		 ::flixel::ui::FlxButton isOverlappin = this->menuextraSETTINGS;
HXDLIN( 218)		bool isOverlappin1 = isOverlappin->overlapsPoint(::flixel::FlxG_obj::mouse->getWorldPosition(null(),null()),null(),null());
HXLINE( 220)		bool _hx_tmp4;
HXDLIN( 220)		if (this->wasOverlappin) {
HXLINE( 220)			_hx_tmp4 = isOverlappin1;
            		}
            		else {
HXLINE( 220)			_hx_tmp4 = false;
            		}
HXDLIN( 220)		if (_hx_tmp4) {
HXLINE( 221)			::haxe::Log_obj::trace(HX_("doit",36,ec,6d,42),::hx::SourceInfo(HX_("source/TaskBar.hx",04,78,58,2e),221,HX_("TaskBar",6e,eb,a9,eb),HX_("update",09,86,05,87)));
HXLINE( 222)			this->menuextraSETTINGS->loadGraphic(HX_("assets/images/menuEXTRASETTINGSCOVER.png",69,90,17,db),null(),null(),null(),null(),null());
            		}
HXLINE( 225)		bool _hx_tmp5;
HXDLIN( 225)		if (this->wasOverlappin) {
HXLINE( 225)			_hx_tmp5 = !(isOverlappin1);
            		}
            		else {
HXLINE( 225)			_hx_tmp5 = false;
            		}
HXDLIN( 225)		if (_hx_tmp5) {
HXLINE( 226)			this->menuextraSETTINGS->loadGraphic(HX_("assets/images/menuEXTRASETTINGS.png",04,20,62,cc),null(),null(),null(),null(),null());
            		}
HXLINE( 229)		this->wasOverlappin = isOverlappin1;
HXLINE( 232)		 ::flixel::ui::FlxButton isOver = this->volume;
HXDLIN( 232)		bool isOver1 = isOver->overlapsPoint(::flixel::FlxG_obj::mouse->getWorldPosition(null(),null()),null(),null());
HXLINE( 233)		bool _hx_tmp6;
HXDLIN( 233)		if (this->was) {
HXLINE( 233)			_hx_tmp6 = isOver1;
            		}
            		else {
HXLINE( 233)			_hx_tmp6 = false;
            		}
HXDLIN( 233)		if (_hx_tmp6) {
HXLINE( 234)			this->volume->loadGraphic(HX_("assets/images/volumeCOVER.png",6d,17,40,50),null(),null(),null(),null(),null());
            		}
HXLINE( 237)		bool _hx_tmp7;
HXDLIN( 237)		if (this->was) {
HXLINE( 237)			_hx_tmp7 = !(isOver1);
            		}
            		else {
HXLINE( 237)			_hx_tmp7 = false;
            		}
HXDLIN( 237)		if (_hx_tmp7) {
HXLINE( 238)			this->volume->loadGraphic(HX_("assets/images/volume.png",80,f7,8e,46),null(),null(),null(),null(),null());
            		}
HXLINE( 240)		this->was = isOver1;
HXLINE( 243)		this->updateTime();
            	}


void TaskBar_obj::updateTime(){
            	HX_STACKFRAME(&_hx_pos_62c2ef01b2c78538_248_updateTime)
HXLINE( 249)		 ::Date now = ::Date_obj::now();
HXLINE( 250)		int hours = now->getHours();
HXLINE( 251)		int minutes = now->getMinutes();
HXLINE( 252)		int day = now->getDate();
HXLINE( 253)		int month = (now->getMonth() + 1);
HXLINE( 254)		int year = now->getFullYear();
HXLINE( 257)		::String timeStr = (::StringTools_obj::lpad(::Std_obj::string(hours),HX_("0",30,00,00,00),2) + HX_(":",3a,00,00,00));
HXDLIN( 257)		::String timeStr1 = (timeStr + ::StringTools_obj::lpad(::Std_obj::string(minutes),HX_("0",30,00,00,00),2));
HXLINE( 261)		::String dateStr = (::StringTools_obj::lpad(::Std_obj::string(day),HX_("0",30,00,00,00),2) + HX_(".",2e,00,00,00));
HXDLIN( 261)		::String dateStr1 = ((dateStr + ::StringTools_obj::lpad(::Std_obj::string(month),HX_("0",30,00,00,00),2)) + HX_(".",2e,00,00,00));
HXDLIN( 261)		::String dateStr2 = (dateStr1 + ::Std_obj::string(year));
HXLINE( 266)		this->timeText->set_text(((timeStr1 + HX_("\n",0a,00,00,00)) + dateStr2));
HXLINE( 269)		 ::flixel::text::FlxText _hx_tmp = this->timeText;
HXDLIN( 269)		_hx_tmp->set_width((this->timeText->textField->get_textWidth() + 10));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TaskBar_obj,updateTime,(void))


::hx::ObjectPtr< TaskBar_obj > TaskBar_obj::__new() {
	::hx::ObjectPtr< TaskBar_obj > __this = new TaskBar_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TaskBar_obj > TaskBar_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TaskBar_obj *__this = (TaskBar_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TaskBar_obj), true, "TaskBar"));
	*(void **)__this = TaskBar_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TaskBar_obj::TaskBar_obj()
{
}

void TaskBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TaskBar);
	HX_MARK_MEMBER_NAME(mainpart,"mainpart");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(settingsWindow,"settingsWindow");
	HX_MARK_MEMBER_NAME(startmenu,"startmenu");
	HX_MARK_MEMBER_NAME(wasOverlapping,"wasOverlapping");
	HX_MARK_MEMBER_NAME(wasoff,"wasoff");
	HX_MARK_MEMBER_NAME(allowcover,"allowcover");
	HX_MARK_MEMBER_NAME(timeText,"timeText");
	HX_MARK_MEMBER_NAME(bgturnoff,"bgturnoff");
	HX_MARK_MEMBER_NAME(was,"was");
	HX_MARK_MEMBER_NAME(off,"off");
	HX_MARK_MEMBER_NAME(listApplications,"listApplications");
	HX_MARK_MEMBER_NAME(restart,"restart");
	HX_MARK_MEMBER_NAME(volume,"volume");
	HX_MARK_MEMBER_NAME(swithcFirstTimed,"swithcFirstTimed");
	HX_MARK_MEMBER_NAME(wasOverlappin,"wasOverlappin");
	HX_MARK_MEMBER_NAME(menu,"menu");
	HX_MARK_MEMBER_NAME(windowEXIT,"windowEXIT");
	HX_MARK_MEMBER_NAME(menuextraSETTINGS,"menuextraSETTINGS");
	HX_MARK_MEMBER_NAME(menuextraOFF,"menuextraOFF");
	HX_MARK_MEMBER_NAME(appsMenu,"appsMenu");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TaskBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mainpart,"mainpart");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(settingsWindow,"settingsWindow");
	HX_VISIT_MEMBER_NAME(startmenu,"startmenu");
	HX_VISIT_MEMBER_NAME(wasOverlapping,"wasOverlapping");
	HX_VISIT_MEMBER_NAME(wasoff,"wasoff");
	HX_VISIT_MEMBER_NAME(allowcover,"allowcover");
	HX_VISIT_MEMBER_NAME(timeText,"timeText");
	HX_VISIT_MEMBER_NAME(bgturnoff,"bgturnoff");
	HX_VISIT_MEMBER_NAME(was,"was");
	HX_VISIT_MEMBER_NAME(off,"off");
	HX_VISIT_MEMBER_NAME(listApplications,"listApplications");
	HX_VISIT_MEMBER_NAME(restart,"restart");
	HX_VISIT_MEMBER_NAME(volume,"volume");
	HX_VISIT_MEMBER_NAME(swithcFirstTimed,"swithcFirstTimed");
	HX_VISIT_MEMBER_NAME(wasOverlappin,"wasOverlappin");
	HX_VISIT_MEMBER_NAME(menu,"menu");
	HX_VISIT_MEMBER_NAME(windowEXIT,"windowEXIT");
	HX_VISIT_MEMBER_NAME(menuextraSETTINGS,"menuextraSETTINGS");
	HX_VISIT_MEMBER_NAME(menuextraOFF,"menuextraOFF");
	HX_VISIT_MEMBER_NAME(appsMenu,"appsMenu");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TaskBar_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"was") ) { return ::hx::Val( was ); }
		if (HX_FIELD_EQ(inName,"off") ) { return ::hx::Val( off ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"menu") ) { return ::hx::Val( menu ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"wasoff") ) { return ::hx::Val( wasoff ); }
		if (HX_FIELD_EQ(inName,"volume") ) { return ::hx::Val( volume ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"restart") ) { return ::hx::Val( restart ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mainpart") ) { return ::hx::Val( mainpart ); }
		if (HX_FIELD_EQ(inName,"timeText") ) { return ::hx::Val( timeText ); }
		if (HX_FIELD_EQ(inName,"appsMenu") ) { return ::hx::Val( appsMenu ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startmenu") ) { return ::hx::Val( startmenu ); }
		if (HX_FIELD_EQ(inName,"bgturnoff") ) { return ::hx::Val( bgturnoff ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"allowcover") ) { return ::hx::Val( allowcover ); }
		if (HX_FIELD_EQ(inName,"windowEXIT") ) { return ::hx::Val( windowEXIT ); }
		if (HX_FIELD_EQ(inName,"updateTime") ) { return ::hx::Val( updateTime_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"menuextraOFF") ) { return ::hx::Val( menuextraOFF ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wasOverlappin") ) { return ::hx::Val( wasOverlappin ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"settingsWindow") ) { return ::hx::Val( settingsWindow ); }
		if (HX_FIELD_EQ(inName,"wasOverlapping") ) { return ::hx::Val( wasOverlapping ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"listApplications") ) { return ::hx::Val( listApplications ); }
		if (HX_FIELD_EQ(inName,"swithcFirstTimed") ) { return ::hx::Val( swithcFirstTimed ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"menuextraSETTINGS") ) { return ::hx::Val( menuextraSETTINGS ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateTaskBarMembers") ) { return ::hx::Val( updateTaskBarMembers_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TaskBar_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"was") ) { was=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"off") ) { off=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"menu") ) { menu=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"wasoff") ) { wasoff=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { volume=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"restart") ) { restart=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mainpart") ) { mainpart=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeText") ) { timeText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"appsMenu") ) { appsMenu=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startmenu") ) { startmenu=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgturnoff") ) { bgturnoff=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"allowcover") ) { allowcover=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowEXIT") ) { windowEXIT=inValue.Cast<  ::CustomWindow >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"menuextraOFF") ) { menuextraOFF=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wasOverlappin") ) { wasOverlappin=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"settingsWindow") ) { settingsWindow=inValue.Cast<  ::applications::SettingsApplication >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wasOverlapping") ) { wasOverlapping=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"listApplications") ) { listApplications=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swithcFirstTimed") ) { swithcFirstTimed=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"menuextraSETTINGS") ) { menuextraSETTINGS=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TaskBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mainpart",ac,2c,fb,b7));
	outFields->push(HX_("o",6f,00,00,00));
	outFields->push(HX_("settingsWindow",33,d1,2b,e3));
	outFields->push(HX_("startmenu",01,93,73,16));
	outFields->push(HX_("wasOverlapping",d0,2a,10,a9));
	outFields->push(HX_("wasoff",e6,51,ae,ba));
	outFields->push(HX_("allowcover",0e,4a,02,e2));
	outFields->push(HX_("timeText",5a,4f,5b,ed));
	outFields->push(HX_("bgturnoff",ed,50,e9,4f));
	outFields->push(HX_("was",29,a1,5a,00));
	outFields->push(HX_("off",6f,93,54,00));
	outFields->push(HX_("listApplications",a1,b8,44,c7));
	outFields->push(HX_("restart",cf,c7,a5,6a));
	outFields->push(HX_("volume",da,29,53,5f));
	outFields->push(HX_("swithcFirstTimed",51,dc,76,00));
	outFields->push(HX_("wasOverlappin",b7,d5,6a,34));
	outFields->push(HX_("menu",9f,45,59,48));
	outFields->push(HX_("windowEXIT",0e,0b,dc,cd));
	outFields->push(HX_("menuextraSETTINGS",74,1a,01,84));
	outFields->push(HX_("menuextraOFF",5e,0b,fb,32));
	outFields->push(HX_("appsMenu",71,c3,c0,0f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TaskBar_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TaskBar_obj,mainpart),HX_("mainpart",ac,2c,fb,b7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TaskBar_obj,o),HX_("o",6f,00,00,00)},
	{::hx::fsObject /*  ::applications::SettingsApplication */ ,(int)offsetof(TaskBar_obj,settingsWindow),HX_("settingsWindow",33,d1,2b,e3)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(TaskBar_obj,startmenu),HX_("startmenu",01,93,73,16)},
	{::hx::fsBool,(int)offsetof(TaskBar_obj,wasOverlapping),HX_("wasOverlapping",d0,2a,10,a9)},
	{::hx::fsBool,(int)offsetof(TaskBar_obj,wasoff),HX_("wasoff",e6,51,ae,ba)},
	{::hx::fsBool,(int)offsetof(TaskBar_obj,allowcover),HX_("allowcover",0e,4a,02,e2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(TaskBar_obj,timeText),HX_("timeText",5a,4f,5b,ed)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TaskBar_obj,bgturnoff),HX_("bgturnoff",ed,50,e9,4f)},
	{::hx::fsBool,(int)offsetof(TaskBar_obj,was),HX_("was",29,a1,5a,00)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(TaskBar_obj,off),HX_("off",6f,93,54,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(TaskBar_obj,listApplications),HX_("listApplications",a1,b8,44,c7)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(TaskBar_obj,restart),HX_("restart",cf,c7,a5,6a)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(TaskBar_obj,volume),HX_("volume",da,29,53,5f)},
	{::hx::fsBool,(int)offsetof(TaskBar_obj,swithcFirstTimed),HX_("swithcFirstTimed",51,dc,76,00)},
	{::hx::fsBool,(int)offsetof(TaskBar_obj,wasOverlappin),HX_("wasOverlappin",b7,d5,6a,34)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TaskBar_obj,menu),HX_("menu",9f,45,59,48)},
	{::hx::fsObject /*  ::CustomWindow */ ,(int)offsetof(TaskBar_obj,windowEXIT),HX_("windowEXIT",0e,0b,dc,cd)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(TaskBar_obj,menuextraSETTINGS),HX_("menuextraSETTINGS",74,1a,01,84)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(TaskBar_obj,menuextraOFF),HX_("menuextraOFF",5e,0b,fb,32)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TaskBar_obj,appsMenu),HX_("appsMenu",71,c3,c0,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TaskBar_obj_sStaticStorageInfo = 0;
#endif

static ::String TaskBar_obj_sMemberFields[] = {
	HX_("mainpart",ac,2c,fb,b7),
	HX_("o",6f,00,00,00),
	HX_("settingsWindow",33,d1,2b,e3),
	HX_("startmenu",01,93,73,16),
	HX_("wasOverlapping",d0,2a,10,a9),
	HX_("wasoff",e6,51,ae,ba),
	HX_("allowcover",0e,4a,02,e2),
	HX_("timeText",5a,4f,5b,ed),
	HX_("bgturnoff",ed,50,e9,4f),
	HX_("was",29,a1,5a,00),
	HX_("off",6f,93,54,00),
	HX_("listApplications",a1,b8,44,c7),
	HX_("restart",cf,c7,a5,6a),
	HX_("volume",da,29,53,5f),
	HX_("swithcFirstTimed",51,dc,76,00),
	HX_("wasOverlappin",b7,d5,6a,34),
	HX_("menu",9f,45,59,48),
	HX_("windowEXIT",0e,0b,dc,cd),
	HX_("menuextraSETTINGS",74,1a,01,84),
	HX_("menuextraOFF",5e,0b,fb,32),
	HX_("appsMenu",71,c3,c0,0f),
	HX_("updateTaskBarMembers",d4,76,e4,6d),
	HX_("update",09,86,05,87),
	HX_("updateTime",b6,b6,b1,05),
	::String(null()) };

::hx::Class TaskBar_obj::__mClass;

void TaskBar_obj::__register()
{
	TaskBar_obj _hx_dummy;
	TaskBar_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TaskBar",6e,eb,a9,eb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TaskBar_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TaskBar_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TaskBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TaskBar_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

