// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_CustomWindow
#include <CustomWindow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_applications_ConsoleApp
#include <applications/ConsoleApp.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_BIOState
#include <states/BIOState.h>
#endif
#ifndef INCLUDED_states_LoadState
#include <states/LoadState.h>
#endif
#ifndef INCLUDED_states_OOBEState
#include <states/OOBEState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df91211b5f7f367b_32_new,"states.OOBEState","new",0xabea1bf4,"states.OOBEState.new","states/OOBEState.hx",32,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_95_create,"states.OOBEState","create",0xa70d8fe8,"states.OOBEState.create","states/OOBEState.hx",95,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_110_create,"states.OOBEState","create",0xa70d8fe8,"states.OOBEState.create","states/OOBEState.hx",110,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_125_create,"states.OOBEState","create",0xa70d8fe8,"states.OOBEState.create","states/OOBEState.hx",125,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_177_create,"states.OOBEState","create",0xa70d8fe8,"states.OOBEState.create","states/OOBEState.hx",177,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_189_create,"states.OOBEState","create",0xa70d8fe8,"states.OOBEState.create","states/OOBEState.hx",189,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_83_create,"states.OOBEState","create",0xa70d8fe8,"states.OOBEState.create","states/OOBEState.hx",83,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_202_create,"states.OOBEState","create",0xa70d8fe8,"states.OOBEState.create","states/OOBEState.hx",202,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_59_create,"states.OOBEState","create",0xa70d8fe8,"states.OOBEState.create","states/OOBEState.hx",59,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_209_update,"states.OOBEState","update",0xb203aef5,"states.OOBEState.update","states/OOBEState.hx",209,0x39e51b7d)
HX_LOCAL_STACK_FRAME(_hx_pos_df91211b5f7f367b_252_destroy,"states.OOBEState","destroy",0x97ebd28e,"states.OOBEState.destroy","states/OOBEState.hx",252,0x39e51b7d)
namespace states{

void OOBEState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_df91211b5f7f367b_32_new)
HXLINE(  53)		this->storedText = HX_("",00,00,00,00);
HXLINE(  51)		this->storedPassword = HX_("",00,00,00,00);
HXLINE(  32)		super::__construct();
            	}

Dynamic OOBEState_obj::__CreateEmpty() { return new OOBEState_obj; }

void *OOBEState_obj::_hx_vtable = 0;

Dynamic OOBEState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OOBEState_obj > _hx_result = new OOBEState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OOBEState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x057b3cac) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x057b3cac;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void OOBEState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::OOBEState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::OOBEState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_95_create)
HXLINE(  96)				 ::flixel::ui::FlxButton _gthis1 = _gthis->en;
HXDLIN(  96)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  96)				{
HXLINE(  96)					color = (color & -16711681);
HXDLIN(  96)					color = (color | 1048576);
            				}
HXDLIN(  96)				{
HXLINE(  96)					color = (color & -65281);
HXDLIN(  96)					color = (color | 39936);
            				}
HXDLIN(  96)				{
HXLINE(  96)					color = (color & -256);
HXDLIN(  96)					color = (color | 238);
            				}
HXDLIN(  96)				{
HXLINE(  96)					color = (color & 16777215);
HXDLIN(  96)					color = (color | 838860800);
            				}
HXDLIN(  96)				_gthis1->makeGraphic(150,50,color,null(),null());
HXLINE(  97)				_gthis->en->updateHitbox();
HXLINE(  99)				_gthis->ru->makeGraphic(150,50,0,null(),null());
HXLINE( 100)				_gthis->ru->updateHitbox();
HXLINE( 102)				_gthis->isEn = true;
HXLINE( 103)				_gthis->isRu = false;
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::OOBEState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_110_create)
HXLINE( 111)				 ::flixel::ui::FlxButton _gthis1 = _gthis->ru;
HXDLIN( 111)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 111)				{
HXLINE( 111)					color = (color & -16711681);
HXDLIN( 111)					color = (color | 1048576);
            				}
HXDLIN( 111)				{
HXLINE( 111)					color = (color & -65281);
HXDLIN( 111)					color = (color | 39936);
            				}
HXDLIN( 111)				{
HXLINE( 111)					color = (color & -256);
HXDLIN( 111)					color = (color | 238);
            				}
HXDLIN( 111)				{
HXLINE( 111)					color = (color & 16777215);
HXDLIN( 111)					color = (color | 838860800);
            				}
HXDLIN( 111)				_gthis1->makeGraphic(150,50,color,null(),null());
HXLINE( 112)				_gthis->ru->updateHitbox();
HXLINE( 114)				_gthis->en->makeGraphic(150,50,0,null(),null());
HXLINE( 115)				_gthis->en->updateHitbox();
HXLINE( 117)				_gthis->isEn = false;
HXLINE( 118)				_gthis->isRu = true;
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::OOBEState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_125_create)
HXLINE( 126)				if ((_gthis->isEn == true)) {
HXLINE( 128)					_gthis->l->__SetField(HX_("curLanguage",f8,41,50,fb),HX_("en",69,58,00,00),::hx::paccDynamic);
HXLINE( 129)					 ::Dynamic replacer = null();
HXDLIN( 129)					::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
HXLINE( 130)					_gthis->languageText->kill();
HXLINE( 131)					_gthis->en->kill();
HXLINE( 132)					_gthis->ru->kill();
HXLINE( 133)					_gthis->NextButtonLanguage->kill();
HXLINE( 134)					_gthis->userText->set_visible(true);
HXLINE( 135)					_gthis->userButton->set_visible(true);
HXLINE( 136)					_gthis->inputUserText->set_visible(true);
HXLINE( 137)					_gthis->inputPassword->set_visible(true);
            				}
HXLINE( 139)				if ((_gthis->isRu == true)) {
HXLINE( 141)					_gthis->l->__SetField(HX_("curLanguage",f8,41,50,fb),HX_("ru",c3,63,00,00),::hx::paccDynamic);
HXLINE( 142)					 ::Dynamic replacer1 = null();
HXDLIN( 142)					::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer1,HX_("",00,00,00,00)));
HXLINE( 143)					_gthis->languageText->kill();
HXLINE( 144)					_gthis->en->kill();
HXLINE( 145)					_gthis->ru->kill();
HXLINE( 146)					_gthis->NextButtonLanguage->kill();
HXLINE( 147)					_gthis->userText->set_visible(true);
HXLINE( 148)					_gthis->userButton->set_visible(true);
HXLINE( 149)					_gthis->inputUserText->set_visible(true);
HXLINE( 150)					_gthis->inputPassword->set_visible(true);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::OOBEState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_177_create)
HXLINE( 177)				if ((_gthis->storedText != HX_("",00,00,00,00))) {
HXLINE( 178)					if (!(::sys::FileSystem_obj::exists(HX_("assets/Windows/Users",f0,9d,c7,d6)))) {
HXLINE( 179)						::sys::FileSystem_obj::createDirectory(HX_("assets/Windows/Users",f0,9d,c7,d6));
            					}
HXLINE( 181)					_gthis->l->__SetField(HX_("userName",36,b2,c4,0b),_gthis->storedText,::hx::paccDynamic);
HXLINE( 182)					_gthis->l->__SetField(HX_("password",1b,23,d0,48),_gthis->storedPassword,::hx::paccDynamic);
HXLINE( 183)					_gthis->l->__SetField(HX_("taskbar",ae,0b,71,1e),HX_("down",62,f8,6d,42),::hx::paccDynamic);
HXLINE( 184)					_gthis->o->__SetField(HX_("OOBE",e3,06,74,34),false,::hx::paccDynamic);
HXLINE( 185)					 ::Dynamic replacer = null();
HXDLIN( 185)					::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
HXLINE( 186)					 ::Dynamic replacer1 = null();
HXDLIN( 186)					::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer1,HX_("",00,00,00,00)));
HXLINE( 187)					::sys::FileSystem_obj::createDirectory((HX_("assets/Windows/Users/",3f,94,e2,17) + _gthis->storedText));
HXLINE( 188)					::sys::FileSystem_obj::createDirectory(((HX_("assets/Windows/Users/",3f,94,e2,17) + _gthis->storedText) + HX_("/Desktop",6d,e1,28,6c)));
HXLINE( 189)					{
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            						 ::states::BIOState _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_189_create)
HXLINE( 189)							return  ::states::BIOState_obj::__alloc( HX_CTX );
            						}
            						HX_END_LOCAL_FUNC0(return)

HXLINE( 189)						 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_3()));
HXDLIN( 189)						 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 189)						bool name;
HXDLIN( 189)						if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 189)							name = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            						}
            						else {
HXLINE( 189)							name = true;
            						}
HXDLIN( 189)						if (name) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            							void _hx_run(){
            								HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_189_create)
HXLINE( 189)								if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 189)									::flixel::FlxG_obj::game->_nextState = nextState;
            								}
            								else {
HXLINE( 189)									::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            								}
            							}
            							HX_END_LOCAL_FUNC0((void))

HXLINE( 189)							::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_4(nextState,stateOnCall)));
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_83_create)
HXLINE(  84)			_gthis->background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/bg.png",3d,7e,fe,cd));
HXLINE(  85)			_gthis->background->setGraphicSize(1280,800);
HXLINE(  86)			_gthis->background->updateHitbox();
HXLINE(  87)			_gthis->add(_gthis->background).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  89)			_gthis->languageText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("Please, choose your language",5a,d1,2f,90),45,null());
HXLINE(  90)			_gthis->languageText->set_color(3496348);
HXLINE(  91)			::String OnAppear;
HXDLIN(  91)			if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  91)				OnAppear = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            			}
            			else {
HXLINE(  91)				OnAppear = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            			}
HXDLIN(  91)			_gthis->languageText->set_font(OnAppear);
HXLINE(  92)			::String OnAppear1;
HXDLIN(  92)			if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  92)				OnAppear1 = HX_("Please, choose your language",5a,d1,2f,90);
            			}
            			else {
HXLINE(  92)				OnAppear1 = HX_W(u"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u044f\u0437\u044b\u043a",3bbc,8f7e);
            			}
HXDLIN(  92)			_gthis->languageText->set_text(OnAppear1);
HXLINE(  93)			_gthis->add(_gthis->languageText).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  95)			 ::Dynamic name =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN(  95)			_gthis->en =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("EN/ENGLISH",2a,7c,e9,12),name);
HXLINE( 105)			_gthis->en->label->setFormat(HX_("assets/fonts/my.ttf",5b,83,ee,55),26,3496348,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 106)			_gthis->en->makeGraphic(150,50,5672157,null(),null());
HXLINE( 107)			_gthis->en->updateHitbox();
HXLINE( 108)			_gthis->add(_gthis->en).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 110)			 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_1(_gthis));
HXDLIN( 110)			_gthis->ru =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_W(u"ru/\u0420\u0443\u0441\u0441\u043a\u0438\u0439",a4c9,d3c1),name1);
HXLINE( 120)			_gthis->ru->label->setFormat(HX_("assets/fonts/ots.ttf",cf,af,87,ba),26,3496348,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 121)			_gthis->ru->makeGraphic(150,50,0,null(),null());
HXLINE( 122)			_gthis->ru->updateHitbox();
HXLINE( 123)			_gthis->add(_gthis->ru).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 125)			 ::Dynamic name2 =  ::Dynamic(new _hx_Closure_2(_gthis));
HXDLIN( 125)			_gthis->NextButtonLanguage =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("Next",13,b1,db,33),name2);
HXLINE( 153)			::String OnAppear2;
HXDLIN( 153)			if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 153)				OnAppear2 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            			}
            			else {
HXLINE( 153)				OnAppear2 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            			}
HXDLIN( 153)			_gthis->NextButtonLanguage->label->setFormat(OnAppear2,26,3496348,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 154)			_gthis->NextButtonLanguage->makeGraphic(150,50,0,null(),null());
HXLINE( 155)			_gthis->NextButtonLanguage->updateHitbox();
HXLINE( 156)			{
HXLINE( 156)				 ::flixel::ui::FlxButton _this = _gthis->NextButtonLanguage;
HXDLIN( 156)				::String Text;
HXDLIN( 156)				if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 156)					Text = HX_("Next",13,b1,db,33);
            				}
            				else {
HXLINE( 156)					Text = HX_W(u"\u0414\u0430\u043b\u0435\u0435",6e19,a000);
            				}
HXDLIN( 156)				if (::hx::IsNull( _this->label )) {
HXLINE( 156)					if (::hx::IsNotNull( Text )) {
HXLINE( 156)						_this->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this->x + _this->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this->y + _this->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text,null(),null()));
HXDLIN( 156)						_this->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 156)						_this->label->set_alpha(_this->labelAlphas->__get(_this->status));
HXDLIN( 156)						_this->label->drawFrame(true);
            					}
            				}
            				else {
HXLINE( 156)					_this->label->set_text(Text);
            				}
            			}
HXLINE( 157)			_gthis->add(_gthis->NextButtonLanguage).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 159)			_gthis->userText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("Please, write name of your user",c5,51,5a,f0),45,null());
HXLINE( 160)			_gthis->userText->set_color(3496348);
HXLINE( 161)			::String OnAppear3;
HXDLIN( 161)			if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 161)				OnAppear3 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            			}
            			else {
HXLINE( 161)				OnAppear3 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            			}
HXDLIN( 161)			_gthis->userText->set_font(OnAppear3);
HXLINE( 162)			::String OnAppear4;
HXDLIN( 162)			if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 162)				OnAppear4 = HX_("Please, write name of your user",c5,51,5a,f0);
            			}
            			else {
HXLINE( 162)				OnAppear4 = HX_W(u"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0438\u043c\u044f \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438",5849,0059);
            			}
HXDLIN( 162)			_gthis->userText->set_text(OnAppear4);
HXLINE( 163)			_gthis->userText->set_visible(false);
HXLINE( 164)			_gthis->add(_gthis->userText).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 166)			_gthis->inputUserText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,100,50,200,HX_("",00,00,00,00),16,null(),null(),null());
HXLINE( 167)			::String OnAppear5;
HXDLIN( 167)			if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 167)				OnAppear5 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            			}
            			else {
HXLINE( 167)				OnAppear5 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            			}
HXDLIN( 167)			_gthis->inputUserText->set_font(OnAppear5);
HXLINE( 168)			_gthis->inputUserText->set_visible(false);
HXLINE( 169)			_gthis->add(_gthis->inputUserText).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 171)			_gthis->inputPassword =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,100,50,200,HX_("",00,00,00,00),16,null(),null(),null());
HXLINE( 172)			::String OnAppear6;
HXDLIN( 172)			if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 172)				OnAppear6 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            			}
            			else {
HXLINE( 172)				OnAppear6 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            			}
HXDLIN( 172)			_gthis->inputPassword->set_font(OnAppear6);
HXLINE( 173)			_gthis->inputPassword->set_visible(false);
HXLINE( 174)			_gthis->add(_gthis->inputPassword).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 176)			 ::Dynamic name3 =  ::Dynamic(new _hx_Closure_5(_gthis));
HXDLIN( 176)			_gthis->userButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("Next",13,b1,db,33),name3);
HXLINE( 193)			::String OnAppear7;
HXDLIN( 193)			if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 193)				OnAppear7 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            			}
            			else {
HXLINE( 193)				OnAppear7 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            			}
HXDLIN( 193)			_gthis->userButton->label->setFormat(OnAppear7,26,3496348,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 194)			_gthis->userButton->makeGraphic(150,50,0,null(),null());
HXLINE( 195)			_gthis->userButton->updateHitbox();
HXLINE( 196)			_gthis->userButton->set_visible(false);
HXLINE( 197)			{
HXLINE( 197)				 ::flixel::ui::FlxButton _this1 = _gthis->userButton;
HXDLIN( 197)				::String Text1;
HXDLIN( 197)				if (::hx::IsEq( _gthis->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 197)					Text1 = HX_("Next",13,b1,db,33);
            				}
            				else {
HXLINE( 197)					Text1 = HX_W(u"\u0414\u0430\u043b\u0435\u0435",6e19,a000);
            				}
HXDLIN( 197)				if (::hx::IsNull( _this1->label )) {
HXLINE( 197)					if (::hx::IsNotNull( Text1 )) {
HXLINE( 197)						_this1->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this1->x + _this1->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this1->y + _this1->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text1,null(),null()));
HXDLIN( 197)						_this1->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 197)						_this1->label->set_alpha(_this1->labelAlphas->__get(_this1->status));
HXDLIN( 197)						_this1->label->drawFrame(true);
            					}
            				}
            				else {
HXLINE( 197)					_this1->label->set_text(Text1);
            				}
            			}
HXLINE( 198)			_gthis->add(_gthis->userButton).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(0)
            			 ::states::BIOState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_202_create)
HXLINE( 202)				return  ::states::BIOState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_202_create)
HXLINE( 202)			::states::LoadState_obj::setLoadingScreen(1000,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_7())));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_59_create)
HXDLIN(  59)		 ::states::OOBEState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)		this->super::create();
HXLINE(  61)		::flixel::FlxG_obj::sound->volumeDownKeys = null();
HXLINE(  62)		::flixel::FlxG_obj::sound->volumeUpKeys = null();
HXLINE(  63)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  64)		::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
HXLINE(  65)		if (::sys::FileSystem_obj::exists(HX_("assets/data/settings.json",fa,e4,b3,61))) {
HXLINE(  69)			::String data = ::sys::io::File_obj::getContent(HX_("assets/data/settings.json",fa,e4,b3,61));
HXLINE(  70)			this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE(  73)		if (::sys::FileSystem_obj::exists(HX_("assets/Windows/mbr.json",71,7f,52,64))) {
HXLINE(  77)			::String data1 = ::sys::io::File_obj::getContent(HX_("assets/Windows/mbr.json",71,7f,52,64));
HXLINE(  78)			this->l =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data1)->doParse();
            		}
HXLINE(  82)		 ::Dynamic OnAppear =  ::Dynamic(new _hx_Closure_6(_gthis));
HXLINE( 200)		 ::Dynamic exit =  ::Dynamic(new _hx_Closure_8());
HXLINE(  81)		this->mainWindows =  ::CustomWindow_obj::__alloc( HX_CTX ,1280,800,HX_("OOBE",e3,06,74,34),HX_("assets/images/icons/WindowsInstaller.png",20,59,8f,2a),OnAppear,exit,true);
HXLINE( 204)		{
HXLINE( 204)			 ::CustomWindow _this = this->mainWindows;
HXDLIN( 204)			int axes = 17;
HXDLIN( 204)			bool _hx_tmp;
HXDLIN( 204)			if ((axes != 1)) {
HXLINE( 204)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 204)				_hx_tmp = true;
            			}
HXDLIN( 204)			if (_hx_tmp) {
HXLINE( 204)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 204)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 204)			bool _hx_tmp2;
HXDLIN( 204)			if ((axes != 16)) {
HXLINE( 204)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 204)				_hx_tmp2 = true;
            			}
HXDLIN( 204)			if (_hx_tmp2) {
HXLINE( 204)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 204)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 205)		this->add(this->mainWindows);
            	}


void OOBEState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_df91211b5f7f367b_209_update)
HXLINE( 210)		this->super::update(elapsed);
HXLINE( 212)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 212)		if (_this->keyManager->checkStatusUnsafe(121,_this->status)) {
HXLINE( 214)			 ::applications::ConsoleApp test =  ::applications::ConsoleApp_obj::__alloc( HX_CTX );
HXLINE( 215)			this->add(test);
            		}
HXLINE( 218)		this->background->set_x(this->mainWindows->x);
HXLINE( 219)		this->background->set_y(this->mainWindows->y);
HXLINE( 221)		this->languageText->set_x((this->mainWindows->x + 375));
HXLINE( 222)		this->languageText->set_y((this->mainWindows->y + 75));
HXLINE( 224)		this->en->set_x((this->mainWindows->x + 250));
HXLINE( 225)		this->en->set_y((this->mainWindows->y + 250));
HXLINE( 227)		this->ru->set_x((this->mainWindows->x + 400));
HXLINE( 228)		this->ru->set_y((this->mainWindows->y + 250));
HXLINE( 230)		this->NextButtonLanguage->set_x((this->mainWindows->x + 1000));
HXLINE( 231)		this->NextButtonLanguage->set_y((this->mainWindows->y + 650));
HXLINE( 233)		this->userText->set_x((this->mainWindows->x + 125));
HXLINE( 234)		this->userText->set_y((this->mainWindows->y + 75));
HXLINE( 235)		::String _hx_tmp;
HXDLIN( 235)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 235)			_hx_tmp = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 235)			_hx_tmp = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 235)		this->userText->set_font(_hx_tmp);
HXLINE( 236)		::String _hx_tmp1;
HXDLIN( 236)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 236)			_hx_tmp1 = HX_("Please, write name of your user",c5,51,5a,f0);
            		}
            		else {
HXLINE( 236)			_hx_tmp1 = HX_W(u"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0438\u043c\u044f \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438",5849,0059);
            		}
HXDLIN( 236)		this->userText->set_text(_hx_tmp1);
HXLINE( 238)		this->inputUserText->set_x((this->mainWindows->x + 125));
HXLINE( 239)		this->inputUserText->set_y((this->mainWindows->y + 150));
HXLINE( 241)		this->inputPassword->set_x((this->mainWindows->x + 125));
HXLINE( 242)		this->inputPassword->set_y((this->mainWindows->y + 185));
HXLINE( 244)		this->userButton->set_x((this->mainWindows->x + 1000));
HXLINE( 245)		this->userButton->set_y((this->mainWindows->y + 650));
HXLINE( 246)		::String _hx_tmp2;
HXDLIN( 246)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 246)			_hx_tmp2 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 246)			_hx_tmp2 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 246)		this->userButton->label->setFormat(_hx_tmp2,26,3496348,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 247)		{
HXLINE( 247)			 ::flixel::ui::FlxButton _this1 = this->userButton;
HXDLIN( 247)			::String Text;
HXDLIN( 247)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 247)				Text = HX_("Next",13,b1,db,33);
            			}
            			else {
HXLINE( 247)				Text = HX_W(u"\u0414\u0430\u043b\u0435\u0435",6e19,a000);
            			}
HXDLIN( 247)			if (::hx::IsNull( _this1->label )) {
HXLINE( 247)				if (::hx::IsNotNull( Text )) {
HXLINE( 247)					_this1->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this1->x + _this1->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this1->y + _this1->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text,null(),null()));
HXDLIN( 247)					_this1->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 247)					_this1->label->set_alpha(_this1->labelAlphas->__get(_this1->status));
HXDLIN( 247)					_this1->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE( 247)				_this1->label->set_text(Text);
            			}
            		}
HXLINE( 249)		this->storedText = this->inputUserText->text;
HXLINE( 250)		this->storedPassword = this->inputPassword->text;
            	}


void OOBEState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_df91211b5f7f367b_252_destroy)
HXLINE( 253)		this->super::destroy();
HXLINE( 254)		::flixel::FlxG_obj::bitmap->clearCache();
HXLINE( 255)		::flixel::FlxG_obj::bitmap->dumpCache();
            	}



::hx::ObjectPtr< OOBEState_obj > OOBEState_obj::__new() {
	::hx::ObjectPtr< OOBEState_obj > __this = new OOBEState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< OOBEState_obj > OOBEState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	OOBEState_obj *__this = (OOBEState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OOBEState_obj), true, "states.OOBEState"));
	*(void **)__this = OOBEState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

OOBEState_obj::OOBEState_obj()
{
}

void OOBEState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OOBEState);
	HX_MARK_MEMBER_NAME(afterLoading,"afterLoading");
	HX_MARK_MEMBER_NAME(allow,"allow");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(l,"l");
	HX_MARK_MEMBER_NAME(languageText,"languageText");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(en,"en");
	HX_MARK_MEMBER_NAME(ru,"ru");
	HX_MARK_MEMBER_NAME(isEn,"isEn");
	HX_MARK_MEMBER_NAME(isRu,"isRu");
	HX_MARK_MEMBER_NAME(NextButtonLanguage,"NextButtonLanguage");
	HX_MARK_MEMBER_NAME(userText,"userText");
	HX_MARK_MEMBER_NAME(inputUserText,"inputUserText");
	HX_MARK_MEMBER_NAME(inputPassword,"inputPassword");
	HX_MARK_MEMBER_NAME(storedPassword,"storedPassword");
	HX_MARK_MEMBER_NAME(userButton,"userButton");
	HX_MARK_MEMBER_NAME(storedText,"storedText");
	HX_MARK_MEMBER_NAME(mainWindows,"mainWindows");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OOBEState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(afterLoading,"afterLoading");
	HX_VISIT_MEMBER_NAME(allow,"allow");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(l,"l");
	HX_VISIT_MEMBER_NAME(languageText,"languageText");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(en,"en");
	HX_VISIT_MEMBER_NAME(ru,"ru");
	HX_VISIT_MEMBER_NAME(isEn,"isEn");
	HX_VISIT_MEMBER_NAME(isRu,"isRu");
	HX_VISIT_MEMBER_NAME(NextButtonLanguage,"NextButtonLanguage");
	HX_VISIT_MEMBER_NAME(userText,"userText");
	HX_VISIT_MEMBER_NAME(inputUserText,"inputUserText");
	HX_VISIT_MEMBER_NAME(inputPassword,"inputPassword");
	HX_VISIT_MEMBER_NAME(storedPassword,"storedPassword");
	HX_VISIT_MEMBER_NAME(userButton,"userButton");
	HX_VISIT_MEMBER_NAME(storedText,"storedText");
	HX_VISIT_MEMBER_NAME(mainWindows,"mainWindows");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OOBEState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		if (HX_FIELD_EQ(inName,"l") ) { return ::hx::Val( l ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"en") ) { return ::hx::Val( en ); }
		if (HX_FIELD_EQ(inName,"ru") ) { return ::hx::Val( ru ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"isEn") ) { return ::hx::Val( isEn ); }
		if (HX_FIELD_EQ(inName,"isRu") ) { return ::hx::Val( isRu ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"allow") ) { return ::hx::Val( allow ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userText") ) { return ::hx::Val( userText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"userButton") ) { return ::hx::Val( userButton ); }
		if (HX_FIELD_EQ(inName,"storedText") ) { return ::hx::Val( storedText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mainWindows") ) { return ::hx::Val( mainWindows ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"afterLoading") ) { return ::hx::Val( afterLoading ); }
		if (HX_FIELD_EQ(inName,"languageText") ) { return ::hx::Val( languageText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputUserText") ) { return ::hx::Val( inputUserText ); }
		if (HX_FIELD_EQ(inName,"inputPassword") ) { return ::hx::Val( inputPassword ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"storedPassword") ) { return ::hx::Val( storedPassword ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"NextButtonLanguage") ) { return ::hx::Val( NextButtonLanguage ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OOBEState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l") ) { l=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"en") ) { en=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ru") ) { ru=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"isEn") ) { isEn=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isRu") ) { isRu=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"allow") ) { allow=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userText") ) { userText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"userButton") ) { userButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storedText") ) { storedText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mainWindows") ) { mainWindows=inValue.Cast<  ::CustomWindow >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"afterLoading") ) { afterLoading=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"languageText") ) { languageText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputUserText") ) { inputUserText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputPassword") ) { inputPassword=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"storedPassword") ) { storedPassword=inValue.Cast< ::String >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"NextButtonLanguage") ) { NextButtonLanguage=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OOBEState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("afterLoading",c0,cb,de,eb));
	outFields->push(HX_("allow",89,a4,93,21));
	outFields->push(HX_("o",6f,00,00,00));
	outFields->push(HX_("l",6c,00,00,00));
	outFields->push(HX_("languageText",25,85,e7,83));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("en",69,58,00,00));
	outFields->push(HX_("ru",c3,63,00,00));
	outFields->push(HX_("isEn",f3,e6,be,45));
	outFields->push(HX_("isRu",4d,f2,be,45));
	outFields->push(HX_("NextButtonLanguage",dd,c0,33,be));
	outFields->push(HX_("userText",98,0c,bf,0f));
	outFields->push(HX_("inputUserText",c2,a6,60,9e));
	outFields->push(HX_("inputPassword",45,bd,71,d7));
	outFields->push(HX_("storedPassword",9e,cb,51,5a));
	outFields->push(HX_("userButton",9d,b2,65,c8));
	outFields->push(HX_("storedText",b0,37,36,76));
	outFields->push(HX_("mainWindows",4a,37,62,89));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OOBEState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(OOBEState_obj,afterLoading),HX_("afterLoading",c0,cb,de,eb)},
	{::hx::fsBool,(int)offsetof(OOBEState_obj,allow),HX_("allow",89,a4,93,21)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(OOBEState_obj,o),HX_("o",6f,00,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(OOBEState_obj,l),HX_("l",6c,00,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OOBEState_obj,languageText),HX_("languageText",25,85,e7,83)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OOBEState_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(OOBEState_obj,en),HX_("en",69,58,00,00)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(OOBEState_obj,ru),HX_("ru",c3,63,00,00)},
	{::hx::fsBool,(int)offsetof(OOBEState_obj,isEn),HX_("isEn",f3,e6,be,45)},
	{::hx::fsBool,(int)offsetof(OOBEState_obj,isRu),HX_("isRu",4d,f2,be,45)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(OOBEState_obj,NextButtonLanguage),HX_("NextButtonLanguage",dd,c0,33,be)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OOBEState_obj,userText),HX_("userText",98,0c,bf,0f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(OOBEState_obj,inputUserText),HX_("inputUserText",c2,a6,60,9e)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(OOBEState_obj,inputPassword),HX_("inputPassword",45,bd,71,d7)},
	{::hx::fsString,(int)offsetof(OOBEState_obj,storedPassword),HX_("storedPassword",9e,cb,51,5a)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(OOBEState_obj,userButton),HX_("userButton",9d,b2,65,c8)},
	{::hx::fsString,(int)offsetof(OOBEState_obj,storedText),HX_("storedText",b0,37,36,76)},
	{::hx::fsObject /*  ::CustomWindow */ ,(int)offsetof(OOBEState_obj,mainWindows),HX_("mainWindows",4a,37,62,89)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OOBEState_obj_sStaticStorageInfo = 0;
#endif

static ::String OOBEState_obj_sMemberFields[] = {
	HX_("afterLoading",c0,cb,de,eb),
	HX_("allow",89,a4,93,21),
	HX_("o",6f,00,00,00),
	HX_("l",6c,00,00,00),
	HX_("languageText",25,85,e7,83),
	HX_("background",ee,93,1d,26),
	HX_("en",69,58,00,00),
	HX_("ru",c3,63,00,00),
	HX_("isEn",f3,e6,be,45),
	HX_("isRu",4d,f2,be,45),
	HX_("NextButtonLanguage",dd,c0,33,be),
	HX_("userText",98,0c,bf,0f),
	HX_("inputUserText",c2,a6,60,9e),
	HX_("inputPassword",45,bd,71,d7),
	HX_("storedPassword",9e,cb,51,5a),
	HX_("userButton",9d,b2,65,c8),
	HX_("storedText",b0,37,36,76),
	HX_("mainWindows",4a,37,62,89),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class OOBEState_obj::__mClass;

void OOBEState_obj::__register()
{
	OOBEState_obj _hx_dummy;
	OOBEState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.OOBEState",02,52,d0,e2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OOBEState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OOBEState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OOBEState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OOBEState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
