// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Console
#include <Console.h>
#endif
#ifndef INCLUDED_CustomWindow
#include <CustomWindow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_BIOState
#include <states/BIOState.h>
#endif
#ifndef INCLUDED_states_LoadState
#include <states/LoadState.h>
#endif
#ifndef INCLUDED_states_MBRstate
#include <states/MBRstate.h>
#endif
#ifndef INCLUDED_states_OOBEState
#include <states/OOBEState.h>
#endif
#ifndef INCLUDED_states_WindowsState
#include <states/WindowsState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_22_new,"states.MBRstate","new",0xec668b32,"states.MBRstate.new","states/MBRstate.hx",22,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_47_create,"states.MBRstate","create",0x63bbbb6a,"states.MBRstate.create","states/MBRstate.hx",47,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_30_create,"states.MBRstate","create",0x63bbbb6a,"states.MBRstate.create","states/MBRstate.hx",30,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_52_update,"states.MBRstate","update",0x6eb1da77,"states.MBRstate.update","states/MBRstate.hx",52,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_57_update,"states.MBRstate","update",0x6eb1da77,"states.MBRstate.update","states/MBRstate.hx",57,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_69_update,"states.MBRstate","update",0x6eb1da77,"states.MBRstate.update","states/MBRstate.hx",69,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_77_update,"states.MBRstate","update",0x6eb1da77,"states.MBRstate.update","states/MBRstate.hx",77,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_87_update,"states.MBRstate","update",0x6eb1da77,"states.MBRstate.update","states/MBRstate.hx",87,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_104_update,"states.MBRstate","update",0x6eb1da77,"states.MBRstate.update","states/MBRstate.hx",104,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_110_update,"states.MBRstate","update",0x6eb1da77,"states.MBRstate.update","states/MBRstate.hx",110,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_121_update,"states.MBRstate","update",0x6eb1da77,"states.MBRstate.update","states/MBRstate.hx",121,0x1171ce1d)
HX_LOCAL_STACK_FRAME(_hx_pos_c55aabf1f5d655dd_130_destroy,"states.MBRstate","destroy",0xf3a3b8cc,"states.MBRstate.destroy","states/MBRstate.hx",130,0x1171ce1d)
namespace states{

void MBRstate_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_22_new)
HXLINE(  28)		this->allow = false;
HXLINE(  26)		this->checkMBRstatus = false;
HXLINE(  22)		super::__construct();
            	}

Dynamic MBRstate_obj::__CreateEmpty() { return new MBRstate_obj; }

void *MBRstate_obj::_hx_vtable = 0;

Dynamic MBRstate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MBRstate_obj > _hx_result = new MBRstate_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MBRstate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c795c9f) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x7c795c9f;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7fe30866;
	}
}

void MBRstate_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::MBRstate,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_47_create)
HXLINE(  47)			_gthis->checkMBRstatus = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_30_create)
HXDLIN(  30)		 ::states::MBRstate _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  31)		this->super::create();
HXLINE(  33)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  34)		::flixel::FlxG_obj::autoPause = false;
HXLINE(  35)		if (::sys::FileSystem_obj::exists(HX_("assets/data/settings.json",fa,e4,b3,61))) {
HXLINE(  39)			::String data = ::sys::io::File_obj::getContent(HX_("assets/data/settings.json",fa,e4,b3,61));
HXLINE(  40)			this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE(  44)		this->textMBR =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 60),0,HX_("Checking... MBR File",eb,80,ec,07),42,null());
HXLINE(  45)		this->add(this->textMBR);
HXLINE(  46)		 ::Dynamic MBRSTATUS =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN(  46)		::haxe::Timer_obj::delay(MBRSTATUS,2000);
            	}


void MBRstate_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_52_update)
HXLINE(  53)		this->super::update(elapsed);
HXLINE(  55)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  55)		if (_this->keyManager->checkStatusUnsafe(121,_this->status)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::Console _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_57_update)
HXLINE(  57)				return  ::Console_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(  57)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  57)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  57)			bool _hx_tmp;
HXDLIN(  57)			if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  57)				_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            			}
            			else {
HXLINE(  57)				_hx_tmp = true;
            			}
HXDLIN(  57)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_57_update)
HXLINE(  57)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  57)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  57)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  57)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            			}
            		}
HXLINE(  59)		bool _hx_tmp1;
HXDLIN(  59)		bool _hx_tmp2;
HXDLIN(  59)		if (::hx::IsEq( this->o->__Field(HX_("isWindowsInstalled",41,af,3b,c7),::hx::paccDynamic),false )) {
HXLINE(  59)			_hx_tmp2 = (this->checkMBRstatus == true);
            		}
            		else {
HXLINE(  59)			_hx_tmp2 = false;
            		}
HXDLIN(  59)		if (_hx_tmp2) {
HXLINE(  59)			_hx_tmp1 = (this->allow == false);
            		}
            		else {
HXLINE(  59)			_hx_tmp1 = false;
            		}
HXDLIN(  59)		if (_hx_tmp1) {
HXLINE(  61)			::String folderPath = HX_("assets/Windows",97,fd,1c,94);
HXLINE(  62)			::String filePath = (folderPath + HX_("/mbr.json",e8,67,8a,57));
HXLINE(  65)			if (!(::sys::FileSystem_obj::exists(filePath))) {
HXLINE(  67)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  67)				if (_this1->keyManager->checkStatusUnsafe(27,_this1->status)) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            					 ::states::BIOState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_69_update)
HXLINE(  69)						return  ::states::BIOState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

HXLINE(  69)					 ::Dynamic nextState1 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_2()));
HXDLIN(  69)					 ::flixel::FlxState stateOnCall1 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  69)					bool _hx_tmp3;
HXDLIN(  69)					if (::Std_obj::isOfType(nextState1,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  69)						_hx_tmp3 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState1) ));
            					}
            					else {
HXLINE(  69)						_hx_tmp3 = true;
            					}
HXDLIN(  69)					if (_hx_tmp3) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,nextState1, ::flixel::FlxState,stateOnCall1) HXARGC(0)
            						void _hx_run(){
            							HX_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_69_update)
HXLINE(  69)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall1 )) {
HXLINE(  69)								::flixel::FlxG_obj::game->_nextState = nextState1;
            							}
            							else {
HXLINE(  69)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  69)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_3(nextState1,stateOnCall1)));
            					}
            				}
HXLINE(  71)				this->textMBR->set_text(HX_("MBR File not Found or it corrupdet, Please Install/Reinstall Windows",9d,e3,0e,92));
            			}
HXLINE(  73)			bool _hx_tmp4;
HXDLIN(  73)			if (::sys::FileSystem_obj::exists(folderPath)) {
HXLINE(  73)				_hx_tmp4 = ::hx::IsEq( this->o->__Field(HX_("isWindowsInstalled",41,af,3b,c7),::hx::paccDynamic),false );
            			}
            			else {
HXLINE(  73)				_hx_tmp4 = false;
            			}
HXDLIN(  73)			if (_hx_tmp4) {
HXLINE(  75)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  75)				if (_this2->keyManager->checkStatusUnsafe(27,_this2->status)) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            					 ::states::BIOState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_77_update)
HXLINE(  77)						return  ::states::BIOState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

HXLINE(  77)					 ::Dynamic nextState2 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_4()));
HXDLIN(  77)					 ::flixel::FlxState stateOnCall2 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  77)					bool _hx_tmp5;
HXDLIN(  77)					if (::Std_obj::isOfType(nextState2,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  77)						_hx_tmp5 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState2) ));
            					}
            					else {
HXLINE(  77)						_hx_tmp5 = true;
            					}
HXDLIN(  77)					if (_hx_tmp5) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::Dynamic,nextState2, ::flixel::FlxState,stateOnCall2) HXARGC(0)
            						void _hx_run(){
            							HX_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_77_update)
HXLINE(  77)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall2 )) {
HXLINE(  77)								::flixel::FlxG_obj::game->_nextState = nextState2;
            							}
            							else {
HXLINE(  77)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  77)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_5(nextState2,stateOnCall2)));
            					}
            				}
HXLINE(  79)				this->textMBR->set_y(( (Float)((::flixel::FlxG_obj::height - 100)) ));
HXLINE(  80)				this->textMBR->set_text(HX_("Windows Folder Find, Please Fix MBR\nPress F10 to Open Console",c2,bc,cb,3e));
            			}
            		}
HXLINE(  85)		bool _hx_tmp6;
HXDLIN(  85)		bool _hx_tmp7;
HXDLIN(  85)		if (::hx::IsEq( this->o->__Field(HX_("isWindowsInstalled",41,af,3b,c7),::hx::paccDynamic),true )) {
HXLINE(  85)			_hx_tmp7 = (this->checkMBRstatus == true);
            		}
            		else {
HXLINE(  85)			_hx_tmp7 = false;
            		}
HXDLIN(  85)		if (_hx_tmp7) {
HXLINE(  85)			_hx_tmp6 = ::hx::IsEq( this->o->__Field(HX_("OOBE",e3,06,74,34),::hx::paccDynamic),true );
            		}
            		else {
HXLINE(  85)			_hx_tmp6 = false;
            		}
HXDLIN(  85)		if (_hx_tmp6) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(0)
            			 ::states::OOBEState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_87_update)
HXLINE(  87)				return  ::states::OOBEState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(  87)			::states::LoadState_obj::setLoadingScreen(2000,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_6())));
            		}
HXLINE(  89)		bool _hx_tmp8;
HXDLIN(  89)		bool _hx_tmp9;
HXDLIN(  89)		if (::hx::IsEq( this->o->__Field(HX_("isWindowsInstalled",41,af,3b,c7),::hx::paccDynamic),true )) {
HXLINE(  89)			_hx_tmp9 = (this->checkMBRstatus == true);
            		}
            		else {
HXLINE(  89)			_hx_tmp9 = false;
            		}
HXDLIN(  89)		if (_hx_tmp9) {
HXLINE(  89)			_hx_tmp8 = ::hx::IsEq( this->o->__Field(HX_("OOBE",e3,06,74,34),::hx::paccDynamic),false );
            		}
            		else {
HXLINE(  89)			_hx_tmp8 = false;
            		}
HXDLIN(  89)		if (_hx_tmp8) {
HXLINE(  91)			::String folderPat = HX_("assets/Windows",97,fd,1c,94);
HXLINE(  92)			::String filePat = (folderPat + HX_("/mbr.json",e8,67,8a,57));
HXLINE(  95)			if (::sys::FileSystem_obj::exists(filePat)) {
HXLINE(  99)				::String dat = ::sys::io::File_obj::getContent(HX_("assets/Windows/mbr.json",71,7f,52,64));
HXLINE( 100)				this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,dat)->doParse();
HXLINE( 102)				if (::hx::IsEq( this->o->__Field(HX_("bootloader",c5,fd,36,10),::hx::paccDynamic),HX_("MBR",5d,a7,3a,00) )) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(0)
            					 ::states::WindowsState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_104_update)
HXLINE( 104)						return  ::states::WindowsState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

HXLINE( 104)					 ::Dynamic nextState3 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_7()));
HXDLIN( 104)					 ::flixel::FlxState stateOnCall3 = ::flixel::FlxG_obj::game->_state;
HXDLIN( 104)					bool _hx_tmp10;
HXDLIN( 104)					if (::Std_obj::isOfType(nextState3,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 104)						_hx_tmp10 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState3) ));
            					}
            					else {
HXLINE( 104)						_hx_tmp10 = true;
            					}
HXDLIN( 104)					if (_hx_tmp10) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_8, ::flixel::FlxState,stateOnCall3, ::Dynamic,nextState3) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_104_update)
HXLINE( 104)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall3 )) {
HXLINE( 104)								::flixel::FlxG_obj::game->_nextState = nextState3;
            							}
            							else {
HXLINE( 104)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 104)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_8(stateOnCall3,nextState3)));
            					}
            				}
HXLINE( 106)				if (::hx::IsNotEq( this->o->__Field(HX_("bootloader",c5,fd,36,10),::hx::paccDynamic),HX_("MBR",5d,a7,3a,00) )) {
HXLINE( 108)					 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 108)					if (_this3->keyManager->checkStatusUnsafe(27,_this3->status)) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(0)
            						 ::states::BIOState _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_110_update)
HXLINE( 110)							return  ::states::BIOState_obj::__alloc( HX_CTX );
            						}
            						HX_END_LOCAL_FUNC0(return)

HXLINE( 110)						 ::Dynamic nextState4 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_9()));
HXDLIN( 110)						 ::flixel::FlxState stateOnCall4 = ::flixel::FlxG_obj::game->_state;
HXDLIN( 110)						bool _hx_tmp11;
HXDLIN( 110)						if (::Std_obj::isOfType(nextState4,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 110)							_hx_tmp11 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState4) ));
            						}
            						else {
HXLINE( 110)							_hx_tmp11 = true;
            						}
HXDLIN( 110)						if (_hx_tmp11) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_10, ::Dynamic,nextState4, ::flixel::FlxState,stateOnCall4) HXARGC(0)
            							void _hx_run(){
            								HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_110_update)
HXLINE( 110)								if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall4 )) {
HXLINE( 110)									::flixel::FlxG_obj::game->_nextState = nextState4;
            								}
            								else {
HXLINE( 110)									::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            								}
            							}
            							HX_END_LOCAL_FUNC0((void))

HXLINE( 110)							::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_10(nextState4,stateOnCall4)));
            						}
            					}
HXLINE( 112)					this->textMBR->set_text(HX_("MBR File not Found or it corrupdet, Please Install/Reinstall Windows",9d,e3,0e,92));
            				}
            			}
HXLINE( 117)			if (!(::sys::FileSystem_obj::exists(filePat))) {
HXLINE( 119)				 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 119)				if (_this4->keyManager->checkStatusUnsafe(27,_this4->status)) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_11) HXARGC(0)
            					 ::states::BIOState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_121_update)
HXLINE( 121)						return  ::states::BIOState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

HXLINE( 121)					 ::Dynamic nextState5 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_11()));
HXDLIN( 121)					 ::flixel::FlxState stateOnCall5 = ::flixel::FlxG_obj::game->_state;
HXDLIN( 121)					bool _hx_tmp12;
HXDLIN( 121)					if (::Std_obj::isOfType(nextState5,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 121)						_hx_tmp12 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState5) ));
            					}
            					else {
HXLINE( 121)						_hx_tmp12 = true;
            					}
HXDLIN( 121)					if (_hx_tmp12) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_12, ::flixel::FlxState,stateOnCall5, ::Dynamic,nextState5) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_121_update)
HXLINE( 121)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall5 )) {
HXLINE( 121)								::flixel::FlxG_obj::game->_nextState = nextState5;
            							}
            							else {
HXLINE( 121)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 121)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_12(stateOnCall5,nextState5)));
            					}
            				}
HXLINE( 123)				this->textMBR->set_text(HX_("MBR File not Found or it corrupdet, Please Install/Reinstall Windows",9d,e3,0e,92));
            			}
            		}
            	}


void MBRstate_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_c55aabf1f5d655dd_130_destroy)
HXDLIN( 130)		this->super::destroy();
            	}



::hx::ObjectPtr< MBRstate_obj > MBRstate_obj::__new() {
	::hx::ObjectPtr< MBRstate_obj > __this = new MBRstate_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MBRstate_obj > MBRstate_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MBRstate_obj *__this = (MBRstate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MBRstate_obj), true, "states.MBRstate"));
	*(void **)__this = MBRstate_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MBRstate_obj::MBRstate_obj()
{
}

void MBRstate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MBRstate);
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(textMBR,"textMBR");
	HX_MARK_MEMBER_NAME(checkMBRstatus,"checkMBRstatus");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(allow,"allow");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MBRstate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(textMBR,"textMBR");
	HX_VISIT_MEMBER_NAME(checkMBRstatus,"checkMBRstatus");
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(allow,"allow");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MBRstate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error ); }
		if (HX_FIELD_EQ(inName,"allow") ) { return ::hx::Val( allow ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textMBR") ) { return ::hx::Val( textMBR ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"checkMBRstatus") ) { return ::hx::Val( checkMBRstatus ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MBRstate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast<  ::CustomWindow >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allow") ) { allow=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textMBR") ) { textMBR=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"checkMBRstatus") ) { checkMBRstatus=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MBRstate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("o",6f,00,00,00));
	outFields->push(HX_("textMBR",d0,44,c2,9e));
	outFields->push(HX_("checkMBRstatus",87,00,5e,4e));
	outFields->push(HX_("error",c8,cb,29,73));
	outFields->push(HX_("allow",89,a4,93,21));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MBRstate_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(MBRstate_obj,o),HX_("o",6f,00,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MBRstate_obj,textMBR),HX_("textMBR",d0,44,c2,9e)},
	{::hx::fsBool,(int)offsetof(MBRstate_obj,checkMBRstatus),HX_("checkMBRstatus",87,00,5e,4e)},
	{::hx::fsObject /*  ::CustomWindow */ ,(int)offsetof(MBRstate_obj,error),HX_("error",c8,cb,29,73)},
	{::hx::fsBool,(int)offsetof(MBRstate_obj,allow),HX_("allow",89,a4,93,21)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MBRstate_obj_sStaticStorageInfo = 0;
#endif

static ::String MBRstate_obj_sMemberFields[] = {
	HX_("o",6f,00,00,00),
	HX_("textMBR",d0,44,c2,9e),
	HX_("checkMBRstatus",87,00,5e,4e),
	HX_("error",c8,cb,29,73),
	HX_("allow",89,a4,93,21),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class MBRstate_obj::__mClass;

void MBRstate_obj::__register()
{
	MBRstate_obj _hx_dummy;
	MBRstate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.MBRstate",40,ca,d8,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MBRstate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MBRstate_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MBRstate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MBRstate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
