// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_CustomWindow
#include <CustomWindow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_applications_ConsoleApp
#include <applications/ConsoleApp.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_BIOState
#include <states/BIOState.h>
#endif
#ifndef INCLUDED_states_SetupState
#include <states/SetupState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_db04e9e3911e609e_30_new,"states.SetupState","new",0x0b5b1712,"states.SetupState.new","states/SetupState.hx",30,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_61_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",61,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_79_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",79,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_84_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",84,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_86_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",86,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_98_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",98,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_111_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",111,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_171_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",171,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_191_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",191,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_215_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",215,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_221_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",221,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_242_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",242,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_251_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",251,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_261_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",261,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_243_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",243,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_279_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",279,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_298_create,"states.SetupState","create",0x89ffdb8a,"states.SetupState.create","states/SetupState.hx",298,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_305_update,"states.SetupState","update",0x94f5fa97,"states.SetupState.update","states/SetupState.hx",305,0x2fc943fd)
HX_LOCAL_STACK_FRAME(_hx_pos_db04e9e3911e609e_325_destroy,"states.SetupState","destroy",0x48fbb4ac,"states.SetupState.destroy","states/SetupState.hx",325,0x2fc943fd)
namespace states{

void SetupState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_db04e9e3911e609e_30_new)
HXLINE(  57)		this->allowText = false;
HXLINE(  56)		this->ready = false;
HXLINE(  43)		this->allow = false;
HXLINE(  41)		this->alsoClick = true;
HXLINE(  33)		this->isSystemCursor = true;
HXLINE(  30)		super::__construct();
            	}

Dynamic SetupState_obj::__CreateEmpty() { return new SetupState_obj; }

void *SetupState_obj::_hx_vtable = 0;

Dynamic SetupState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SetupState_obj > _hx_result = new SetupState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SetupState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x52ac64fe) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x52ac64fe;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void SetupState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_61_create)
HXDLIN(  61)		 ::states::SetupState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  62)		this->super::create();
HXLINE(  63)		::flixel::FlxG_obj::autoPause = false;
HXLINE(  64)		::flixel::FlxG_obj::mouse->set_useSystemCursor(this->isSystemCursor);
HXLINE(  72)		if (::sys::FileSystem_obj::exists(HX_("assets/data/settings.json",fa,e4,b3,61))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::SetupState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_79_create)
HXLINE(  80)				_gthis->o->__SetField(HX_("stepOne",7a,02,47,81),true,::hx::paccDynamic);
HXLINE(  81)				 ::Dynamic replacer = null();
HXDLIN(  81)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer,HX_("",00,00,00,00)));
HXLINE(  82)				_gthis->logoWindows->kill();
HXLINE(  83)				_gthis->installButton->kill();
HXLINE(  84)				{
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            					 ::states::SetupState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_84_create)
HXLINE(  84)						return  ::states::SetupState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

HXLINE(  84)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  84)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  84)					bool step;
HXDLIN(  84)					if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  84)						step = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            					}
            					else {
HXLINE(  84)						step = true;
            					}
HXDLIN(  84)					if (step) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_84_create)
HXLINE(  84)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  84)								::flixel::FlxG_obj::game->_nextState = nextState;
            							}
            							else {
HXLINE(  84)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  84)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::SetupState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_86_create)
HXLINE(  87)				_gthis->o->__SetField(HX_("stepTwo",a0,d5,4a,81),true,::hx::paccDynamic);
HXLINE(  88)				_gthis->o->__SetField(HX_("stepOne",7a,02,47,81),false,::hx::paccDynamic);
HXLINE(  89)				 ::Dynamic replacer = null();
HXDLIN(  89)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer,HX_("",00,00,00,00)));
HXLINE(  90)				_gthis->background->kill();
HXLINE(  91)				_gthis->bar->kill();
HXLINE(  92)				_gthis->diskChoose->kill();
HXLINE(  93)				_gthis->diskText->kill();
HXLINE(  94)				_gthis->disk->kill();
HXLINE(  95)				_gthis->nextButton->kill();
HXLINE(  96)				_gthis->text->kill();
HXLINE(  97)				_gthis->barChoose->kill();
HXLINE(  98)				{
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            					 ::states::SetupState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_98_create)
HXLINE(  98)						return  ::states::SetupState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

HXLINE(  98)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_3()));
HXDLIN(  98)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  98)					bool steptwo;
HXDLIN(  98)					if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  98)						steptwo = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            					}
            					else {
HXLINE(  98)						steptwo = true;
            					}
HXDLIN(  98)					if (steptwo) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_98_create)
HXLINE(  98)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  98)								::flixel::FlxG_obj::game->_nextState = nextState;
            							}
            							else {
HXLINE(  98)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  98)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_4(nextState,stateOnCall)));
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  76)			::String data = ::sys::io::File_obj::getContent(HX_("assets/data/settings.json",fa,e4,b3,61));
HXLINE(  77)			this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
HXLINE(  79)			 ::Dynamic step =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE(  86)			 ::Dynamic steptwo =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE( 102)			if (::hx::IsEq( this->o->__Field(HX_("isWindowsInstalled",41,af,3b,c7),::hx::paccDynamic),false )) {
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_11, ::Dynamic,steptwo, ::states::SetupState,_gthis, ::Dynamic,step) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_111_create)
HXLINE( 112)					_gthis->logoWindows =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/logo.png",23,fc,96,be));
HXLINE( 113)					{
HXLINE( 113)						 ::flixel::FlxSprite _this = _gthis->logoWindows;
HXDLIN( 113)						int axes = 17;
HXDLIN( 113)						bool name;
HXDLIN( 113)						if ((axes != 1)) {
HXLINE( 113)							name = (axes == 17);
            						}
            						else {
HXLINE( 113)							name = true;
            						}
HXDLIN( 113)						if (name) {
HXLINE( 113)							int name1 = ::flixel::FlxG_obj::width;
HXDLIN( 113)							_this->set_x(((( (Float)(name1) ) - _this->get_width()) / ( (Float)(2) )));
            						}
HXDLIN( 113)						bool name2;
HXDLIN( 113)						if ((axes != 16)) {
HXLINE( 113)							name2 = (axes == 17);
            						}
            						else {
HXLINE( 113)							name2 = true;
            						}
HXDLIN( 113)						if (name2) {
HXLINE( 113)							int name3 = ::flixel::FlxG_obj::height;
HXDLIN( 113)							_this->set_y(((( (Float)(name3) ) - _this->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE( 114)					 ::flixel::FlxSprite fh = _gthis->logoWindows;
HXDLIN( 114)					fh->set_x((fh->x + 200));
HXLINE( 115)					 ::flixel::FlxSprite fh1 = _gthis->logoWindows;
HXDLIN( 115)					fh1->set_y((fh1->y + 50));
HXLINE( 116)					_gthis->add(_gthis->logoWindows).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 118)					_gthis->installButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,null(),step);
HXLINE( 119)					{
HXLINE( 119)						 ::flixel::ui::FlxButton _this1 = _gthis->installButton;
HXDLIN( 119)						int axes1 = 17;
HXDLIN( 119)						bool name4;
HXDLIN( 119)						if ((axes1 != 1)) {
HXLINE( 119)							name4 = (axes1 == 17);
            						}
            						else {
HXLINE( 119)							name4 = true;
            						}
HXDLIN( 119)						if (name4) {
HXLINE( 119)							int name5 = ::flixel::FlxG_obj::width;
HXDLIN( 119)							_this1->set_x(((( (Float)(name5) ) - _this1->get_width()) / ( (Float)(2) )));
            						}
HXDLIN( 119)						bool name6;
HXDLIN( 119)						if ((axes1 != 16)) {
HXLINE( 119)							name6 = (axes1 == 17);
            						}
            						else {
HXLINE( 119)							name6 = true;
            						}
HXDLIN( 119)						if (name6) {
HXLINE( 119)							int name7 = ::flixel::FlxG_obj::height;
HXDLIN( 119)							_this1->set_y(((( (Float)(name7) ) - _this1->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE( 120)					_gthis->installButton->loadGraphic(HX_("assets/images/setup/installnow.png",53,d7,be,67),null(),null(),null(),null(),null());
HXLINE( 121)					 ::flixel::ui::FlxButton fh2 = _gthis->installButton;
HXDLIN( 121)					fh2->set_x((fh2->x + -50));
HXLINE( 122)					 ::flixel::ui::FlxButton fh3 = _gthis->installButton;
HXDLIN( 122)					fh3->set_y((fh3->y + 150));
HXLINE( 123)					_gthis->add(_gthis->installButton).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 125)					_gthis->start = true;
HXLINE( 127)					if (::hx::IsEq( _gthis->o->__Field(HX_("stepOne",7a,02,47,81),::hx::paccDynamic),true )) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::Dynamic,steptwo, ::states::SetupState,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_171_create)
HXLINE( 172)							bool name;
HXDLIN( 172)							if ((_gthis->ready == false)) {
HXLINE( 172)								name = (_gthis->allowText == false);
            							}
            							else {
HXLINE( 172)								name = false;
            							}
HXDLIN( 172)							if (name) {
HXLINE( 173)								_gthis->text->set_visible(true);
HXLINE( 174)								_gthis->allowText = true;
            							}
HXLINE( 178)							if ((_gthis->ready == true)) {
HXLINE( 180)								steptwo();
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::SetupState,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_191_create)
HXLINE( 192)							_gthis->barChoose->loadGraphic(HX_("assets/images/setup/choose.png",cf,16,b5,28),null(),null(),null(),null(),null());
HXLINE( 193)							_gthis->barChoose->updateHitbox();
HXLINE( 194)							_gthis->ready = true;
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 129)						_gthis->logoWindows->kill();
HXLINE( 130)						_gthis->installButton->kill();
HXLINE( 132)						_gthis->background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/bg.png",3d,7e,fe,cd));
HXLINE( 133)						{
HXLINE( 133)							 ::flixel::FlxSprite _this2 = _gthis->background;
HXDLIN( 133)							int axes2 = 17;
HXDLIN( 133)							bool name8;
HXDLIN( 133)							if ((axes2 != 1)) {
HXLINE( 133)								name8 = (axes2 == 17);
            							}
            							else {
HXLINE( 133)								name8 = true;
            							}
HXDLIN( 133)							if (name8) {
HXLINE( 133)								int name9 = ::flixel::FlxG_obj::width;
HXDLIN( 133)								_this2->set_x(((( (Float)(name9) ) - _this2->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 133)							bool name10;
HXDLIN( 133)							if ((axes2 != 16)) {
HXLINE( 133)								name10 = (axes2 == 17);
            							}
            							else {
HXLINE( 133)								name10 = true;
            							}
HXDLIN( 133)							if (name10) {
HXLINE( 133)								int name11 = ::flixel::FlxG_obj::height;
HXDLIN( 133)								_this2->set_y(((( (Float)(name11) ) - _this2->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 134)						_gthis->add(_gthis->background).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 136)						_gthis->bar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 120),HX_("assets/images/setup/bar.png",31,b5,2c,06));
HXLINE( 137)						 ::flixel::FlxSprite _gthis1 = _gthis->bar;
HXDLIN( 137)						int name12 = ::flixel::FlxG_obj::width;
HXDLIN( 137)						_gthis1->setGraphicSize(name12,_gthis->bar->get_height());
HXLINE( 138)						_gthis->bar->updateHitbox();
HXLINE( 139)						_gthis->add(_gthis->bar).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 141)						_gthis->diskText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("Where do you want to install Windows?",d3,ae,9c,13),26,null());
HXLINE( 142)						_gthis->diskText->set_color(3496348);
HXLINE( 143)						_gthis->diskText->set_font(HX_("assets/fonts/my.ttf",5b,83,ee,55));
HXLINE( 144)						{
HXLINE( 144)							 ::flixel::text::FlxText _this3 = _gthis->diskText;
HXDLIN( 144)							int axes3 = 17;
HXDLIN( 144)							bool name13;
HXDLIN( 144)							if ((axes3 != 1)) {
HXLINE( 144)								name13 = (axes3 == 17);
            							}
            							else {
HXLINE( 144)								name13 = true;
            							}
HXDLIN( 144)							if (name13) {
HXLINE( 144)								int name14 = ::flixel::FlxG_obj::width;
HXDLIN( 144)								_this3->set_x(((( (Float)(name14) ) - _this3->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 144)							bool name15;
HXDLIN( 144)							if ((axes3 != 16)) {
HXLINE( 144)								name15 = (axes3 == 17);
            							}
            							else {
HXLINE( 144)								name15 = true;
            							}
HXDLIN( 144)							if (name15) {
HXLINE( 144)								int name16 = ::flixel::FlxG_obj::height;
HXDLIN( 144)								_this3->set_y(((( (Float)(name16) ) - _this3->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 145)						 ::flixel::text::FlxText fh4 = _gthis->diskText;
HXDLIN( 145)						fh4->set_y((fh4->y - ( (Float)(235) )));
HXLINE( 146)						 ::flixel::text::FlxText fh5 = _gthis->diskText;
HXDLIN( 146)						fh5->set_x((fh5->x - ( (Float)(185) )));
HXLINE( 147)						_gthis->add(_gthis->diskText).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 149)						_gthis->diskChoose =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/diskChoose.png",0c,1b,ac,f2));
HXLINE( 150)						{
HXLINE( 150)							 ::flixel::FlxSprite _this4 = _gthis->diskChoose;
HXDLIN( 150)							int axes4 = 17;
HXDLIN( 150)							bool name17;
HXDLIN( 150)							if ((axes4 != 1)) {
HXLINE( 150)								name17 = (axes4 == 17);
            							}
            							else {
HXLINE( 150)								name17 = true;
            							}
HXDLIN( 150)							if (name17) {
HXLINE( 150)								int name18 = ::flixel::FlxG_obj::width;
HXDLIN( 150)								_this4->set_x(((( (Float)(name18) ) - _this4->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 150)							bool name19;
HXDLIN( 150)							if ((axes4 != 16)) {
HXLINE( 150)								name19 = (axes4 == 17);
            							}
            							else {
HXLINE( 150)								name19 = true;
            							}
HXDLIN( 150)							if (name19) {
HXLINE( 150)								int name20 = ::flixel::FlxG_obj::height;
HXDLIN( 150)								_this4->set_y(((( (Float)(name20) ) - _this4->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 151)						_gthis->add(_gthis->diskChoose).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 153)						_gthis->disk =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/disk.png",c3,71,d5,d9));
HXLINE( 154)						{
HXLINE( 154)							 ::flixel::FlxSprite _this5 = _gthis->disk;
HXDLIN( 154)							int axes5 = 17;
HXDLIN( 154)							bool name21;
HXDLIN( 154)							if ((axes5 != 1)) {
HXLINE( 154)								name21 = (axes5 == 17);
            							}
            							else {
HXLINE( 154)								name21 = true;
            							}
HXDLIN( 154)							if (name21) {
HXLINE( 154)								int name22 = ::flixel::FlxG_obj::width;
HXDLIN( 154)								_this5->set_x(((( (Float)(name22) ) - _this5->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 154)							bool name23;
HXDLIN( 154)							if ((axes5 != 16)) {
HXLINE( 154)								name23 = (axes5 == 17);
            							}
            							else {
HXLINE( 154)								name23 = true;
            							}
HXDLIN( 154)							if (name23) {
HXLINE( 154)								int name24 = ::flixel::FlxG_obj::height;
HXDLIN( 154)								_this5->set_y(((( (Float)(name24) ) - _this5->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 155)						_gthis->disk->setGraphicSize(60,30);
HXLINE( 156)						_gthis->disk->updateHitbox();
HXLINE( 157)						 ::flixel::FlxSprite fh6 = _gthis->disk;
HXDLIN( 157)						fh6->set_x((fh6->x - ( (Float)(300) )));
HXLINE( 158)						 ::flixel::FlxSprite fh7 = _gthis->disk;
HXDLIN( 158)						fh7->set_y((fh7->y - ( (Float)(120) )));
HXLINE( 159)						_gthis->add(_gthis->disk).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 161)						_gthis->text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("Please choose disk",30,9c,66,2f),16,null());
HXLINE( 162)						_gthis->text->set_color(10237246);
HXLINE( 163)						_gthis->text->set_font(HX_("assets/fonts/my.ttf",5b,83,ee,55));
HXLINE( 164)						{
HXLINE( 164)							 ::flixel::text::FlxText _this6 = _gthis->text;
HXDLIN( 164)							int axes6 = 17;
HXDLIN( 164)							bool name25;
HXDLIN( 164)							if ((axes6 != 1)) {
HXLINE( 164)								name25 = (axes6 == 17);
            							}
            							else {
HXLINE( 164)								name25 = true;
            							}
HXDLIN( 164)							if (name25) {
HXLINE( 164)								int name26 = ::flixel::FlxG_obj::width;
HXDLIN( 164)								_this6->set_x(((( (Float)(name26) ) - _this6->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 164)							bool name27;
HXDLIN( 164)							if ((axes6 != 16)) {
HXLINE( 164)								name27 = (axes6 == 17);
            							}
            							else {
HXLINE( 164)								name27 = true;
            							}
HXDLIN( 164)							if (name27) {
HXLINE( 164)								int name28 = ::flixel::FlxG_obj::height;
HXDLIN( 164)								_this6->set_y(((( (Float)(name28) ) - _this6->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 165)						 ::flixel::text::FlxText fh8 = _gthis->text;
HXDLIN( 165)						fh8->set_y((fh8->y + 200));
HXLINE( 166)						 ::flixel::text::FlxText fh9 = _gthis->text;
HXDLIN( 166)						fh9->set_x(fh9->x);
HXLINE( 167)						_gthis->text->set_visible(false);
HXLINE( 168)						_gthis->add(_gthis->text).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 171)						 ::Dynamic name29 =  ::Dynamic(new _hx_Closure_6(steptwo,_gthis));
HXDLIN( 171)						_gthis->nextButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("Next",13,b1,db,33),name29);
HXLINE( 183)						{
HXLINE( 183)							 ::flixel::ui::FlxButton _this7 = _gthis->nextButton;
HXDLIN( 183)							int axes7 = 17;
HXDLIN( 183)							bool name30;
HXDLIN( 183)							if ((axes7 != 1)) {
HXLINE( 183)								name30 = (axes7 == 17);
            							}
            							else {
HXLINE( 183)								name30 = true;
            							}
HXDLIN( 183)							if (name30) {
HXLINE( 183)								int name31 = ::flixel::FlxG_obj::width;
HXDLIN( 183)								_this7->set_x(((( (Float)(name31) ) - _this7->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 183)							bool name32;
HXDLIN( 183)							if ((axes7 != 16)) {
HXLINE( 183)								name32 = (axes7 == 17);
            							}
            							else {
HXLINE( 183)								name32 = true;
            							}
HXDLIN( 183)							if (name32) {
HXLINE( 183)								int name33 = ::flixel::FlxG_obj::height;
HXDLIN( 183)								_this7->set_y(((( (Float)(name33) ) - _this7->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 184)						_gthis->nextButton->setGraphicSize(60,30);
HXLINE( 185)						_gthis->nextButton->label->setFormat(HX_("assets/fonts/my.ttf",5b,83,ee,55),18,-16777216,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 186)						_gthis->nextButton->updateHitbox();
HXLINE( 187)						 ::flixel::ui::FlxButton fh10 = _gthis->nextButton;
HXDLIN( 187)						fh10->set_x((fh10->x + 450));
HXLINE( 188)						 ::flixel::ui::FlxButton fh11 = _gthis->nextButton;
HXDLIN( 188)						fh11->set_y((fh11->y + 250));
HXLINE( 189)						_gthis->add(_gthis->nextButton).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 191)						 ::Dynamic name34 =  ::Dynamic(new _hx_Closure_7(_gthis));
HXDLIN( 191)						_gthis->barChoose =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,null(),name34);
HXLINE( 196)						_gthis->barChoose->loadGraphic(HX_("assets/images/setup/none.png",f0,99,79,3b),null(),null(),null(),null(),null());
HXLINE( 197)						{
HXLINE( 197)							 ::flixel::ui::FlxButton _this8 = _gthis->barChoose;
HXDLIN( 197)							int axes8 = 17;
HXDLIN( 197)							bool name35;
HXDLIN( 197)							if ((axes8 != 1)) {
HXLINE( 197)								name35 = (axes8 == 17);
            							}
            							else {
HXLINE( 197)								name35 = true;
            							}
HXDLIN( 197)							if (name35) {
HXLINE( 197)								int name36 = ::flixel::FlxG_obj::width;
HXDLIN( 197)								_this8->set_x(((( (Float)(name36) ) - _this8->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 197)							bool name37;
HXDLIN( 197)							if ((axes8 != 16)) {
HXLINE( 197)								name37 = (axes8 == 17);
            							}
            							else {
HXLINE( 197)								name37 = true;
            							}
HXDLIN( 197)							if (name37) {
HXLINE( 197)								int name38 = ::flixel::FlxG_obj::height;
HXDLIN( 197)								_this8->set_y(((( (Float)(name38) ) - _this8->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 198)						_gthis->barChoose->setGraphicSize(780,40);
HXLINE( 199)						_gthis->barChoose->updateHitbox();
HXLINE( 200)						 ::flixel::ui::FlxButton fh12 = _gthis->barChoose;
HXDLIN( 200)						fh12->set_x((fh12->x + 10));
HXLINE( 201)						 ::flixel::ui::FlxButton fh13 = _gthis->barChoose;
HXDLIN( 201)						fh13->set_y((fh13->y - ( (Float)(140) )));
HXLINE( 202)						_gthis->add(_gthis->barChoose).StaticCast<  ::flixel::FlxBasic >();
            					}
HXLINE( 204)					if (::hx::IsEq( _gthis->o->__Field(HX_("stepTwo",a0,d5,4a,81),::hx::paccDynamic),true )) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::states::SetupState,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_215_create)
HXLINE( 216)							_gthis->o->__SetField(HX_("isWindowsInstalled",41,af,3b,c7),true,::hx::paccDynamic);
HXLINE( 217)							_gthis->o->__SetField(HX_("OOBE",e3,06,74,34),true,::hx::paccDynamic);
HXLINE( 218)							_gthis->o->__SetField(HX_("stepOne",7a,02,47,81),false,::hx::paccDynamic);
HXLINE( 219)							_gthis->o->__SetField(HX_("stepTwo",a0,d5,4a,81),false,::hx::paccDynamic);
HXLINE( 220)							 ::Dynamic replacer = null();
HXDLIN( 220)							::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer,HX_("",00,00,00,00)));
HXLINE( 221)							{
            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(0)
            								 ::states::BIOState _hx_run(){
            									HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_221_create)
HXLINE( 221)									return  ::states::BIOState_obj::__alloc( HX_CTX );
            								}
            								HX_END_LOCAL_FUNC0(return)

HXLINE( 221)								 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_8()));
HXDLIN( 221)								 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 221)								bool name;
HXDLIN( 221)								if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 221)									name = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            								}
            								else {
HXLINE( 221)									name = true;
            								}
HXDLIN( 221)								if (name) {
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_221_create)
HXLINE( 221)										if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 221)											::flixel::FlxG_obj::game->_nextState = nextState;
            										}
            										else {
HXLINE( 221)											::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            										}
            									}
            									HX_END_LOCAL_FUNC0((void))

HXLINE( 221)									::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_9(nextState,stateOnCall)));
            								}
            							}
HXLINE( 222)							::String folderPath = HX_("assets/Windows",97,fd,1c,94);
HXLINE( 223)							::String filePath = (folderPath + HX_("/mbr.json",e8,67,8a,57));
HXLINE( 226)							if (!(::sys::FileSystem_obj::exists(folderPath))) {
HXLINE( 227)								::sys::FileSystem_obj::createDirectory(folderPath);
            							}
HXLINE( 232)							::String content = HX_("{ \"bootloader\": \"MBR\", \"curLanguage\": \"en\", \"wallpaper\": \"assets/images/wallpapers/wallpaper.png\", \"FPS\": 60}",2c,49,fe,51);
HXLINE( 233)							::sys::io::File_obj::saveContent(filePath,content);
HXLINE( 234)							::haxe::Log_obj::trace((HX_("file: ",22,98,29,85) + filePath),::hx::SourceInfo(HX_("source/states/SetupState.hx",f1,04,8b,5a),234,HX_("states.SetupState",20,e6,e1,51),HX_("create",fc,66,0f,7c)));
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 206)						_gthis->logoWindows->kill();
HXLINE( 207)						_gthis->installButton->kill();
HXLINE( 210)						 ::flixel::FlxSprite barStep =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 120),HX_("assets/images/setup/barStepTwo.png",85,ed,fe,6f));
HXLINE( 211)						int name39 = ::flixel::FlxG_obj::width;
HXDLIN( 211)						barStep->setGraphicSize(name39,barStep->get_height());
HXLINE( 212)						barStep->updateHitbox();
HXLINE( 213)						_gthis->add(barStep).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 215)						 ::Dynamic name40 =  ::Dynamic(new _hx_Closure_10(_gthis));
HXDLIN( 215)						::haxe::Timer_obj::delay(name40,5000);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::states::SetupState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_242_create)
HXLINE( 242)					if ((_gthis->alsoClick == true)) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::states::SetupState,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::states::SetupState,_gthis) HXARGC(0)
            							void _hx_run(){
            								HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_251_create)
HXLINE( 251)								_gthis->o->__SetField(HX_("stepOne",7a,02,47,81),false,::hx::paccDynamic);
HXLINE( 252)								_gthis->o->__SetField(HX_("stepTwo",a0,d5,4a,81),false,::hx::paccDynamic);
HXLINE( 253)								 ::Dynamic replacer = null();
HXDLIN( 253)								::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer,HX_("",00,00,00,00)));
HXDLIN( 253)								::Sys_obj::exit(0);
            							}
            							HX_END_LOCAL_FUNC0((void))

            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::states::SetupState,_gthis) HXARGC(0)
            							void _hx_run(){
            								HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_261_create)
HXLINE( 261)								_gthis->alsoClick = true;
HXLINE( 262)								_gthis->confirmMessageBox->kill();
HXLINE( 263)								_gthis->confirmMenu->kill();
HXLINE( 264)								_gthis->confirmButtonOFF->kill();
HXLINE( 265)								_gthis->confirmButtonOK->kill();
            							}
            							HX_END_LOCAL_FUNC0((void))

            							HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_243_create)
HXLINE( 244)							::haxe::Log_obj::trace(HX_("AppearConfirmMenu",0a,9e,d1,37),::hx::SourceInfo(HX_("source/states/SetupState.hx",f1,04,8b,5a),244,HX_("states.SetupState",20,e6,e1,51),HX_("create",fc,66,0f,7c)));
HXLINE( 246)							_gthis->confirmMessageBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,350,150,HX_("assets/images/setup/confirm.png",5e,c8,7d,8f));
HXLINE( 247)							{
HXLINE( 247)								 ::flixel::FlxSprite _this = _gthis->confirmMessageBox;
HXDLIN( 247)								int axes = 17;
HXDLIN( 247)								bool name;
HXDLIN( 247)								if ((axes != 1)) {
HXLINE( 247)									name = (axes == 17);
            								}
            								else {
HXLINE( 247)									name = true;
            								}
HXDLIN( 247)								if (name) {
HXLINE( 247)									int name1 = ::flixel::FlxG_obj::width;
HXDLIN( 247)									_this->set_x(((( (Float)(name1) ) - _this->get_width()) / ( (Float)(2) )));
            								}
HXDLIN( 247)								bool name2;
HXDLIN( 247)								if ((axes != 16)) {
HXLINE( 247)									name2 = (axes == 17);
            								}
            								else {
HXLINE( 247)									name2 = true;
            								}
HXDLIN( 247)								if (name2) {
HXLINE( 247)									int name3 = ::flixel::FlxG_obj::height;
HXDLIN( 247)									_this->set_y(((( (Float)(name3) ) - _this->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE( 248)							 ::flixel::FlxSprite fh = _gthis->confirmMessageBox;
HXDLIN( 248)							fh->set_x((fh->x + 50));
HXLINE( 249)							_gthis->add(_gthis->confirmMessageBox).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 251)							 ::Dynamic name4 =  ::Dynamic(new _hx_Closure_12(_gthis));
HXDLIN( 251)							_gthis->confirmButtonOK =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("OK",1c,45,00,00),name4);
HXLINE( 254)							{
HXLINE( 254)								 ::flixel::ui::FlxButton _this1 = _gthis->confirmButtonOK;
HXDLIN( 254)								int axes1 = 17;
HXDLIN( 254)								bool name5;
HXDLIN( 254)								if ((axes1 != 1)) {
HXLINE( 254)									name5 = (axes1 == 17);
            								}
            								else {
HXLINE( 254)									name5 = true;
            								}
HXDLIN( 254)								if (name5) {
HXLINE( 254)									int name6 = ::flixel::FlxG_obj::width;
HXDLIN( 254)									_this1->set_x(((( (Float)(name6) ) - _this1->get_width()) / ( (Float)(2) )));
            								}
HXDLIN( 254)								bool name7;
HXDLIN( 254)								if ((axes1 != 16)) {
HXLINE( 254)									name7 = (axes1 == 17);
            								}
            								else {
HXLINE( 254)									name7 = true;
            								}
HXDLIN( 254)								if (name7) {
HXLINE( 254)									int name8 = ::flixel::FlxG_obj::height;
HXDLIN( 254)									_this1->set_y(((( (Float)(name8) ) - _this1->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE( 255)							 ::flixel::ui::FlxButton fh1 = _gthis->confirmButtonOK;
HXDLIN( 255)							fh1->set_y((fh1->y + 100));
HXLINE( 256)							 ::flixel::ui::FlxButton fh2 = _gthis->confirmButtonOK;
HXDLIN( 256)							fh2->set_x((fh2->x - ( (Float)(57) )));
HXLINE( 257)							_gthis->confirmButtonOK->label->setFormat(HX_("assets/fonts/my.ttf",5b,83,ee,55),16,-16777216,null(),null(),null(),null());
HXLINE( 258)							_gthis->confirmButtonOK->makeGraphic(60,20,-8355712,null(),null());
HXLINE( 259)							_gthis->add(_gthis->confirmButtonOK).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 261)							 ::Dynamic name9 =  ::Dynamic(new _hx_Closure_13(_gthis));
HXDLIN( 261)							_gthis->confirmButtonOFF =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("CANCEL",7a,99,b6,6a),name9);
HXLINE( 267)							{
HXLINE( 267)								 ::flixel::ui::FlxButton _this2 = _gthis->confirmButtonOFF;
HXDLIN( 267)								int axes2 = 17;
HXDLIN( 267)								bool name10;
HXDLIN( 267)								if ((axes2 != 1)) {
HXLINE( 267)									name10 = (axes2 == 17);
            								}
            								else {
HXLINE( 267)									name10 = true;
            								}
HXDLIN( 267)								if (name10) {
HXLINE( 267)									int name11 = ::flixel::FlxG_obj::width;
HXDLIN( 267)									_this2->set_x(((( (Float)(name11) ) - _this2->get_width()) / ( (Float)(2) )));
            								}
HXDLIN( 267)								bool name12;
HXDLIN( 267)								if ((axes2 != 16)) {
HXLINE( 267)									name12 = (axes2 == 17);
            								}
            								else {
HXLINE( 267)									name12 = true;
            								}
HXDLIN( 267)								if (name12) {
HXLINE( 267)									int name13 = ::flixel::FlxG_obj::height;
HXDLIN( 267)									_this2->set_y(((( (Float)(name13) ) - _this2->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE( 268)							 ::flixel::ui::FlxButton fh3 = _gthis->confirmButtonOFF;
HXDLIN( 268)							fh3->set_y((fh3->y + 100));
HXLINE( 269)							 ::flixel::ui::FlxButton fh4 = _gthis->confirmButtonOFF;
HXDLIN( 269)							fh4->set_x((fh4->x + 50));
HXLINE( 270)							_gthis->confirmButtonOFF->label->setFormat(HX_("assets/fonts/my.ttf",5b,83,ee,55),16,-16777216,null(),null(),null(),null());
HXLINE( 271)							_gthis->confirmButtonOFF->makeGraphic(80,20,-8355712,null(),null());
HXLINE( 272)							_gthis->add(_gthis->confirmButtonOFF).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 275)							_gthis->alsoClick = false;
            						}
            						HX_END_LOCAL_FUNC0((void))

            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::states::SetupState,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_279_create)
HXLINE( 281)							_gthis->alsoClick = true;
HXLINE( 282)							_gthis->confirmMessageBox->kill();
HXLINE( 283)							_gthis->confirmMenu->kill();
HXLINE( 284)							_gthis->confirmButtonOK->kill();
HXLINE( 285)							_gthis->confirmButtonOFF->kill();
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 243)						 ::Dynamic name =  ::Dynamic(new _hx_Closure_14(_gthis));
HXLINE( 279)						 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_15(_gthis));
HXLINE( 243)						_gthis->confirmMenu =  ::CustomWindow_obj::__alloc( HX_CTX ,600,300,HX_("Attention",7e,3d,fd,56),HX_("assets/images/icons/WindowsInstaller.png",20,59,8f,2a),name,name1,false);
HXLINE( 287)						 ::CustomWindow fh = _gthis->confirmMenu;
HXDLIN( 287)						fh->set_x((fh->x + 250));
HXLINE( 288)						 ::CustomWindow fh1 = _gthis->confirmMenu;
HXDLIN( 288)						fh1->set_y((fh1->y + 150));
HXLINE( 289)						_gthis->add(_gthis->confirmMenu).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 104)				this->backgroundSetup =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/bgsetup.png",f6,25,82,a8));
HXLINE( 105)				this->backgroundSetup->setGraphicSize(2000,2000);
HXLINE( 106)				{
HXLINE( 106)					 ::flixel::FlxSprite _this = this->backgroundSetup;
HXDLIN( 106)					int axes = 1;
HXDLIN( 106)					bool _hx_tmp;
HXDLIN( 106)					if ((axes != 1)) {
HXLINE( 106)						_hx_tmp = (axes == 17);
            					}
            					else {
HXLINE( 106)						_hx_tmp = true;
            					}
HXDLIN( 106)					if (_hx_tmp) {
HXLINE( 106)						int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 106)						_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 106)					bool _hx_tmp2;
HXDLIN( 106)					if ((axes != 16)) {
HXLINE( 106)						_hx_tmp2 = (axes == 17);
            					}
            					else {
HXLINE( 106)						_hx_tmp2 = true;
            					}
HXDLIN( 106)					if (_hx_tmp2) {
HXLINE( 106)						int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 106)						_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 107)				this->add(this->backgroundSetup);
HXLINE( 110)				 ::Dynamic name =  ::Dynamic(new _hx_Closure_11(steptwo,_gthis,step));
HXLINE( 239)				 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_16(_gthis));
HXLINE( 109)				this->windowSetupWindow =  ::CustomWindow_obj::__alloc( HX_CTX ,1000,600,HX_("Windows Setup",e0,1c,a4,bc),HX_("assets/images/icons/WindowsInstaller.png",20,59,8f,2a),name,name1,false);
HXLINE( 292)				this->add(this->windowSetupWindow);
            			}
HXLINE( 296)			if (::hx::IsEq( this->o->__Field(HX_("isWindowsInstalled",41,af,3b,c7),::hx::paccDynamic),true )) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_17) HXARGC(0)
            				 ::states::BIOState _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_298_create)
HXLINE( 298)					return  ::states::BIOState_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 298)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_17()));
HXDLIN( 298)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 298)				bool _hx_tmp4;
HXDLIN( 298)				if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 298)					_hx_tmp4 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            				}
            				else {
HXLINE( 298)					_hx_tmp4 = true;
            				}
HXDLIN( 298)				if (_hx_tmp4) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_18, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_298_create)
HXLINE( 298)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 298)							::flixel::FlxG_obj::game->_nextState = nextState;
            						}
            						else {
HXLINE( 298)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 298)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_18(nextState,stateOnCall)));
            				}
            			}
            		}
            	}


void SetupState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_db04e9e3911e609e_305_update)
HXLINE( 306)		this->super::update(elapsed);
HXLINE( 307)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 307)		if (_this->keyManager->checkStatusUnsafe(121,_this->status)) {
HXLINE( 309)			 ::applications::ConsoleApp test =  ::applications::ConsoleApp_obj::__alloc( HX_CTX );
HXLINE( 310)			this->add(test);
            		}
HXLINE( 312)		if (::hx::IsEq( this->o->__Field(HX_("stepOne",7a,02,47,81),::hx::paccDynamic),true )) {
HXLINE( 314)			this->background->set_x(this->windowSetupWindow->x);
HXLINE( 315)			this->background->set_y(this->windowSetupWindow->y);
HXLINE( 316)			bool _hx_tmp;
HXDLIN( 316)			if (::flixel::FlxG_obj::mouse->overlaps(this->barChoose,null())) {
HXLINE( 316)				_hx_tmp = (this->allow == false);
            			}
            			else {
HXLINE( 316)				_hx_tmp = false;
            			}
HXDLIN( 316)			if (_hx_tmp) {
HXLINE( 319)				this->barChoose->loadGraphic(HX_("assets/images/setup/noneCover.png",fd,d6,bd,74),null(),null(),null(),null(),null());
HXLINE( 320)				this->barChoose->updateHitbox();
HXLINE( 321)				this->allow = true;
            			}
            		}
            	}


void SetupState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_db04e9e3911e609e_325_destroy)
HXLINE( 326)		this->super::destroy();
HXLINE( 327)		::flixel::FlxG_obj::bitmap->dumpCache();
            	}



::hx::ObjectPtr< SetupState_obj > SetupState_obj::__new() {
	::hx::ObjectPtr< SetupState_obj > __this = new SetupState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< SetupState_obj > SetupState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	SetupState_obj *__this = (SetupState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SetupState_obj), true, "states.SetupState"));
	*(void **)__this = SetupState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SetupState_obj::SetupState_obj()
{
}

void SetupState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SetupState);
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	HX_MARK_MEMBER_NAME(isSystemCursor,"isSystemCursor");
	HX_MARK_MEMBER_NAME(backgroundSetup,"backgroundSetup");
	HX_MARK_MEMBER_NAME(windowSetupWindow,"windowSetupWindow");
	HX_MARK_MEMBER_NAME(confirmMenu,"confirmMenu");
	HX_MARK_MEMBER_NAME(confirmMessageBox,"confirmMessageBox");
	HX_MARK_MEMBER_NAME(confirmButtonOK,"confirmButtonOK");
	HX_MARK_MEMBER_NAME(confirmButtonOFF,"confirmButtonOFF");
	HX_MARK_MEMBER_NAME(alsoClick,"alsoClick");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(allow,"allow");
	HX_MARK_MEMBER_NAME(logoWindows,"logoWindows");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(installButton,"installButton");
	HX_MARK_MEMBER_NAME(diskText,"diskText");
	HX_MARK_MEMBER_NAME(disk,"disk");
	HX_MARK_MEMBER_NAME(diskChoose,"diskChoose");
	HX_MARK_MEMBER_NAME(bar,"bar");
	HX_MARK_MEMBER_NAME(nextButton,"nextButton");
	HX_MARK_MEMBER_NAME(barChoose,"barChoose");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(allowText,"allowText");
	HX_MARK_MEMBER_NAME(text,"text");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SetupState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	HX_VISIT_MEMBER_NAME(isSystemCursor,"isSystemCursor");
	HX_VISIT_MEMBER_NAME(backgroundSetup,"backgroundSetup");
	HX_VISIT_MEMBER_NAME(windowSetupWindow,"windowSetupWindow");
	HX_VISIT_MEMBER_NAME(confirmMenu,"confirmMenu");
	HX_VISIT_MEMBER_NAME(confirmMessageBox,"confirmMessageBox");
	HX_VISIT_MEMBER_NAME(confirmButtonOK,"confirmButtonOK");
	HX_VISIT_MEMBER_NAME(confirmButtonOFF,"confirmButtonOFF");
	HX_VISIT_MEMBER_NAME(alsoClick,"alsoClick");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(allow,"allow");
	HX_VISIT_MEMBER_NAME(logoWindows,"logoWindows");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(installButton,"installButton");
	HX_VISIT_MEMBER_NAME(diskText,"diskText");
	HX_VISIT_MEMBER_NAME(disk,"disk");
	HX_VISIT_MEMBER_NAME(diskChoose,"diskChoose");
	HX_VISIT_MEMBER_NAME(bar,"bar");
	HX_VISIT_MEMBER_NAME(nextButton,"nextButton");
	HX_VISIT_MEMBER_NAME(barChoose,"barChoose");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(allowText,"allowText");
	HX_VISIT_MEMBER_NAME(text,"text");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SetupState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { return ::hx::Val( bar ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"disk") ) { return ::hx::Val( disk ); }
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"allow") ) { return ::hx::Val( allow ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return ::hx::Val( ready ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { return ::hx::Val( cursor ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diskText") ) { return ::hx::Val( diskText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"alsoClick") ) { return ::hx::Val( alsoClick ); }
		if (HX_FIELD_EQ(inName,"barChoose") ) { return ::hx::Val( barChoose ); }
		if (HX_FIELD_EQ(inName,"allowText") ) { return ::hx::Val( allowText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"diskChoose") ) { return ::hx::Val( diskChoose ); }
		if (HX_FIELD_EQ(inName,"nextButton") ) { return ::hx::Val( nextButton ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"confirmMenu") ) { return ::hx::Val( confirmMenu ); }
		if (HX_FIELD_EQ(inName,"logoWindows") ) { return ::hx::Val( logoWindows ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"installButton") ) { return ::hx::Val( installButton ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isSystemCursor") ) { return ::hx::Val( isSystemCursor ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundSetup") ) { return ::hx::Val( backgroundSetup ); }
		if (HX_FIELD_EQ(inName,"confirmButtonOK") ) { return ::hx::Val( confirmButtonOK ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"confirmButtonOFF") ) { return ::hx::Val( confirmButtonOFF ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"windowSetupWindow") ) { return ::hx::Val( windowSetupWindow ); }
		if (HX_FIELD_EQ(inName,"confirmMessageBox") ) { return ::hx::Val( confirmMessageBox ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SetupState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { bar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"disk") ) { disk=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allow") ) { allow=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { cursor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diskText") ) { diskText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"alsoClick") ) { alsoClick=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"barChoose") ) { barChoose=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowText") ) { allowText=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diskChoose") ) { diskChoose=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextButton") ) { nextButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"confirmMenu") ) { confirmMenu=inValue.Cast<  ::CustomWindow >(); return inValue; }
		if (HX_FIELD_EQ(inName,"logoWindows") ) { logoWindows=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"installButton") ) { installButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isSystemCursor") ) { isSystemCursor=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundSetup") ) { backgroundSetup=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"confirmButtonOK") ) { confirmButtonOK=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"confirmButtonOFF") ) { confirmButtonOFF=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"windowSetupWindow") ) { windowSetupWindow=inValue.Cast<  ::CustomWindow >(); return inValue; }
		if (HX_FIELD_EQ(inName,"confirmMessageBox") ) { confirmMessageBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SetupState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cursor",d6,8e,e8,3e));
	outFields->push(HX_("isSystemCursor",2f,d6,9f,18));
	outFields->push(HX_("backgroundSetup",af,8b,1a,3d));
	outFields->push(HX_("windowSetupWindow",3d,dc,d1,87));
	outFields->push(HX_("confirmMenu",bf,8e,fe,3c));
	outFields->push(HX_("confirmMessageBox",a4,b7,8a,22));
	outFields->push(HX_("confirmButtonOK",ae,e0,82,b4));
	outFields->push(HX_("confirmButtonOFF",7d,b3,01,3e));
	outFields->push(HX_("alsoClick",81,40,0e,fa));
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("allow",89,a4,93,21));
	outFields->push(HX_("logoWindows",58,fa,e5,1f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("installButton",6d,f1,20,8a));
	outFields->push(HX_("diskText",aa,d2,bf,34));
	outFields->push(HX_("disk",5d,67,69,42));
	outFields->push(HX_("diskChoose",14,9a,85,aa));
	outFields->push(HX_("bar",d3,b1,4a,00));
	outFields->push(HX_("nextButton",45,13,12,8f));
	outFields->push(HX_("barChoose",0a,21,5f,e6));
	outFields->push(HX_("o",6f,00,00,00));
	outFields->push(HX_("ready",63,a0,ba,e6));
	outFields->push(HX_("allowText",d6,15,ee,b7));
	outFields->push(HX_("text",ad,cc,f9,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SetupState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SetupState_obj,cursor),HX_("cursor",d6,8e,e8,3e)},
	{::hx::fsBool,(int)offsetof(SetupState_obj,isSystemCursor),HX_("isSystemCursor",2f,d6,9f,18)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SetupState_obj,backgroundSetup),HX_("backgroundSetup",af,8b,1a,3d)},
	{::hx::fsObject /*  ::CustomWindow */ ,(int)offsetof(SetupState_obj,windowSetupWindow),HX_("windowSetupWindow",3d,dc,d1,87)},
	{::hx::fsObject /*  ::CustomWindow */ ,(int)offsetof(SetupState_obj,confirmMenu),HX_("confirmMenu",bf,8e,fe,3c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SetupState_obj,confirmMessageBox),HX_("confirmMessageBox",a4,b7,8a,22)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SetupState_obj,confirmButtonOK),HX_("confirmButtonOK",ae,e0,82,b4)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SetupState_obj,confirmButtonOFF),HX_("confirmButtonOFF",7d,b3,01,3e)},
	{::hx::fsBool,(int)offsetof(SetupState_obj,alsoClick),HX_("alsoClick",81,40,0e,fa)},
	{::hx::fsBool,(int)offsetof(SetupState_obj,start),HX_("start",62,74,0b,84)},
	{::hx::fsBool,(int)offsetof(SetupState_obj,allow),HX_("allow",89,a4,93,21)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SetupState_obj,logoWindows),HX_("logoWindows",58,fa,e5,1f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SetupState_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SetupState_obj,installButton),HX_("installButton",6d,f1,20,8a)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SetupState_obj,diskText),HX_("diskText",aa,d2,bf,34)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SetupState_obj,disk),HX_("disk",5d,67,69,42)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SetupState_obj,diskChoose),HX_("diskChoose",14,9a,85,aa)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SetupState_obj,bar),HX_("bar",d3,b1,4a,00)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SetupState_obj,nextButton),HX_("nextButton",45,13,12,8f)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SetupState_obj,barChoose),HX_("barChoose",0a,21,5f,e6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SetupState_obj,o),HX_("o",6f,00,00,00)},
	{::hx::fsBool,(int)offsetof(SetupState_obj,ready),HX_("ready",63,a0,ba,e6)},
	{::hx::fsBool,(int)offsetof(SetupState_obj,allowText),HX_("allowText",d6,15,ee,b7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SetupState_obj,text),HX_("text",ad,cc,f9,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SetupState_obj_sStaticStorageInfo = 0;
#endif

static ::String SetupState_obj_sMemberFields[] = {
	HX_("cursor",d6,8e,e8,3e),
	HX_("isSystemCursor",2f,d6,9f,18),
	HX_("backgroundSetup",af,8b,1a,3d),
	HX_("windowSetupWindow",3d,dc,d1,87),
	HX_("confirmMenu",bf,8e,fe,3c),
	HX_("confirmMessageBox",a4,b7,8a,22),
	HX_("confirmButtonOK",ae,e0,82,b4),
	HX_("confirmButtonOFF",7d,b3,01,3e),
	HX_("alsoClick",81,40,0e,fa),
	HX_("start",62,74,0b,84),
	HX_("allow",89,a4,93,21),
	HX_("logoWindows",58,fa,e5,1f),
	HX_("background",ee,93,1d,26),
	HX_("installButton",6d,f1,20,8a),
	HX_("diskText",aa,d2,bf,34),
	HX_("disk",5d,67,69,42),
	HX_("diskChoose",14,9a,85,aa),
	HX_("bar",d3,b1,4a,00),
	HX_("nextButton",45,13,12,8f),
	HX_("barChoose",0a,21,5f,e6),
	HX_("o",6f,00,00,00),
	HX_("ready",63,a0,ba,e6),
	HX_("allowText",d6,15,ee,b7),
	HX_("text",ad,cc,f9,4c),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class SetupState_obj::__mClass;

void SetupState_obj::__register()
{
	SetupState_obj _hx_dummy;
	SetupState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.SetupState",20,e6,e1,51);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SetupState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SetupState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetupState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetupState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
