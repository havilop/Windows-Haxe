// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_LoadState
#include <states/LoadState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_400538c9fcffc0c3_13_new,"states.LoadState","new",0xf689d831,"states.LoadState.new","states/LoadState.hx",13,0x64b475e0)
HX_LOCAL_STACK_FRAME(_hx_pos_400538c9fcffc0c3_24_create,"states.LoadState","create",0xf63d57cb,"states.LoadState.create","states/LoadState.hx",24,0x64b475e0)
HX_LOCAL_STACK_FRAME(_hx_pos_400538c9fcffc0c3_33_update,"states.LoadState","update",0x013376d8,"states.LoadState.update","states/LoadState.hx",33,0x64b475e0)
HX_LOCAL_STACK_FRAME(_hx_pos_400538c9fcffc0c3_19_setLoadingScreen,"states.LoadState","setLoadingScreen",0x7d8dc395,"states.LoadState.setLoadingScreen","states/LoadState.hx",19,0x64b475e0)
HX_LOCAL_STACK_FRAME(_hx_pos_400538c9fcffc0c3_16_setLoadingScreen,"states.LoadState","setLoadingScreen",0x7d8dc395,"states.LoadState.setLoadingScreen","states/LoadState.hx",16,0x64b475e0)
HX_LOCAL_STACK_FRAME(_hx_pos_400538c9fcffc0c3_17_setLoadingScreen,"states.LoadState","setLoadingScreen",0x7d8dc395,"states.LoadState.setLoadingScreen","states/LoadState.hx",17,0x64b475e0)
namespace states{

void LoadState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_400538c9fcffc0c3_13_new)
HXDLIN(  13)		super::__construct();
            	}

Dynamic LoadState_obj::__CreateEmpty() { return new LoadState_obj; }

void *LoadState_obj::_hx_vtable = 0;

Dynamic LoadState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LoadState_obj > _hx_result = new LoadState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LoadState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x211ed669) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x211ed669;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void LoadState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_400538c9fcffc0c3_24_create)
HXLINE(  25)		this->super::create();
HXLINE(  26)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  27)		::App_obj::isWindowsState = false;
            	}


void LoadState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_400538c9fcffc0c3_33_update)
HXDLIN(  33)		this->super::update(elapsed);
            	}


void LoadState_obj::setLoadingScreen(int time, ::Dynamic state){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,state) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_400538c9fcffc0c3_19_setLoadingScreen)
HXLINE(  19)			 ::Dynamic nextState = state;
HXDLIN(  19)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  19)			bool name;
HXDLIN(  19)			if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  19)				name = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            			}
            			else {
HXLINE(  19)				name = true;
            			}
HXDLIN(  19)			if (name) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_400538c9fcffc0c3_19_setLoadingScreen)
HXLINE(  19)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  19)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  19)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  19)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_2(nextState,stateOnCall)));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_400538c9fcffc0c3_16_setLoadingScreen)
HXLINE(  17)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::LoadState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_400538c9fcffc0c3_17_setLoadingScreen)
HXLINE(  17)				return  ::states::LoadState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(  17)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  17)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  17)			bool _hx_tmp;
HXDLIN(  17)			if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  17)				_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            			}
            			else {
HXLINE(  17)				_hx_tmp = true;
            			}
HXDLIN(  17)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_400538c9fcffc0c3_17_setLoadingScreen)
HXLINE(  17)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  17)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  17)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  17)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            			}
            		}
HXLINE(  18)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_3(state));
HXDLIN(  18)		::haxe::Timer_obj::delay(name,time);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoadState_obj,setLoadingScreen,(void))


::hx::ObjectPtr< LoadState_obj > LoadState_obj::__new() {
	::hx::ObjectPtr< LoadState_obj > __this = new LoadState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< LoadState_obj > LoadState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	LoadState_obj *__this = (LoadState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LoadState_obj), true, "states.LoadState"));
	*(void **)__this = LoadState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LoadState_obj::LoadState_obj()
{
}

::hx::Val LoadState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LoadState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"setLoadingScreen") ) { outValue = setLoadingScreen_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *LoadState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *LoadState_obj_sStaticStorageInfo = 0;
#endif

static ::String LoadState_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class LoadState_obj::__mClass;

static ::String LoadState_obj_sStaticFields[] = {
	HX_("setLoadingScreen",06,1a,bb,f0),
	::String(null())
};

void LoadState_obj::__register()
{
	LoadState_obj _hx_dummy;
	LoadState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.LoadState",bf,eb,73,fe);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LoadState_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LoadState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LoadState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LoadState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoadState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoadState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
