// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_Logon
#include <Logon.h>
#endif
#ifndef INCLUDED_TaskBar
#include <TaskBar.h>
#endif
#ifndef INCLUDED_TestDesktop
#include <TestDesktop.h>
#endif
#ifndef INCLUDED_applications_Calculator
#include <applications/Calculator.h>
#endif
#ifndef INCLUDED_applications_ConsoleApp
#include <applications/ConsoleApp.h>
#endif
#ifndef INCLUDED_applications_SettingsApplication
#include <applications/SettingsApplication.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_states_WindowsState
#include <states/WindowsState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2c91a3b350bc80e5_30_new,"states.WindowsState","new",0xc025c14c,"states.WindowsState.new","states/WindowsState.hx",30,0x4e5d14c3)
HX_LOCAL_STACK_FRAME(_hx_pos_2c91a3b350bc80e5_52_ResetTaskBar,"states.WindowsState","ResetTaskBar",0xab5fe733,"states.WindowsState.ResetTaskBar","states/WindowsState.hx",52,0x4e5d14c3)
HX_LOCAL_STACK_FRAME(_hx_pos_2c91a3b350bc80e5_58_create,"states.WindowsState","create",0xf411d190,"states.WindowsState.create","states/WindowsState.hx",58,0x4e5d14c3)
HX_LOCAL_STACK_FRAME(_hx_pos_2c91a3b350bc80e5_101_update,"states.WindowsState","update",0xff07f09d,"states.WindowsState.update","states/WindowsState.hx",101,0x4e5d14c3)
HX_LOCAL_STACK_FRAME(_hx_pos_2c91a3b350bc80e5_136_update,"states.WindowsState","update",0xff07f09d,"states.WindowsState.update","states/WindowsState.hx",136,0x4e5d14c3)
HX_LOCAL_STACK_FRAME(_hx_pos_2c91a3b350bc80e5_156_update,"states.WindowsState","update",0xff07f09d,"states.WindowsState.update","states/WindowsState.hx",156,0x4e5d14c3)
HX_LOCAL_STACK_FRAME(_hx_pos_2c91a3b350bc80e5_49_openApp,"states.WindowsState","openApp",0xca4181e3,"states.WindowsState.openApp","states/WindowsState.hx",49,0x4e5d14c3)
namespace states{

void WindowsState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2c91a3b350bc80e5_30_new)
HXLINE(  34)		this->is = false;
HXLINE(  30)		super::__construct();
            	}

Dynamic WindowsState_obj::__CreateEmpty() { return new WindowsState_obj; }

void *WindowsState_obj::_hx_vtable = 0;

Dynamic WindowsState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WindowsState_obj > _hx_result = new WindowsState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool WindowsState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2b2a06f0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2b2a06f0;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void WindowsState_obj::ResetTaskBar(){
            	HX_GC_STACKFRAME(&_hx_pos_2c91a3b350bc80e5_52_ResetTaskBar)
HXLINE(  53)		::states::WindowsState_obj::taskBar->kill();
HXLINE(  54)		::states::WindowsState_obj::taskBar =  ::TaskBar_obj::__alloc( HX_CTX );
HXLINE(  55)		::states::WindowsState_obj::taskBar->set_visible(true);
HXLINE(  56)		this->add(::states::WindowsState_obj::taskBar);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WindowsState_obj,ResetTaskBar,(void))

void WindowsState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_2c91a3b350bc80e5_58_create)
HXLINE(  59)		this->super::create();
HXLINE(  60)		::flixel::FlxG_obj::sound->volumeDownKeys = null();
HXLINE(  61)		::flixel::FlxG_obj::sound->volumeUpKeys = null();
HXLINE(  62)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  63)		::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
HXLINE(  64)		::flixel::FlxG_obj::autoPause = false;
HXLINE(  65)		::App_obj::isWindowsState = true;
HXLINE(  66)		if (::sys::FileSystem_obj::exists(HX_("assets/Windows/mbr.json",71,7f,52,64))) {
HXLINE(  70)			::String data = ::sys::io::File_obj::getContent(HX_("assets/Windows/mbr.json",71,7f,52,64));
HXLINE(  71)			this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE(  75)		::states::WindowsState_obj::bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0, ::Dynamic(this->o->__Field(HX_("wallpaper",42,1e,42,31),::hx::paccDynamic)));
HXLINE(  76)		::states::WindowsState_obj::bg->loadGraphic( ::Dynamic(this->o->__Field(HX_("wallpaper",42,1e,42,31),::hx::paccDynamic)),null(),null(),null(),null(),null());
HXLINE(  77)		::states::WindowsState_obj::bg->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE(  78)		::states::WindowsState_obj::bg->updateHitbox();
HXLINE(  79)		{
HXLINE(  79)			 ::flixel::FlxSprite _this = ::states::WindowsState_obj::bg;
HXDLIN(  79)			int axes = 1;
HXDLIN(  79)			bool _hx_tmp;
HXDLIN(  79)			if ((axes != 1)) {
HXLINE(  79)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  79)				_hx_tmp = true;
            			}
HXDLIN(  79)			if (_hx_tmp) {
HXLINE(  79)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  79)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  79)			bool _hx_tmp2;
HXDLIN(  79)			if ((axes != 16)) {
HXLINE(  79)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  79)				_hx_tmp2 = true;
            			}
HXDLIN(  79)			if (_hx_tmp2) {
HXLINE(  79)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  79)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  80)		this->add(::states::WindowsState_obj::bg);
HXLINE(  82)		 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 185),(::flixel::FlxG_obj::height - 65),0,HX_("press F10 to open console",2e,e8,49,a7),16,null());
HXLINE(  83)		text->set_font(HX_("assets/fonts/my.ttf",5b,83,ee,55));
HXLINE(  84)		this->add(text);
HXLINE(  86)		this->menu =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/menu.png",05,99,7e,f8));
HXLINE(  87)		this->menu->set_visible(false);
HXLINE(  88)		this->add(this->menu);
HXLINE(  90)		 ::TestDesktop testDesktop =  ::TestDesktop_obj::__alloc( HX_CTX );
HXLINE(  91)		this->add(testDesktop);
HXLINE(  93)		::states::WindowsState_obj::taskBar =  ::TaskBar_obj::__alloc( HX_CTX );
HXLINE(  94)		::states::WindowsState_obj::taskBar->set_visible(false);
HXLINE(  95)		this->add(::states::WindowsState_obj::taskBar);
HXLINE(  97)		this->screenLogon =  ::Logon_obj::__alloc( HX_CTX );
HXLINE(  98)		this->add(this->screenLogon);
            	}


void WindowsState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_2c91a3b350bc80e5_101_update)
HXDLIN( 101)		 ::states::WindowsState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 102)		this->super::update(elapsed);
HXLINE( 104)		::flixel::FlxG_obj::set_drawFramerate(( (int)(this->o->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ));
HXLINE( 105)		::flixel::FlxG_obj::set_updateFramerate(( (int)(this->o->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ));
HXLINE( 107)		if ((::states::WindowsState_obj::IsSystem == true)) {
HXLINE( 109)			this->settings =  ::applications::SettingsApplication_obj::__alloc( HX_CTX );
HXLINE( 110)			this->settings->currentSection = HX_("system",ef,96,e2,f2);
HXLINE( 111)			this->add(this->settings);
HXLINE( 112)			::states::WindowsState_obj::IsSystem = false;
            		}
HXLINE( 114)		if ((::states::WindowsState_obj::IsReset == true)) {
HXLINE( 116)			::states::WindowsState_obj::taskBar->kill();
HXLINE( 117)			::states::WindowsState_obj::taskBar =  ::TaskBar_obj::__alloc( HX_CTX );
HXLINE( 118)			::states::WindowsState_obj::taskBar->set_visible(true);
HXLINE( 119)			this->add(::states::WindowsState_obj::taskBar);
HXLINE( 120)			::states::WindowsState_obj::IsReset = false;
            		}
HXLINE( 122)		if ((::Logon_obj::logon == false)) {
HXLINE( 124)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 124)			if (_this->keyManager->checkStatusUnsafe(121,_this->status)) {
HXLINE( 126)				this->test =  ::applications::ConsoleApp_obj::__alloc( HX_CTX );
HXLINE( 127)				this->test->nameApp = HX_("console",57,eb,d5,18);
HXLINE( 128)				this->add(this->test);
            			}
HXLINE( 130)			if ((::flixel::FlxG_obj::mouse->_rightButton->current == 2)) {
HXLINE( 132)				if (::flixel::FlxG_obj::mouse->overlaps(::states::WindowsState_obj::taskBar->mainpart,null())) {
HXLINE( 134)					if ((this->is == false)) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::WindowsState,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_2c91a3b350bc80e5_136_update)
HXLINE( 137)							_gthis->settings =  ::applications::SettingsApplication_obj::__alloc( HX_CTX );
HXLINE( 138)							_gthis->settings->currentSection = HX_("personalization",64,a9,11,21);
HXLINE( 139)							_gthis->add(_gthis->settings).StaticCast<  ::flixel::FlxBasic >();
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 136)						 ::Dynamic name =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN( 136)						this->taskbarmenu =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name);
HXLINE( 141)						this->taskbarmenu->loadGraphic(HX_("assets/images/taskbarmeu.png",d5,30,9b,7a),null(),null(),null(),null(),null());
HXLINE( 142)						this->taskbarmenu->updateHitbox();
HXLINE( 143)						{
HXLINE( 143)							 ::flixel::ui::FlxButton _this1 = this->taskbarmenu;
HXDLIN( 143)							::String Text;
HXDLIN( 143)							if (::hx::IsEq( this->o->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 143)								Text = HX_("Taskbar options",cc,e8,e1,9d);
            							}
            							else {
HXLINE( 143)								Text = HX_W(u"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0430\u043d\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u0447",51c3,c0cf);
            							}
HXDLIN( 143)							if (::hx::IsNull( _this1->label )) {
HXLINE( 143)								if (::hx::IsNotNull( Text )) {
HXLINE( 143)									_this1->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this1->x + _this1->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this1->y + _this1->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text,null(),null()));
HXDLIN( 143)									_this1->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 143)									_this1->label->set_alpha(_this1->labelAlphas->__get(_this1->status));
HXDLIN( 143)									_this1->label->drawFrame(true);
            								}
            							}
            							else {
HXLINE( 143)								_this1->label->set_text(Text);
            							}
            						}
HXLINE( 144)						::String _hx_tmp;
HXDLIN( 144)						if (::hx::IsEq( this->o->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 144)							_hx_tmp = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            						}
            						else {
HXLINE( 144)							_hx_tmp = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            						}
HXDLIN( 144)						this->taskbarmenu->label->setFormat(_hx_tmp,16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 145)						this->add(this->taskbarmenu);
HXLINE( 146)						this->taskbarmenu->set_x(( (Float)(::flixel::FlxG_obj::mouse->x) ));
HXLINE( 147)						this->taskbarmenu->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
HXLINE( 148)						this->ISAPPEAR = true;
HXLINE( 149)						this->is = true;
            					}
            				}
            			}
HXLINE( 153)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::WindowsState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_2c91a3b350bc80e5_156_update)
HXLINE( 156)					if ((_gthis->ISAPPEAR == true)) {
HXLINE( 158)						_gthis->taskbarmenu->kill();
HXLINE( 159)						_gthis->ISAPPEAR = false;
HXLINE( 160)						_gthis->is = false;
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 155)				 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_1(_gthis));
HXDLIN( 155)				::haxe::Timer_obj::delay(name1,1);
            			}
HXLINE( 164)			::states::WindowsState_obj::taskBar->set_visible(true);
            		}
HXLINE( 166)		::String _hx_switch_0 = ::states::WindowsState_obj::currentApp;
            		if (  (_hx_switch_0==HX_("calc",95,18,ba,41)) ){
HXLINE( 178)			 ::applications::Calculator calc =  ::applications::Calculator_obj::__alloc( HX_CTX );
HXLINE( 179)			this->add(calc);
HXLINE( 180)			::states::WindowsState_obj::currentApp = HX_("",00,00,00,00);
HXLINE( 177)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("cmd",7a,7e,4b,00)) ){
HXLINE( 169)			 ::applications::ConsoleApp cmd =  ::applications::ConsoleApp_obj::__alloc( HX_CTX );
HXLINE( 170)			this->add(cmd);
HXLINE( 171)			::states::WindowsState_obj::currentApp = HX_("",00,00,00,00);
HXLINE( 168)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("settings",e3,7c,3d,8b)) ){
HXLINE( 173)			 ::applications::SettingsApplication settings =  ::applications::SettingsApplication_obj::__alloc( HX_CTX );
HXLINE( 174)			settings->currentSection = HX_("system",ef,96,e2,f2);
HXLINE( 175)			this->add(settings);
HXLINE( 176)			::states::WindowsState_obj::currentApp = HX_("",00,00,00,00);
HXLINE( 172)			goto _hx_goto_3;
            		}
            		_hx_goto_3:;
            	}


 ::flixel::FlxSprite WindowsState_obj::bg;

 ::TaskBar WindowsState_obj::taskBar;

bool WindowsState_obj::isConsole;

bool WindowsState_obj::IsReset;

bool WindowsState_obj::IsSystem;

::String WindowsState_obj::currentApp;

void WindowsState_obj::openApp(::String name){
            	HX_STACKFRAME(&_hx_pos_2c91a3b350bc80e5_49_openApp)
HXDLIN(  49)		::states::WindowsState_obj::currentApp = name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WindowsState_obj,openApp,(void))


::hx::ObjectPtr< WindowsState_obj > WindowsState_obj::__new() {
	::hx::ObjectPtr< WindowsState_obj > __this = new WindowsState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< WindowsState_obj > WindowsState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	WindowsState_obj *__this = (WindowsState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WindowsState_obj), true, "states.WindowsState"));
	*(void **)__this = WindowsState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

WindowsState_obj::WindowsState_obj()
{
}

void WindowsState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WindowsState);
	HX_MARK_MEMBER_NAME(screenLogon,"screenLogon");
	HX_MARK_MEMBER_NAME(ISAPPEAR,"ISAPPEAR");
	HX_MARK_MEMBER_NAME(is,"is");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(menu,"menu");
	HX_MARK_MEMBER_NAME(settings,"settings");
	HX_MARK_MEMBER_NAME(taskbarmenu,"taskbarmenu");
	HX_MARK_MEMBER_NAME(test,"test");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WindowsState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(screenLogon,"screenLogon");
	HX_VISIT_MEMBER_NAME(ISAPPEAR,"ISAPPEAR");
	HX_VISIT_MEMBER_NAME(is,"is");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(menu,"menu");
	HX_VISIT_MEMBER_NAME(settings,"settings");
	HX_VISIT_MEMBER_NAME(taskbarmenu,"taskbarmenu");
	HX_VISIT_MEMBER_NAME(test,"test");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val WindowsState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"is") ) { return ::hx::Val( is ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"menu") ) { return ::hx::Val( menu ); }
		if (HX_FIELD_EQ(inName,"test") ) { return ::hx::Val( test ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ISAPPEAR") ) { return ::hx::Val( ISAPPEAR ); }
		if (HX_FIELD_EQ(inName,"settings") ) { return ::hx::Val( settings ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenLogon") ) { return ::hx::Val( screenLogon ); }
		if (HX_FIELD_EQ(inName,"taskbarmenu") ) { return ::hx::Val( taskbarmenu ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ResetTaskBar") ) { return ::hx::Val( ResetTaskBar_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool WindowsState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { outValue = ( bg ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"taskBar") ) { outValue = ( taskBar ); return true; }
		if (HX_FIELD_EQ(inName,"IsReset") ) { outValue = ( IsReset ); return true; }
		if (HX_FIELD_EQ(inName,"openApp") ) { outValue = openApp_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"IsSystem") ) { outValue = ( IsSystem ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isConsole") ) { outValue = ( isConsole ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentApp") ) { outValue = ( currentApp ); return true; }
	}
	return false;
}

::hx::Val WindowsState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"is") ) { is=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"menu") ) { menu=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"test") ) { test=inValue.Cast<  ::applications::ConsoleApp >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ISAPPEAR") ) { ISAPPEAR=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"settings") ) { settings=inValue.Cast<  ::applications::SettingsApplication >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenLogon") ) { screenLogon=inValue.Cast<  ::Logon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"taskbarmenu") ) { taskbarmenu=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool WindowsState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"taskBar") ) { taskBar=ioValue.Cast<  ::TaskBar >(); return true; }
		if (HX_FIELD_EQ(inName,"IsReset") ) { IsReset=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"IsSystem") ) { IsSystem=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isConsole") ) { isConsole=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentApp") ) { currentApp=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void WindowsState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("screenLogon",97,2b,79,30));
	outFields->push(HX_("ISAPPEAR",ff,8d,2e,0d));
	outFields->push(HX_("is",ea,5b,00,00));
	outFields->push(HX_("o",6f,00,00,00));
	outFields->push(HX_("menu",9f,45,59,48));
	outFields->push(HX_("settings",e3,7c,3d,8b));
	outFields->push(HX_("taskbarmenu",4d,c0,64,8b));
	outFields->push(HX_("test",52,c8,f9,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WindowsState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Logon */ ,(int)offsetof(WindowsState_obj,screenLogon),HX_("screenLogon",97,2b,79,30)},
	{::hx::fsBool,(int)offsetof(WindowsState_obj,ISAPPEAR),HX_("ISAPPEAR",ff,8d,2e,0d)},
	{::hx::fsBool,(int)offsetof(WindowsState_obj,is),HX_("is",ea,5b,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WindowsState_obj,o),HX_("o",6f,00,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(WindowsState_obj,menu),HX_("menu",9f,45,59,48)},
	{::hx::fsObject /*  ::applications::SettingsApplication */ ,(int)offsetof(WindowsState_obj,settings),HX_("settings",e3,7c,3d,8b)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(WindowsState_obj,taskbarmenu),HX_("taskbarmenu",4d,c0,64,8b)},
	{::hx::fsObject /*  ::applications::ConsoleApp */ ,(int)offsetof(WindowsState_obj,test),HX_("test",52,c8,f9,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo WindowsState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &WindowsState_obj::bg,HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::TaskBar */ ,(void *) &WindowsState_obj::taskBar,HX_("taskBar",8e,c3,58,1e)},
	{::hx::fsBool,(void *) &WindowsState_obj::isConsole,HX_("isConsole",8d,68,d4,1c)},
	{::hx::fsBool,(void *) &WindowsState_obj::IsReset,HX_("IsReset",65,15,9f,50)},
	{::hx::fsBool,(void *) &WindowsState_obj::IsSystem,HX_("IsSystem",99,ee,fd,24)},
	{::hx::fsString,(void *) &WindowsState_obj::currentApp,HX_("currentApp",e8,c1,24,c7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String WindowsState_obj_sMemberFields[] = {
	HX_("screenLogon",97,2b,79,30),
	HX_("ISAPPEAR",ff,8d,2e,0d),
	HX_("is",ea,5b,00,00),
	HX_("o",6f,00,00,00),
	HX_("menu",9f,45,59,48),
	HX_("settings",e3,7c,3d,8b),
	HX_("taskbarmenu",4d,c0,64,8b),
	HX_("test",52,c8,f9,4c),
	HX_("ResetTaskBar",9f,55,49,58),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

static void WindowsState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WindowsState_obj::bg,"bg");
	HX_MARK_MEMBER_NAME(WindowsState_obj::taskBar,"taskBar");
	HX_MARK_MEMBER_NAME(WindowsState_obj::isConsole,"isConsole");
	HX_MARK_MEMBER_NAME(WindowsState_obj::IsReset,"IsReset");
	HX_MARK_MEMBER_NAME(WindowsState_obj::IsSystem,"IsSystem");
	HX_MARK_MEMBER_NAME(WindowsState_obj::currentApp,"currentApp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WindowsState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WindowsState_obj::bg,"bg");
	HX_VISIT_MEMBER_NAME(WindowsState_obj::taskBar,"taskBar");
	HX_VISIT_MEMBER_NAME(WindowsState_obj::isConsole,"isConsole");
	HX_VISIT_MEMBER_NAME(WindowsState_obj::IsReset,"IsReset");
	HX_VISIT_MEMBER_NAME(WindowsState_obj::IsSystem,"IsSystem");
	HX_VISIT_MEMBER_NAME(WindowsState_obj::currentApp,"currentApp");
};

#endif

::hx::Class WindowsState_obj::__mClass;

static ::String WindowsState_obj_sStaticFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("taskBar",8e,c3,58,1e),
	HX_("isConsole",8d,68,d4,1c),
	HX_("IsReset",65,15,9f,50),
	HX_("IsSystem",99,ee,fd,24),
	HX_("currentApp",e8,c1,24,c7),
	HX_("openApp",f7,aa,26,40),
	::String(null())
};

void WindowsState_obj::__register()
{
	WindowsState_obj _hx_dummy;
	WindowsState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.WindowsState",5a,6b,48,ab);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &WindowsState_obj::__GetStatic;
	__mClass->mSetStaticField = &WindowsState_obj::__SetStatic;
	__mClass->mMarkFunc = WindowsState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(WindowsState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WindowsState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WindowsState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WindowsState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WindowsState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WindowsState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
