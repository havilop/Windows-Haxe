// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Console
#include <Console.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_states_BIOState
#include <states/BIOState.h>
#endif
#ifndef INCLUDED_states_LoadState
#include <states/LoadState.h>
#endif
#ifndef INCLUDED_states_MBRstate
#include <states/MBRstate.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_354ddd56282f8f63_26_new,"states.BIOState","new",0x00353c67,"states.BIOState.new","states/BIOState.hx",26,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_43_AddStartUI,"states.BIOState","AddStartUI",0x9a1b7e0e,"states.BIOState.AddStartUI","states/BIOState.hx",43,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_54_AddBIOSUI,"states.BIOState","AddBIOSUI",0x957895c7,"states.BIOState.AddBIOSUI","states/BIOState.hx",54,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_58_AddBIOSUI,"states.BIOState","AddBIOSUI",0x957895c7,"states.BIOState.AddBIOSUI","states/BIOState.hx",58,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_65_AddBIOSUI,"states.BIOState","AddBIOSUI",0x957895c7,"states.BIOState.AddBIOSUI","states/BIOState.hx",65,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_75_AddBIOSUI,"states.BIOState","AddBIOSUI",0x957895c7,"states.BIOState.AddBIOSUI","states/BIOState.hx",75,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_79_AddBIOSUI,"states.BIOState","AddBIOSUI",0x957895c7,"states.BIOState.AddBIOSUI","states/BIOState.hx",79,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_85_AddBIOSUI,"states.BIOState","AddBIOSUI",0x957895c7,"states.BIOState.AddBIOSUI","states/BIOState.hx",85,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_53_AddBIOSUI,"states.BIOState","AddBIOSUI",0x957895c7,"states.BIOState.AddBIOSUI","states/BIOState.hx",53,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_145_create,"states.BIOState","create",0x4679f955,"states.BIOState.create","states/BIOState.hx",145,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_102_create,"states.BIOState","create",0x4679f955,"states.BIOState.create","states/BIOState.hx",102,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_150_update,"states.BIOState","update",0x51701862,"states.BIOState.update","states/BIOState.hx",150,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_157_update,"states.BIOState","update",0x51701862,"states.BIOState.update","states/BIOState.hx",157,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_161_update,"states.BIOState","update",0x51701862,"states.BIOState.update","states/BIOState.hx",161,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_169_update,"states.BIOState","update",0x51701862,"states.BIOState.update","states/BIOState.hx",169,0x2ac9fa88)
HX_LOCAL_STACK_FRAME(_hx_pos_354ddd56282f8f63_173_update,"states.BIOState","update",0x51701862,"states.BIOState.update","states/BIOState.hx",173,0x2ac9fa88)
namespace states{

void BIOState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_354ddd56282f8f63_26_new)
HXLINE(  40)		this->isFirst = false;
HXLINE(  34)		this->IsBios = false;
HXLINE(  26)		super::__construct();
            	}

Dynamic BIOState_obj::__CreateEmpty() { return new BIOState_obj; }

void *BIOState_obj::_hx_vtable = 0;

Dynamic BIOState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BIOState_obj > _hx_result = new BIOState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BIOState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x793d7747) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x793d7747;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void BIOState_obj::AddStartUI(){
            	HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_43_AddStartUI)
HXLINE(  44)		this->textMBR =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(::flixel::FlxG_obj::height - 135),0,HX_("Press ESC to load MBR",60,94,b5,96),52,null());
HXLINE(  45)		this->textMBR->setFormat(null(),52,16777215,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  46)		this->add(this->textMBR);
HXLINE(  48)		this->textBIOS =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(::flixel::FlxG_obj::height - 60),0,HX_("Press DEL to BIOS",be,e7,4d,0f),52,null());
HXLINE(  49)		this->textBIOS->setFormat(null(),52,16777215,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  50)		this->add(this->textBIOS);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BIOState_obj,AddStartUI,(void))

void BIOState_obj::AddBIOSUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::BIOState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_354ddd56282f8f63_54_AddBIOSUI)
HXLINE(  56)			if (::hx::IsEq( _gthis->o->__Field(HX_("autoMBR",4e,d7,77,9d),::hx::paccDynamic),false )) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::BIOState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_354ddd56282f8f63_58_AddBIOSUI)
HXLINE(  59)					_gthis->o->__SetField(HX_("autoMBR",4e,d7,77,9d),true,::hx::paccDynamic);
HXLINE(  60)					 ::Dynamic replacer = null();
HXDLIN(  60)					::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer,HX_("",00,00,00,00)));
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  58)				 ::Dynamic name =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN(  58)				::haxe::Timer_obj::delay(name,50);
            			}
HXLINE(  63)			if (::hx::IsEq( _gthis->o->__Field(HX_("autoMBR",4e,d7,77,9d),::hx::paccDynamic),true )) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::BIOState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_354ddd56282f8f63_65_AddBIOSUI)
HXLINE(  66)					_gthis->o->__SetField(HX_("autoMBR",4e,d7,77,9d),false,::hx::paccDynamic);
HXLINE(  67)					 ::Dynamic replacer = null();
HXDLIN(  67)					::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer,HX_("",00,00,00,00)));
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  65)				 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_1(_gthis));
HXDLIN(  65)				::haxe::Timer_obj::delay(name1,50);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::BIOState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_75_AddBIOSUI)
HXLINE(  77)			if (::hx::IsEq( _gthis->o->__Field(HX_("fastBIOS",47,ff,18,7d),::hx::paccDynamic),false )) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::BIOState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_79_AddBIOSUI)
HXLINE(  80)					_gthis->o->__SetField(HX_("fastBIOS",47,ff,18,7d),true,::hx::paccDynamic);
HXLINE(  81)					 ::Dynamic replacer = null();
HXDLIN(  81)					::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer,HX_("",00,00,00,00)));
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  79)				 ::Dynamic name =  ::Dynamic(new _hx_Closure_3(_gthis));
HXDLIN(  79)				::haxe::Timer_obj::delay(name,50);
            			}
HXLINE(  83)			if (::hx::IsEq( _gthis->o->__Field(HX_("fastBIOS",47,ff,18,7d),::hx::paccDynamic),true )) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::BIOState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_85_AddBIOSUI)
HXLINE(  86)					_gthis->o->__SetField(HX_("fastBIOS",47,ff,18,7d),false,::hx::paccDynamic);
HXLINE(  87)					 ::Dynamic replacer = null();
HXDLIN(  87)					::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(_gthis->o,replacer,HX_("",00,00,00,00)));
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  85)				 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_4(_gthis));
HXDLIN(  85)				::haxe::Timer_obj::delay(name1,50);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_53_AddBIOSUI)
HXDLIN(  53)		 ::states::BIOState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  54)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_2(_gthis));
HXDLIN(  54)		this->autombr =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("AutoBoot",61,2f,f3,fd),name);
HXLINE(  71)		this->autombr->makeGraphic(200,50,0,null(),null());
HXLINE(  72)		this->autombr->label->setFormat(null(),35,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  73)		this->itemsBios->add(this->autombr).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  75)		 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_5(_gthis));
HXDLIN(  75)		this->fastboot =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,65,HX_("FastBoot",0e,ad,e7,56),name1);
HXLINE(  91)		this->fastboot->makeGraphic(200,50,0,null(),null());
HXLINE(  92)		this->fastboot->label->setFormat(null(),35,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  93)		this->itemsBios->add(this->fastboot).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  95)		this->_hx_bool =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 50),0,HX_("",00,00,00,00),40,null());
HXLINE(  96)		this->itemsBios->add(this->_hx_bool).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  98)		this->desc =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 150),0,HX_("",00,00,00,00),35,null());
HXLINE(  99)		this->itemsBios->add(this->desc).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BIOState_obj,AddBIOSUI,(void))

void BIOState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::BIOState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_145_create)
HXLINE( 145)			_gthis->IsBootReady = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_102_create)
HXDLIN( 102)		 ::states::BIOState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 103)		this->super::create();
HXLINE( 105)		::flixel::FlxG_obj::sound->volumeDownKeys = null();
HXLINE( 106)		::flixel::FlxG_obj::sound->muteKeys = null();
HXLINE( 107)		::flixel::FlxG_obj::sound->volumeUpKeys = null();
HXLINE( 108)		::openfl::Lib_obj::get_application()->_hx___window->set_title(HX_("Windows 10",7c,4c,ca,e2));
HXLINE( 109)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 110)		::flixel::FlxG_obj::autoPause = false;
HXLINE( 112)		this->AddStartUI();
HXLINE( 114)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/bg.png",3d,7e,fe,cd));
HXLINE( 115)		{
HXLINE( 115)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN( 115)			int axes = 17;
HXDLIN( 115)			bool _hx_tmp;
HXDLIN( 115)			if ((axes != 1)) {
HXLINE( 115)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 115)				_hx_tmp = true;
            			}
HXDLIN( 115)			if (_hx_tmp) {
HXLINE( 115)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 115)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 115)			bool _hx_tmp2;
HXDLIN( 115)			if ((axes != 16)) {
HXLINE( 115)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 115)				_hx_tmp2 = true;
            			}
HXDLIN( 115)			if (_hx_tmp2) {
HXLINE( 115)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 115)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 116)		this->bg->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 117)		this->bg->set_color(262399);
HXLINE( 118)		this->bg->set_visible(false);
HXLINE( 119)		this->add(this->bg);
HXLINE( 121)		this->itemsBios =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 122)		this->itemsBios->set_visible(false);
HXLINE( 123)		this->add(this->itemsBios);
HXLINE( 125)		this->AddBIOSUI();
HXLINE( 127)		if (::sys::FileSystem_obj::exists(HX_("assets/data/settings.json",fa,e4,b3,61))) {
HXLINE( 129)			::String data = ::sys::io::File_obj::getContent(HX_("assets/data/settings.json",fa,e4,b3,61));
HXLINE( 130)			this->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE( 133)		if (::hx::IsEq( this->o->__Field(HX_("fastBIOS",47,ff,18,7d),::hx::paccDynamic),true )) {
HXLINE( 135)			this->TimeDelay = 1000;
            		}
HXLINE( 138)		if (::hx::IsEq( this->o->__Field(HX_("fastBIOS",47,ff,18,7d),::hx::paccDynamic),false )) {
HXLINE( 140)			this->TimeDelay = 2000;
            		}
HXLINE( 143)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN( 143)		::haxe::Timer_obj::delay(name,this->TimeDelay);
            	}


void BIOState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_354ddd56282f8f63_150_update)
HXLINE( 151)		this->super::update(elapsed);
HXLINE( 153)		bool _hx_tmp;
HXDLIN( 153)		bool _hx_tmp1;
HXDLIN( 153)		if (::hx::IsEq( this->o->__Field(HX_("autoMBR",4e,d7,77,9d),::hx::paccDynamic),true )) {
HXLINE( 153)			_hx_tmp1 = (this->IsBootReady == true);
            		}
            		else {
HXLINE( 153)			_hx_tmp1 = false;
            		}
HXDLIN( 153)		if (_hx_tmp1) {
HXLINE( 153)			_hx_tmp = (this->IsBios == false);
            		}
            		else {
HXLINE( 153)			_hx_tmp = false;
            		}
HXDLIN( 153)		if (_hx_tmp) {
HXLINE( 155)			if (::hx::IsEq( this->o->__Field(HX_("console",57,eb,d5,18),::hx::paccDynamic),true )) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				 ::Console _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_157_update)
HXLINE( 157)					return  ::Console_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 157)				::states::LoadState_obj::setLoadingScreen(1,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0())));
            			}
HXLINE( 159)			if (::hx::IsEq( this->o->__Field(HX_("console",57,eb,d5,18),::hx::paccDynamic),false )) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            				 ::states::MBRstate _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_161_update)
HXLINE( 161)					return  ::states::MBRstate_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 161)				::states::LoadState_obj::setLoadingScreen(1,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_1())));
            			}
            		}
HXLINE( 165)		bool _hx_tmp2;
HXDLIN( 165)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 165)		if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 165)			_hx_tmp2 = (this->IsBios == false);
            		}
            		else {
HXLINE( 165)			_hx_tmp2 = false;
            		}
HXDLIN( 165)		if (_hx_tmp2) {
HXLINE( 167)			if (::hx::IsEq( this->o->__Field(HX_("console",57,eb,d5,18),::hx::paccDynamic),true )) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            				 ::Console _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_169_update)
HXLINE( 169)					return  ::Console_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 169)				::states::LoadState_obj::setLoadingScreen(1,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_2())));
            			}
HXLINE( 171)			if (::hx::IsEq( this->o->__Field(HX_("console",57,eb,d5,18),::hx::paccDynamic),false )) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            				 ::states::MBRstate _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_354ddd56282f8f63_173_update)
HXLINE( 173)					return  ::states::MBRstate_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 173)				::states::LoadState_obj::setLoadingScreen(1,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_3())));
            			}
            		}
HXLINE( 176)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 176)		if (_this1->keyManager->checkStatusUnsafe(46,_this1->status)) {
HXLINE( 178)			this->IsBios = true;
            		}
HXLINE( 180)		if ((this->IsBios == true)) {
HXLINE( 183)			::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 184)			this->itemsBios->set_visible(true);
HXLINE( 185)			this->bg->set_visible(true);
HXLINE( 187)			if (::flixel::FlxG_obj::mouse->overlaps(this->autombr,null())) {
HXLINE( 189)				::String o = (::Std_obj::string( ::Dynamic(this->o->__Field(HX_("autoMBR",4e,d7,77,9d),::hx::paccDynamic))) + HX_("",00,00,00,00));
HXLINE( 190)				this->_hx_bool->set_text(o);
HXLINE( 191)				this->desc->set_text(HX_("auto loading boot after 2 seconds",14,17,2e,a5));
            			}
HXLINE( 193)			if (::flixel::FlxG_obj::mouse->overlaps(this->fastboot,null())) {
HXLINE( 195)				::String o1 = (::Std_obj::string( ::Dynamic(this->o->__Field(HX_("fastBIOS",47,ff,18,7d),::hx::paccDynamic))) + HX_("",00,00,00,00));
HXLINE( 196)				this->_hx_bool->set_text(o1);
HXLINE( 197)				this->desc->set_text(HX_("if true then boot loading 1 second",21,41,56,31));
            			}
HXLINE( 199)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN( 199)			if (_this2->keyManager->checkStatusUnsafe(27,_this2->status)) {
HXLINE( 201)				this->IsBios = false;
            			}
            		}
HXLINE( 204)		if ((this->IsBios == false)) {
HXLINE( 206)			::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 207)			this->bg->set_visible(false);
HXLINE( 208)			this->itemsBios->set_visible(false);
            		}
            	}



::hx::ObjectPtr< BIOState_obj > BIOState_obj::__new() {
	::hx::ObjectPtr< BIOState_obj > __this = new BIOState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BIOState_obj > BIOState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BIOState_obj *__this = (BIOState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BIOState_obj), true, "states.BIOState"));
	*(void **)__this = BIOState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BIOState_obj::BIOState_obj()
{
}

void BIOState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BIOState);
	HX_MARK_MEMBER_NAME(textMBR,"textMBR");
	HX_MARK_MEMBER_NAME(textBIOS,"textBIOS");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(IsBootReady,"IsBootReady");
	HX_MARK_MEMBER_NAME(TimeDelay,"TimeDelay");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(IsBios,"IsBios");
	HX_MARK_MEMBER_NAME(itemsBios,"itemsBios");
	HX_MARK_MEMBER_NAME(autombr,"autombr");
	HX_MARK_MEMBER_NAME(_hx_bool,"bool");
	HX_MARK_MEMBER_NAME(desc,"desc");
	HX_MARK_MEMBER_NAME(fastboot,"fastboot");
	HX_MARK_MEMBER_NAME(isFirst,"isFirst");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BIOState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(textMBR,"textMBR");
	HX_VISIT_MEMBER_NAME(textBIOS,"textBIOS");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(IsBootReady,"IsBootReady");
	HX_VISIT_MEMBER_NAME(TimeDelay,"TimeDelay");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(IsBios,"IsBios");
	HX_VISIT_MEMBER_NAME(itemsBios,"itemsBios");
	HX_VISIT_MEMBER_NAME(autombr,"autombr");
	HX_VISIT_MEMBER_NAME(_hx_bool,"bool");
	HX_VISIT_MEMBER_NAME(desc,"desc");
	HX_VISIT_MEMBER_NAME(fastboot,"fastboot");
	HX_VISIT_MEMBER_NAME(isFirst,"isFirst");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BIOState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bool") ) { return ::hx::Val( _hx_bool ); }
		if (HX_FIELD_EQ(inName,"desc") ) { return ::hx::Val( desc ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"IsBios") ) { return ::hx::Val( IsBios ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textMBR") ) { return ::hx::Val( textMBR ); }
		if (HX_FIELD_EQ(inName,"autombr") ) { return ::hx::Val( autombr ); }
		if (HX_FIELD_EQ(inName,"isFirst") ) { return ::hx::Val( isFirst ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textBIOS") ) { return ::hx::Val( textBIOS ); }
		if (HX_FIELD_EQ(inName,"fastboot") ) { return ::hx::Val( fastboot ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"TimeDelay") ) { return ::hx::Val( TimeDelay ); }
		if (HX_FIELD_EQ(inName,"itemsBios") ) { return ::hx::Val( itemsBios ); }
		if (HX_FIELD_EQ(inName,"AddBIOSUI") ) { return ::hx::Val( AddBIOSUI_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"AddStartUI") ) { return ::hx::Val( AddStartUI_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"IsBootReady") ) { return ::hx::Val( IsBootReady ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BIOState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bool") ) { _hx_bool=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"desc") ) { desc=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"IsBios") ) { IsBios=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textMBR") ) { textMBR=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autombr") ) { autombr=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isFirst") ) { isFirst=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textBIOS") ) { textBIOS=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastboot") ) { fastboot=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"TimeDelay") ) { TimeDelay=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"itemsBios") ) { itemsBios=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"IsBootReady") ) { IsBootReady=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BIOState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("textMBR",d0,44,c2,9e));
	outFields->push(HX_("textBIOS",d8,e5,f9,43));
	outFields->push(HX_("o",6f,00,00,00));
	outFields->push(HX_("IsBootReady",67,65,19,33));
	outFields->push(HX_("TimeDelay",16,8c,ea,2d));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("IsBios",d5,2f,12,93));
	outFields->push(HX_("itemsBios",cb,ce,c2,cf));
	outFields->push(HX_("autombr",6e,3b,90,9d));
	outFields->push(HX_("bool",2a,84,1b,41));
	outFields->push(HX_("desc",51,5e,66,42));
	outFields->push(HX_("fastboot",ce,c4,5c,92));
	outFields->push(HX_("isFirst",e6,1b,23,9d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BIOState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(BIOState_obj,textMBR),HX_("textMBR",d0,44,c2,9e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(BIOState_obj,textBIOS),HX_("textBIOS",d8,e5,f9,43)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BIOState_obj,o),HX_("o",6f,00,00,00)},
	{::hx::fsBool,(int)offsetof(BIOState_obj,IsBootReady),HX_("IsBootReady",67,65,19,33)},
	{::hx::fsInt,(int)offsetof(BIOState_obj,TimeDelay),HX_("TimeDelay",16,8c,ea,2d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BIOState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsBool,(int)offsetof(BIOState_obj,IsBios),HX_("IsBios",d5,2f,12,93)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(BIOState_obj,itemsBios),HX_("itemsBios",cb,ce,c2,cf)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(BIOState_obj,autombr),HX_("autombr",6e,3b,90,9d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(BIOState_obj,_hx_bool),HX_("bool",2a,84,1b,41)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(BIOState_obj,desc),HX_("desc",51,5e,66,42)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(BIOState_obj,fastboot),HX_("fastboot",ce,c4,5c,92)},
	{::hx::fsBool,(int)offsetof(BIOState_obj,isFirst),HX_("isFirst",e6,1b,23,9d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BIOState_obj_sStaticStorageInfo = 0;
#endif

static ::String BIOState_obj_sMemberFields[] = {
	HX_("textMBR",d0,44,c2,9e),
	HX_("textBIOS",d8,e5,f9,43),
	HX_("o",6f,00,00,00),
	HX_("IsBootReady",67,65,19,33),
	HX_("TimeDelay",16,8c,ea,2d),
	HX_("bg",c5,55,00,00),
	HX_("IsBios",d5,2f,12,93),
	HX_("itemsBios",cb,ce,c2,cf),
	HX_("autombr",6e,3b,90,9d),
	HX_("bool",2a,84,1b,41),
	HX_("desc",51,5e,66,42),
	HX_("fastboot",ce,c4,5c,92),
	HX_("isFirst",e6,1b,23,9d),
	HX_("AddStartUI",35,4b,56,93),
	HX_("AddBIOSUI",80,ea,a7,c5),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class BIOState_obj::__mClass;

void BIOState_obj::__register()
{
	BIOState_obj _hx_dummy;
	BIOState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.BIOState",f5,7c,df,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BIOState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BIOState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BIOState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BIOState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
