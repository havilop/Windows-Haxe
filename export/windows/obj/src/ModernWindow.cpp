// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_ModernWindow
#include <ModernWindow.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3447d11965d395e7_7_new,"ModernWindow","new",0x6f778fc1,"ModernWindow.new","ModernWindow.hx",7,0xa38362cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3447d11965d395e7_67_draw,"ModernWindow","draw",0x1293e183,"ModernWindow.draw","ModernWindow.hx",67,0xa38362cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3447d11965d395e7_75_update,"ModernWindow","update",0x6fa0d948,"ModernWindow.update","ModernWindow.hx",75,0xa38362cf)

void ModernWindow_obj::__construct(int X,::String title,::String icon, ::Dynamic OnAppear, ::Dynamic DefaultExit, ::Dynamic DefaultMinus,bool CanTouch){
            	HX_GC_STACKFRAME(&_hx_pos_3447d11965d395e7_7_new)
HXLINE(  17)		this->dragOffsetY = ((Float)0);
HXLINE(  16)		this->dragOffsetX = ((Float)0);
HXLINE(  15)		this->isDragging = false;
HXLINE(  29)		super::__construct(0,0,HX_("assets/images/modernWindow.png",95,cd,64,93));
HXLINE(  31)		{
HXLINE(  31)			int axes = 17;
HXDLIN(  31)			bool _hx_tmp;
HXDLIN(  31)			if ((axes != 1)) {
HXLINE(  31)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  31)				_hx_tmp = true;
            			}
HXDLIN(  31)			if (_hx_tmp) {
HXLINE(  31)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  31)				this->set_x(((( (Float)(_hx_tmp1) ) - this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  31)			bool _hx_tmp2;
HXDLIN(  31)			if ((axes != 16)) {
HXLINE(  31)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  31)				_hx_tmp2 = true;
            			}
HXDLIN(  31)			if (_hx_tmp2) {
HXLINE(  31)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  31)				this->set_y(((( (Float)(_hx_tmp3) ) - this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  32)		this->super::setGraphicSize(X,30);
HXLINE(  33)		this->super::updateHitbox();
HXLINE(  36)		Float _hx_tmp4 = (this->x + 35);
HXDLIN(  36)		Float _hx_tmp5 = (this->y + 15);
HXDLIN(  36)		this->titleText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp4,_hx_tmp5,(this->get_width() - ( (Float)(40) )),title,null(),null());
HXLINE(  37)		this->titleText->setFormat(null(),16,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  38)		this->titleText->set_font(HX_("assets/fonts/my.ttf",5b,83,ee,55));
HXLINE(  40)		this->iconWindow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->x - ( (Float)(10) )),(this->y + 5),icon);
HXLINE(  41)		this->iconWindow->setGraphicSize(30,30);
HXLINE(  42)		this->iconWindow->updateHitbox();
HXLINE(  44)		Float _hx_tmp6 = this->x;
HXDLIN(  44)		Float _hx_tmp7 = ((_hx_tmp6 + this->get_width()) - ( (Float)(30) ));
HXDLIN(  44)		this->exitWindow =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,_hx_tmp7,this->y,HX_("",00,00,00,00),DefaultExit);
HXLINE(  45)		this->exitWindow->label->setFormat(null(),16,-1,null(),null(),null(),null());
HXLINE(  46)		this->exitWindow->makeGraphic(30,20,-65536,null(),null());
HXLINE(  47)		this->exitWindow->label->offset->set_y(( (Float)(-2) ));
HXLINE(  48)		this->exitWindow->loadGraphic(HX_("assets/images/modernexit.png",23,d5,c3,bb),null(),null(),null(),null(),null());
HXLINE(  49)		this->exitWindow->updateHitbox();
HXLINE(  52)		Float _hx_tmp8 = this->x;
HXDLIN(  52)		Float _hx_tmp9 = ((_hx_tmp8 + this->get_width()) - ( (Float)(30) ));
HXDLIN(  52)		this->minusWindow =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,_hx_tmp9,this->y,HX_("",00,00,00,00),DefaultMinus);
HXLINE(  53)		this->minusWindow->label->setFormat(null(),16,-1,null(),null(),null(),null());
HXLINE(  54)		this->minusWindow->makeGraphic(30,20,-65536,null(),null());
HXLINE(  55)		this->minusWindow->label->offset->set_y(( (Float)(-2) ));
HXLINE(  56)		this->minusWindow->loadGraphic(HX_("assets/images/modernminus.png",a1,6c,7b,92),null(),null(),null(),null(),null());
HXLINE(  57)		this->minusWindow->updateHitbox();
HXLINE(  59)		this->canTouch = CanTouch;
HXLINE(  61)		OnAppear();
            	}

Dynamic ModernWindow_obj::__CreateEmpty() { return new ModernWindow_obj; }

void *ModernWindow_obj::_hx_vtable = 0;

Dynamic ModernWindow_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModernWindow_obj > _hx_result = new ModernWindow_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool ModernWindow_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x28a0bcd7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x28a0bcd7;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void ModernWindow_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_3447d11965d395e7_67_draw)
HXLINE(  68)		this->super::draw();
HXLINE(  69)		this->iconWindow->draw();
HXLINE(  70)		this->exitWindow->draw();
HXLINE(  71)		this->minusWindow->draw();
HXLINE(  72)		this->titleText->draw();
            	}


void ModernWindow_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3447d11965d395e7_75_update)
HXLINE(  76)		this->super::update(elapsed);
HXLINE(  78)		bool _hx_tmp;
HXDLIN(  78)		bool _hx_tmp1;
HXDLIN(  78)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(  78)			_hx_tmp1 = ::flixel::FlxG_obj::mouse->overlaps(::hx::ObjectPtr<OBJ_>(this),null());
            		}
            		else {
HXLINE(  78)			_hx_tmp1 = false;
            		}
HXDLIN(  78)		if (_hx_tmp1) {
HXLINE(  78)			_hx_tmp = (this->canTouch == true);
            		}
            		else {
HXLINE(  78)			_hx_tmp = false;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  80)			this->isDragging = true;
HXLINE(  81)			this->dragOffsetX = (( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->x);
HXLINE(  82)			this->dragOffsetY = (( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->y);
            		}
HXLINE(  85)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE(  87)			this->isDragging = false;
            		}
HXLINE(  90)		if (this->isDragging) {
HXLINE(  92)			this->set_x((( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->dragOffsetX));
HXLINE(  93)			this->set_y((( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->dragOffsetY));
            		}
HXLINE( 100)		this->exitWindow->update(elapsed);
HXLINE( 103)		 ::flixel::ui::FlxButton _hx_tmp2 = this->exitWindow;
HXDLIN( 103)		Float _hx_tmp3 = this->x;
HXDLIN( 103)		_hx_tmp2->set_x(((_hx_tmp3 + this->get_width()) - ( (Float)(48) )));
HXLINE( 104)		this->exitWindow->set_y(this->y);
HXLINE( 106)		 ::flixel::ui::FlxButton _hx_tmp4 = this->minusWindow;
HXDLIN( 106)		Float _hx_tmp5 = this->x;
HXDLIN( 106)		_hx_tmp4->set_x(((_hx_tmp5 + this->get_width()) - ( (Float)(90) )));
HXLINE( 107)		this->minusWindow->set_y(this->y);
HXLINE( 109)		this->titleText->set_x((this->x + 30));
HXLINE( 110)		this->titleText->set_y((this->y + 4));
HXLINE( 112)		this->iconWindow->set_x(this->x);
HXLINE( 113)		this->iconWindow->set_y(this->y);
            	}



::hx::ObjectPtr< ModernWindow_obj > ModernWindow_obj::__new(int X,::String title,::String icon, ::Dynamic OnAppear, ::Dynamic DefaultExit, ::Dynamic DefaultMinus,bool CanTouch) {
	::hx::ObjectPtr< ModernWindow_obj > __this = new ModernWindow_obj();
	__this->__construct(X,title,icon,OnAppear,DefaultExit,DefaultMinus,CanTouch);
	return __this;
}

::hx::ObjectPtr< ModernWindow_obj > ModernWindow_obj::__alloc(::hx::Ctx *_hx_ctx,int X,::String title,::String icon, ::Dynamic OnAppear, ::Dynamic DefaultExit, ::Dynamic DefaultMinus,bool CanTouch) {
	ModernWindow_obj *__this = (ModernWindow_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModernWindow_obj), true, "ModernWindow"));
	*(void **)__this = ModernWindow_obj::_hx_vtable;
	__this->__construct(X,title,icon,OnAppear,DefaultExit,DefaultMinus,CanTouch);
	return __this;
}

ModernWindow_obj::ModernWindow_obj()
{
}

void ModernWindow_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModernWindow);
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(iconWindow,"iconWindow");
	HX_MARK_MEMBER_NAME(exitWindow,"exitWindow");
	HX_MARK_MEMBER_NAME(minusWindow,"minusWindow");
	HX_MARK_MEMBER_NAME(isDragging,"isDragging");
	HX_MARK_MEMBER_NAME(dragOffsetX,"dragOffsetX");
	HX_MARK_MEMBER_NAME(dragOffsetY,"dragOffsetY");
	HX_MARK_MEMBER_NAME(canTouch,"canTouch");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModernWindow_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(iconWindow,"iconWindow");
	HX_VISIT_MEMBER_NAME(exitWindow,"exitWindow");
	HX_VISIT_MEMBER_NAME(minusWindow,"minusWindow");
	HX_VISIT_MEMBER_NAME(isDragging,"isDragging");
	HX_VISIT_MEMBER_NAME(dragOffsetX,"dragOffsetX");
	HX_VISIT_MEMBER_NAME(dragOffsetY,"dragOffsetY");
	HX_VISIT_MEMBER_NAME(canTouch,"canTouch");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModernWindow_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canTouch") ) { return ::hx::Val( canTouch ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"iconWindow") ) { return ::hx::Val( iconWindow ); }
		if (HX_FIELD_EQ(inName,"exitWindow") ) { return ::hx::Val( exitWindow ); }
		if (HX_FIELD_EQ(inName,"isDragging") ) { return ::hx::Val( isDragging ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"minusWindow") ) { return ::hx::Val( minusWindow ); }
		if (HX_FIELD_EQ(inName,"dragOffsetX") ) { return ::hx::Val( dragOffsetX ); }
		if (HX_FIELD_EQ(inName,"dragOffsetY") ) { return ::hx::Val( dragOffsetY ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ModernWindow_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"canTouch") ) { canTouch=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"iconWindow") ) { iconWindow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"exitWindow") ) { exitWindow=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDragging") ) { isDragging=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"minusWindow") ) { minusWindow=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragOffsetX") ) { dragOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragOffsetY") ) { dragOffsetY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModernWindow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("iconWindow",49,50,20,a4));
	outFields->push(HX_("exitWindow",ae,29,16,93));
	outFields->push(HX_("minusWindow",80,7c,4d,ba));
	outFields->push(HX_("isDragging",d9,4e,3b,b2));
	outFields->push(HX_("dragOffsetX",d1,2b,86,8d));
	outFields->push(HX_("dragOffsetY",d2,2b,86,8d));
	outFields->push(HX_("canTouch",8f,59,c6,82));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModernWindow_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ModernWindow_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModernWindow_obj,iconWindow),HX_("iconWindow",49,50,20,a4)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(ModernWindow_obj,exitWindow),HX_("exitWindow",ae,29,16,93)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(ModernWindow_obj,minusWindow),HX_("minusWindow",80,7c,4d,ba)},
	{::hx::fsBool,(int)offsetof(ModernWindow_obj,isDragging),HX_("isDragging",d9,4e,3b,b2)},
	{::hx::fsFloat,(int)offsetof(ModernWindow_obj,dragOffsetX),HX_("dragOffsetX",d1,2b,86,8d)},
	{::hx::fsFloat,(int)offsetof(ModernWindow_obj,dragOffsetY),HX_("dragOffsetY",d2,2b,86,8d)},
	{::hx::fsBool,(int)offsetof(ModernWindow_obj,canTouch),HX_("canTouch",8f,59,c6,82)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ModernWindow_obj_sStaticStorageInfo = 0;
#endif

static ::String ModernWindow_obj_sMemberFields[] = {
	HX_("titleText",65,ba,a4,70),
	HX_("iconWindow",49,50,20,a4),
	HX_("exitWindow",ae,29,16,93),
	HX_("minusWindow",80,7c,4d,ba),
	HX_("isDragging",d9,4e,3b,b2),
	HX_("dragOffsetX",d1,2b,86,8d),
	HX_("dragOffsetY",d2,2b,86,8d),
	HX_("canTouch",8f,59,c6,82),
	HX_("draw",04,2c,70,42),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class ModernWindow_obj::__mClass;

void ModernWindow_obj::__register()
{
	ModernWindow_obj _hx_dummy;
	ModernWindow_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ModernWindow",4f,9b,2a,db);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModernWindow_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModernWindow_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModernWindow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModernWindow_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

