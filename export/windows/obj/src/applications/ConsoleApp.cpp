// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_Logon
#include <Logon.h>
#endif
#ifndef INCLUDED_ModernWindow
#include <ModernWindow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_applications_ConsoleApp
#include <applications/ConsoleApp.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_states_BIOState
#include <states/BIOState.h>
#endif
#ifndef INCLUDED_states_LoadState
#include <states/LoadState.h>
#endif
#ifndef INCLUDED_states_WindowsState
#include <states/WindowsState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_207da414e1f96d50_54_new,"applications.ConsoleApp","new",0x471f7487,"applications.ConsoleApp.new","applications/ConsoleApp.hx",54,0x69740c28)
HX_DEFINE_STACK_FRAME(_hx_pos_207da414e1f96d50_81_new,"applications.ConsoleApp","new",0x471f7487,"applications.ConsoleApp.new","applications/ConsoleApp.hx",81,0x69740c28)
HX_DEFINE_STACK_FRAME(_hx_pos_207da414e1f96d50_27_new,"applications.ConsoleApp","new",0x471f7487,"applications.ConsoleApp.new","applications/ConsoleApp.hx",27,0x69740c28)
static const ::String _hx_array_data_80032515_3[] = {
	HX_("help",c1,32,0b,45),HX_("exit",1e,f7,1d,43),HX_("clear",8d,71,5b,48),HX_("shutdown",96,fc,0b,6b),HX_("apps",b2,10,73,40),HX_("random",03,22,8f,b7),
};
static const ::String _hx_array_data_80032515_4[] = {
	HX_("god",3c,89,4e,00),HX_("russia",bb,29,ec,3e),HX_("sex",a6,9b,57,00),HX_("windowshaxe",29,10,c2,d9),HX_("girl",5c,0a,65,44),HX_("house",a0,2f,64,2b),HX_("engineer",af,94,f7,5b),HX_("centre",1b,31,db,05),HX_("throw",26,5d,90,0f),HX_("work",d1,01,fd,4e),HX_("water",17,18,25,c5),HX_("bottle",46,e4,78,65),HX_("sunbed",35,8b,ec,a1),HX_("loggia",fb,d9,68,5c),HX_("button",f2,61,e0,d9),HX_("bother",2e,c3,6f,65),HX_("tunell",78,34,4a,08),HX_("hardwar",1d,57,78,93),HX_("rabbit",da,08,9f,af),HX_("ride",f8,56,aa,4b),HX_("blow up",49,e4,fd,51),HX_("click",48,7c,5e,48),HX_("chaos",40,9a,b3,45),HX_("virus",fd,c1,06,37),HX_("USA",23,c8,40,00),HX_("tramp",46,97,1f,16),HX_("potato",a7,8d,69,fe),HX_("harvest",69,95,50,9f),HX_("host",68,cf,12,45),HX_("fine",3a,d0,bb,43),HX_("diamond",54,67,1a,5c),
};
HX_LOCAL_STACK_FRAME(_hx_pos_207da414e1f96d50_46_int,"applications.ConsoleApp","int",0x471bb116,"applications.ConsoleApp.int","applications/ConsoleApp.hx",46,0x69740c28)
HX_LOCAL_STACK_FRAME(_hx_pos_207da414e1f96d50_87_exit,"applications.ConsoleApp","exit",0xee81f517,"applications.ConsoleApp.exit","applications/ConsoleApp.hx",87,0x69740c28)
HX_LOCAL_STACK_FRAME(_hx_pos_207da414e1f96d50_94_onConsoleCommandEntered,"applications.ConsoleApp","onConsoleCommandEntered",0x6cdbfd2b,"applications.ConsoleApp.onConsoleCommandEntered","applications/ConsoleApp.hx",94,0x69740c28)
HX_LOCAL_STACK_FRAME(_hx_pos_207da414e1f96d50_127_onConsoleCommandEntered,"applications.ConsoleApp","onConsoleCommandEntered",0x6cdbfd2b,"applications.ConsoleApp.onConsoleCommandEntered","applications/ConsoleApp.hx",127,0x69740c28)
HX_LOCAL_STACK_FRAME(_hx_pos_207da414e1f96d50_190_logToConsole,"applications.ConsoleApp","logToConsole",0xed5e1cf1,"applications.ConsoleApp.logToConsole","applications/ConsoleApp.hx",190,0x69740c28)
HX_LOCAL_STACK_FRAME(_hx_pos_207da414e1f96d50_197_stopFunction,"applications.ConsoleApp","stopFunction",0x8dab4833,"applications.ConsoleApp.stopFunction","applications/ConsoleApp.hx",197,0x69740c28)
HX_LOCAL_STACK_FRAME(_hx_pos_207da414e1f96d50_200_update,"applications.ConsoleApp","update",0xd1dfb442,"applications.ConsoleApp.update","applications/ConsoleApp.hx",200,0x69740c28)
HX_LOCAL_STACK_FRAME(_hx_pos_207da414e1f96d50_244_destroy,"applications.ConsoleApp","destroy",0x589470a1,"applications.ConsoleApp.destroy","applications/ConsoleApp.hx",244,0x69740c28)
namespace applications{

void ConsoleApp_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::applications::ConsoleApp,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_207da414e1f96d50_54_new)
HXLINE(  56)			_gthis->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/bg.png",3d,7e,fe,cd));
HXLINE(  57)			_gthis->bg->setGraphicSize(900,500);
HXLINE(  58)			_gthis->bg->updateHitbox();
HXLINE(  59)			_gthis->bg->set_color(1579032);
HXLINE(  60)			_gthis->add(_gthis->bg).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  62)			_gthis->consoleOutput =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,(::flixel::FlxG_obj::width - 40),HX_("",00,00,00,00),12,null());
HXLINE(  63)			_gthis->consoleOutput->set_color(-1);
HXLINE(  64)			_gthis->add(_gthis->consoleOutput).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  66)			_gthis->consoleInput =  ::flixel::addons::ui::FlxInputText_obj::__alloc( HX_CTX ,0,0,895,HX_("",00,00,00,00),12,-1,-16777216,null());
HXLINE(  67)			_gthis->consoleInput->callback = _gthis->onConsoleCommandEntered_dyn();
HXLINE(  68)			_gthis->add(_gthis->consoleInput).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  70)			_gthis->consoleInput->set_hasFocus(false);
HXLINE(  71)			_gthis->consoleInput->set_hasFocus(true);
HXLINE(  73)			_gthis->logToConsole(HX_("Type help to list commands",de,4d,7a,30));
HXLINE(  74)			if (::sys::FileSystem_obj::exists(HX_("assets/data/settings.json",fa,e4,b3,61))) {
HXLINE(  76)				::String data = ::sys::io::File_obj::getContent(HX_("assets/data/settings.json",fa,e4,b3,61));
HXLINE(  77)				_gthis->o =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_207da414e1f96d50_81_new)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_207da414e1f96d50_27_new)
HXLINE(  41)		this->listCommand = ::Array_obj< ::String >::fromData( _hx_array_data_80032515_3,6);
HXLINE(  40)		this->listWords = ::Array_obj< ::String >::fromData( _hx_array_data_80032515_4,31);
HXLINE(  33)		this->IsUPorDOWN = false;
HXLINE(  50)		 ::applications::ConsoleApp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  51)		super::__construct(null());
HXLINE(  52)		this->super::taskbar(HX_("console",57,eb,d5,18));
HXLINE(  53)		 ::Dynamic appear =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  80)		 ::Dynamic minus =  ::Dynamic(new _hx_Closure_1());
HXLINE(  53)		this->window =  ::ModernWindow_obj::__alloc( HX_CTX ,900,HX_("Console",37,13,27,e6),HX_("assets/images/icons/console.png",12,1a,e9,58),appear,this->exit_dyn(),minus,true);
HXLINE(  83)		this->add(this->window);
HXLINE(  84)		this->upstored = -30;
            	}

Dynamic ConsoleApp_obj::__CreateEmpty() { return new ConsoleApp_obj; }

void *ConsoleApp_obj::_hx_vtable = 0;

Dynamic ConsoleApp_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ConsoleApp_obj > _hx_result = new ConsoleApp_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ConsoleApp_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0ad7a431) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ad7a431;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7ed5f915;
	}
}

int ConsoleApp_obj::_hx_int(int from,int to){
            	HX_STACKFRAME(&_hx_pos_207da414e1f96d50_46_int)
HXDLIN(  46)		return (from + ::Math_obj::floor((( (Float)(((to - from) + 1)) ) * ::Math_obj::random())));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ConsoleApp_obj,_hx_int,return )

void ConsoleApp_obj::exit(){
            	HX_STACKFRAME(&_hx_pos_207da414e1f96d50_87_exit)
HXLINE(  88)		::App_obj::listApplications->remove(HX_("console",57,eb,d5,18));
HXLINE(  89)		this->updateItems();
HXLINE(  90)		this->kill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConsoleApp_obj,exit,(void))

void ConsoleApp_obj::onConsoleCommandEntered( ::Dynamic text,::String action){
            	HX_GC_STACKFRAME(&_hx_pos_207da414e1f96d50_94_onConsoleCommandEntered)
HXDLIN(  94)		if ((action == HX_("enter",18,6d,86,70))) {
HXLINE(  96)			 ::Dynamic _hx_switch_0 = text;
            			if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE( 147)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("/autombr false",e2,91,b4,fe)) ){
HXLINE( 150)				this->o->__SetField(HX_("autoMBR",4e,d7,77,9d),false,::hx::paccDynamic);
HXLINE( 151)				 ::Dynamic replacer = null();
HXDLIN( 151)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(this->o,replacer,HX_("",00,00,00,00)));
HXLINE( 149)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("/autombr true",ef,d7,28,ca)) ){
HXLINE( 153)				this->o->__SetField(HX_("autoMBR",4e,d7,77,9d),true,::hx::paccDynamic);
HXLINE( 154)				 ::Dynamic replacer1 = null();
HXDLIN( 154)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(this->o,replacer1,HX_("",00,00,00,00)));
HXLINE( 152)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("/fastBIOS false",79,44,c3,e9)) ){
HXLINE( 159)				this->o->__SetField(HX_("fastBIOS",47,ff,18,7d),false,::hx::paccDynamic);
HXLINE( 160)				 ::Dynamic replacer2 = null();
HXDLIN( 160)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(this->o,replacer2,HX_("",00,00,00,00)));
HXLINE( 158)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("/fastBIOS true",38,c5,e9,e7)) ){
HXLINE( 156)				this->o->__SetField(HX_("fastBIOS",47,ff,18,7d),true,::hx::paccDynamic);
HXLINE( 157)				 ::Dynamic replacer3 = null();
HXDLIN( 157)				::sys::io::File_obj::saveContent(HX_("assets/data/settings.json",fa,e4,b3,61),::haxe::format::JsonPrinter_obj::print(this->o,replacer3,HX_("",00,00,00,00)));
HXLINE( 155)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("apps",b2,10,73,40)) ){
HXLINE( 136)				this->stopFunction();
HXLINE( 137)				{
HXLINE( 137)					int _g = 0;
HXDLIN( 137)					::Array< ::String > _g1 = ::App_obj::Apps;
HXDLIN( 137)					while((_g < _g1->length)){
HXLINE( 137)						::String apps = _g1->__get(_g);
HXDLIN( 137)						_g = (_g + 1);
HXLINE( 139)						this->logToConsole(apps);
            					}
            				}
HXLINE( 135)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("clear",8d,71,5b,48)) ){
HXLINE(  98)				this->consoleOutput->set_text(HX_("",00,00,00,00));
HXLINE(  99)				this->upstored = -30;
HXLINE( 100)				this->logToConsole(HX_("Type help to list commands",de,4d,7a,30));
HXLINE( 101)				this->stopFunction();
HXLINE(  97)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("exit",1e,f7,1d,43)) ){
HXLINE( 109)				this->exit();
HXDLIN( 109)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("explorer",ff,48,eb,4f)) ){
HXLINE( 133)				this->stopFunction();
HXLINE( 134)				this->logToConsole(HX_("Success!",1e,a1,c4,65));
HXLINE( 132)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("help",c1,32,0b,45)) ){
HXLINE( 103)				{
HXLINE( 103)					int _g2 = 0;
HXDLIN( 103)					::Array< ::String > _g3 = this->listCommand;
HXDLIN( 103)					while((_g2 < _g3->length)){
HXLINE( 103)						::String cmd = _g3->__get(_g2);
HXDLIN( 103)						_g2 = (_g2 + 1);
HXLINE( 105)						this->logToConsole(cmd);
            					}
            				}
HXLINE( 107)				this->stopFunction();
HXLINE( 102)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("logon",a3,de,f3,78)) ){
HXLINE( 111)				 ::Logon logon =  ::Logon_obj::__alloc( HX_CTX );
HXLINE( 112)				this->add(logon);
HXLINE( 113)				this->stopFunction();
HXLINE( 110)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("random",03,22,8f,b7)) ){
HXLINE( 142)				this->consoleOutput->set_text(HX_("",00,00,00,00));
HXLINE( 143)				this->logToConsole(HX_("Type stop to exit random words",01,74,f9,65));
HXLINE( 144)				this->IsRandom = true;
HXLINE( 141)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("shutdown",96,fc,0b,6b)) ){
HXLINE( 129)				this->stopFunction();
HXLINE( 130)				this->logToConsole(HX_("shutdown /off",6a,ce,c2,21));
HXLINE( 131)				this->logToConsole(HX_("shutdown /restart",4a,9c,4c,9e));
HXLINE( 128)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("shutdown /off",6a,ce,c2,21)) ){
HXLINE( 118)				::Sys_obj::exit(0);
HXDLIN( 118)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("shutdown /restart",4a,9c,4c,9e)) ){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				 ::states::BIOState _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_207da414e1f96d50_127_onConsoleCommandEntered)
HXLINE( 127)					return  ::states::BIOState_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 120)				{
HXLINE( 120)					int _g4 = 0;
HXDLIN( 120)					::Array< ::String > _g5 = ::App_obj::listApplications;
HXDLIN( 120)					while((_g4 < _g5->length)){
HXLINE( 120)						::String i = _g5->__get(_g4);
HXDLIN( 120)						_g4 = (_g4 + 1);
HXLINE( 122)						::haxe::Log_obj::trace(i,::hx::SourceInfo(HX_("source/applications/ConsoleApp.hx",1c,fc,7a,56),122,HX_("applications.ConsoleApp",15,25,03,80),HX_("onConsoleCommandEntered",84,bb,c9,7f)));
HXLINE( 123)						::App_obj::listApplications->remove(i);
HXLINE( 124)						::haxe::Log_obj::trace(::App_obj::listApplications,::hx::SourceInfo(HX_("source/applications/ConsoleApp.hx",1c,fc,7a,56),124,HX_("applications.ConsoleApp",15,25,03,80),HX_("onConsoleCommandEntered",84,bb,c9,7f)));
            					}
            				}
HXLINE( 126)				::haxe::Log_obj::trace(::App_obj::listApplications,::hx::SourceInfo(HX_("source/applications/ConsoleApp.hx",1c,fc,7a,56),126,HX_("applications.ConsoleApp",15,25,03,80),HX_("onConsoleCommandEntered",84,bb,c9,7f)));
HXLINE( 127)				::states::LoadState_obj::setLoadingScreen(2000,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0())));
HXLINE( 119)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("stop",02,f0,5b,4c)) ){
HXLINE( 146)				this->IsRandom = false;
HXDLIN( 146)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("taskbar",ae,0b,71,1e)) ){
HXLINE( 115)				this->stopFunction();
HXLINE( 116)				::states::WindowsState_obj::IsReset = true;
HXLINE( 114)				goto _hx_goto_7;
            			}
            			/* default */{
HXLINE( 162)				this->logToConsole((HX_("Error invalid command ",36,c6,2e,92) + ::Std_obj::string(text)));
            			}
            			_hx_goto_7:;
HXLINE( 164)			{
HXLINE( 164)				int _g6 = 0;
HXDLIN( 164)				::Array< ::String > _g7 = ::App_obj::Apps;
HXDLIN( 164)				while((_g6 < _g7->length)){
HXLINE( 164)					::String apps1 = _g7->__get(_g6);
HXDLIN( 164)					_g6 = (_g6 + 1);
HXLINE( 166)					if (::hx::IsEq( text,apps1 )) {
HXLINE( 168)						this->logToConsole(((HX_("Success! the app ",b0,71,eb,5c) + apps1) + HX_(" is open",a0,0b,2d,e6)));
HXLINE( 169)						::states::WindowsState_obj::openApp(apps1);
HXLINE( 170)						::haxe::Log_obj::trace(HX_("Function Called",85,10,9b,87),::hx::SourceInfo(HX_("source/applications/ConsoleApp.hx",1c,fc,7a,56),170,HX_("applications.ConsoleApp",15,25,03,80),HX_("onConsoleCommandEntered",84,bb,c9,7f)));
            					}
            				}
            			}
HXLINE( 173)			if ((this->IsRandom == true)) {
HXLINE( 175)				int max = (this->listWords->length - 1);
HXLINE( 176)				::haxe::Log_obj::trace(max,::hx::SourceInfo(HX_("source/applications/ConsoleApp.hx",1c,fc,7a,56),176,HX_("applications.ConsoleApp",15,25,03,80),HX_("onConsoleCommandEntered",84,bb,c9,7f)));
HXLINE( 177)				int random = this->_hx_int(0,max);
HXLINE( 178)				::haxe::Log_obj::trace(random,::hx::SourceInfo(HX_("source/applications/ConsoleApp.hx",1c,fc,7a,56),178,HX_("applications.ConsoleApp",15,25,03,80),HX_("onConsoleCommandEntered",84,bb,c9,7f)));
HXLINE( 179)				::String word = this->listWords->__get(random);
HXLINE( 180)				::haxe::Log_obj::trace(word,::hx::SourceInfo(HX_("source/applications/ConsoleApp.hx",1c,fc,7a,56),180,HX_("applications.ConsoleApp",15,25,03,80),HX_("onConsoleCommandEntered",84,bb,c9,7f)));
HXLINE( 181)				this->logToConsole(word);
            			}
HXLINE( 183)			this->consoleInput->set_text(HX_("",00,00,00,00));
HXLINE( 184)			this->consoleInput->set_hasFocus(false);
HXLINE( 185)			this->consoleInput->set_hasFocus(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ConsoleApp_obj,onConsoleCommandEntered,(void))

void ConsoleApp_obj::logToConsole(::String message){
            	HX_STACKFRAME(&_hx_pos_207da414e1f96d50_190_logToConsole)
HXLINE( 191)		 ::flixel::text::FlxText fh = this->consoleOutput;
HXDLIN( 191)		fh->set_text((fh->text + ((HX_("> ",22,36,00,00) + message) + HX_("\n",0a,00,00,00))));
HXLINE( 192)		this->consoleInput->set_hasFocus(false);
HXLINE( 193)		this->consoleInput->set_hasFocus(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConsoleApp_obj,logToConsole,(void))

void ConsoleApp_obj::stopFunction(){
            	HX_STACKFRAME(&_hx_pos_207da414e1f96d50_197_stopFunction)
HXDLIN( 197)		this->IsRandom = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConsoleApp_obj,stopFunction,(void))

void ConsoleApp_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_207da414e1f96d50_200_update)
HXLINE( 201)		this->super::update(elapsed);
HXLINE( 203)		this->bg->set_x(this->window->x);
HXLINE( 204)		this->bg->set_y(this->window->y);
HXLINE( 206)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 206)		if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 208)			this->IsUPorDOWN = true;
HXLINE( 209)			this->up = true;
HXLINE( 210)			this->down = false;
HXLINE( 211)			 ::applications::ConsoleApp _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 211)			_hx_tmp->upstored = (_hx_tmp->upstored - 20);
HXLINE( 212)			if (::hx::IsLessEq( this->upstored,-50 )) {
HXLINE( 213)				this->upstored = -30;
            			}
            		}
HXLINE( 216)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 216)		if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 218)			this->IsUPorDOWN = true;
HXLINE( 219)			this->up = false;
HXLINE( 220)			this->down = true;
HXLINE( 221)			 ::applications::ConsoleApp _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 221)			_hx_tmp1->upstored = (_hx_tmp1->upstored + 20);
            		}
HXLINE( 223)		if ((this->IsUPorDOWN == true)) {
HXLINE( 225)			if ((this->up == true)) {
HXLINE( 227)				if (::hx::IsLessEq( this->upstored,-50 )) {
HXLINE( 228)					this->upstored = -30;
            				}
HXLINE( 230)				this->consoleOutput->set_y((this->window->y - ( (Float)(this->upstored) )));
            			}
HXLINE( 232)			if ((this->down == true)) {
HXLINE( 233)				this->consoleOutput->set_y((this->window->y - ( (Float)(this->upstored) )));
            			}
            		}
HXLINE( 236)		this->consoleOutput->set_x((this->window->x + 10));
HXLINE( 237)		if ((this->IsUPorDOWN == false)) {
HXLINE( 238)			this->consoleOutput->set_y((this->window->y + 30));
            		}
HXLINE( 240)		this->consoleInput->set_x((this->window->x + 3));
HXLINE( 241)		this->consoleInput->set_y((this->window->y + 480));
            	}


void ConsoleApp_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_207da414e1f96d50_244_destroy)
HXLINE( 245)		this->super::destroy();
HXLINE( 246)		::App_obj::listApplications->remove(HX_("console",57,eb,d5,18));
            	}



::hx::ObjectPtr< ConsoleApp_obj > ConsoleApp_obj::__new() {
	::hx::ObjectPtr< ConsoleApp_obj > __this = new ConsoleApp_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ConsoleApp_obj > ConsoleApp_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ConsoleApp_obj *__this = (ConsoleApp_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ConsoleApp_obj), true, "applications.ConsoleApp"));
	*(void **)__this = ConsoleApp_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ConsoleApp_obj::ConsoleApp_obj()
{
}

void ConsoleApp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ConsoleApp);
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(consoleInput,"consoleInput");
	HX_MARK_MEMBER_NAME(consoleOutput,"consoleOutput");
	HX_MARK_MEMBER_NAME(storedVarOutPut,"storedVarOutPut");
	HX_MARK_MEMBER_NAME(IsUPorDOWN,"IsUPorDOWN");
	HX_MARK_MEMBER_NAME(IsRandom,"IsRandom");
	HX_MARK_MEMBER_NAME(up,"up");
	HX_MARK_MEMBER_NAME(upstored,"upstored");
	HX_MARK_MEMBER_NAME(downstored,"downstored");
	HX_MARK_MEMBER_NAME(down,"down");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(listWords,"listWords");
	HX_MARK_MEMBER_NAME(listCommand,"listCommand");
	HX_MARK_MEMBER_NAME(o,"o");
	 ::App_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ConsoleApp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(consoleInput,"consoleInput");
	HX_VISIT_MEMBER_NAME(consoleOutput,"consoleOutput");
	HX_VISIT_MEMBER_NAME(storedVarOutPut,"storedVarOutPut");
	HX_VISIT_MEMBER_NAME(IsUPorDOWN,"IsUPorDOWN");
	HX_VISIT_MEMBER_NAME(IsRandom,"IsRandom");
	HX_VISIT_MEMBER_NAME(up,"up");
	HX_VISIT_MEMBER_NAME(upstored,"upstored");
	HX_VISIT_MEMBER_NAME(downstored,"downstored");
	HX_VISIT_MEMBER_NAME(down,"down");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(listWords,"listWords");
	HX_VISIT_MEMBER_NAME(listCommand,"listCommand");
	HX_VISIT_MEMBER_NAME(o,"o");
	 ::App_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ConsoleApp_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return ::hx::Val( up ); }
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { return ::hx::Val( _hx_int_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return ::hx::Val( down ); }
		if (HX_FIELD_EQ(inName,"exit") ) { return ::hx::Val( exit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"IsRandom") ) { return ::hx::Val( IsRandom ); }
		if (HX_FIELD_EQ(inName,"upstored") ) { return ::hx::Val( upstored ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listWords") ) { return ::hx::Val( listWords ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"IsUPorDOWN") ) { return ::hx::Val( IsUPorDOWN ); }
		if (HX_FIELD_EQ(inName,"downstored") ) { return ::hx::Val( downstored ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"listCommand") ) { return ::hx::Val( listCommand ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"consoleInput") ) { return ::hx::Val( consoleInput ); }
		if (HX_FIELD_EQ(inName,"logToConsole") ) { return ::hx::Val( logToConsole_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopFunction") ) { return ::hx::Val( stopFunction_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"consoleOutput") ) { return ::hx::Val( consoleOutput ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storedVarOutPut") ) { return ::hx::Val( storedVarOutPut ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"onConsoleCommandEntered") ) { return ::hx::Val( onConsoleCommandEntered_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ConsoleApp_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { up=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { down=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::ModernWindow >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"IsRandom") ) { IsRandom=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upstored") ) { upstored=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listWords") ) { listWords=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"IsUPorDOWN") ) { IsUPorDOWN=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downstored") ) { downstored=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"listCommand") ) { listCommand=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"consoleInput") ) { consoleInput=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"consoleOutput") ) { consoleOutput=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storedVarOutPut") ) { storedVarOutPut=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ConsoleApp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("consoleInput",33,cd,2d,bb));
	outFields->push(HX_("consoleOutput",b8,09,79,7d));
	outFields->push(HX_("storedVarOutPut",45,8b,e1,ec));
	outFields->push(HX_("IsUPorDOWN",aa,49,9d,c6));
	outFields->push(HX_("IsRandom",ad,79,aa,e9));
	outFields->push(HX_("up",5b,66,00,00));
	outFields->push(HX_("upstored",fe,6d,ad,64));
	outFields->push(HX_("downstored",45,bf,aa,17));
	outFields->push(HX_("down",62,f8,6d,42));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("listWords",2b,4e,a5,e4));
	outFields->push(HX_("listCommand",8d,e4,6c,38));
	outFields->push(HX_("o",6f,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ConsoleApp_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ModernWindow */ ,(int)offsetof(ConsoleApp_obj,window),HX_("window",f0,93,8c,52)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(ConsoleApp_obj,consoleInput),HX_("consoleInput",33,cd,2d,bb)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ConsoleApp_obj,consoleOutput),HX_("consoleOutput",b8,09,79,7d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ConsoleApp_obj,storedVarOutPut),HX_("storedVarOutPut",45,8b,e1,ec)},
	{::hx::fsBool,(int)offsetof(ConsoleApp_obj,IsUPorDOWN),HX_("IsUPorDOWN",aa,49,9d,c6)},
	{::hx::fsBool,(int)offsetof(ConsoleApp_obj,IsRandom),HX_("IsRandom",ad,79,aa,e9)},
	{::hx::fsBool,(int)offsetof(ConsoleApp_obj,up),HX_("up",5b,66,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ConsoleApp_obj,upstored),HX_("upstored",fe,6d,ad,64)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ConsoleApp_obj,downstored),HX_("downstored",45,bf,aa,17)},
	{::hx::fsBool,(int)offsetof(ConsoleApp_obj,down),HX_("down",62,f8,6d,42)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ConsoleApp_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ConsoleApp_obj,listWords),HX_("listWords",2b,4e,a5,e4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ConsoleApp_obj,listCommand),HX_("listCommand",8d,e4,6c,38)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ConsoleApp_obj,o),HX_("o",6f,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ConsoleApp_obj_sStaticStorageInfo = 0;
#endif

static ::String ConsoleApp_obj_sMemberFields[] = {
	HX_("window",f0,93,8c,52),
	HX_("consoleInput",33,cd,2d,bb),
	HX_("consoleOutput",b8,09,79,7d),
	HX_("storedVarOutPut",45,8b,e1,ec),
	HX_("IsUPorDOWN",aa,49,9d,c6),
	HX_("IsRandom",ad,79,aa,e9),
	HX_("up",5b,66,00,00),
	HX_("upstored",fe,6d,ad,64),
	HX_("downstored",45,bf,aa,17),
	HX_("down",62,f8,6d,42),
	HX_("bg",c5,55,00,00),
	HX_("listWords",2b,4e,a5,e4),
	HX_("listCommand",8d,e4,6c,38),
	HX_("o",6f,00,00,00),
	HX_("int",ef,0c,50,00),
	HX_("exit",1e,f7,1d,43),
	HX_("onConsoleCommandEntered",84,bb,c9,7f),
	HX_("logToConsole",f8,fd,65,e5),
	HX_("stopFunction",3a,29,b3,85),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class ConsoleApp_obj::__mClass;

void ConsoleApp_obj::__register()
{
	ConsoleApp_obj _hx_dummy;
	ConsoleApp_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("applications.ConsoleApp",15,25,03,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ConsoleApp_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ConsoleApp_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConsoleApp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConsoleApp_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace applications
