// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_CustomWindow
#include <CustomWindow.h>
#endif
#ifndef INCLUDED_MessageBox
#include <MessageBox.h>
#endif
#ifndef INCLUDED_TaskBar
#include <TaskBar.h>
#endif
#ifndef INCLUDED_applications_SettingsApplication
#include <applications/SettingsApplication.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_states_BIOState
#include <states/BIOState.h>
#endif
#ifndef INCLUDED_states_LoadState
#include <states/LoadState.h>
#endif
#ifndef INCLUDED_states_WindowsState
#include <states/WindowsState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_14dc48847aae1af1_360_new,"applications.SettingsApplication","new",0x378d3034,"applications.SettingsApplication.new","applications/SettingsApplication.hx",360,0x89a19a7d)
HX_DEFINE_STACK_FRAME(_hx_pos_14dc48847aae1af1_362_new,"applications.SettingsApplication","new",0x378d3034,"applications.SettingsApplication.new","applications/SettingsApplication.hx",362,0x89a19a7d)
HX_DEFINE_STACK_FRAME(_hx_pos_14dc48847aae1af1_346_new,"applications.SettingsApplication","new",0x378d3034,"applications.SettingsApplication.new","applications/SettingsApplication.hx",346,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_77_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",77,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_86_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",86,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_112_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",112,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_123_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",123,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_134_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",134,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_145_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",145,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_170_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",170,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_184_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",184,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_222_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",222,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_232_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",232,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_65_AddUI,"applications.SettingsApplication","AddUI",0x2fa13369,"applications.SettingsApplication.AddUI","applications/SettingsApplication.hx",65,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_278_plus,"applications.SettingsApplication","plus",0x6554b906,"applications.SettingsApplication.plus","applications/SettingsApplication.hx",278,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_285_minus,"applications.SettingsApplication","minus",0x88987d44,"applications.SettingsApplication.minus","applications/SettingsApplication.hx",285,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_298_AddBoxRU,"applications.SettingsApplication","AddBoxRU",0xaf248079,"applications.SettingsApplication.AddBoxRU","applications/SettingsApplication.hx",298,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_295_AddBoxRU,"applications.SettingsApplication","AddBoxRU",0xaf248079,"applications.SettingsApplication.AddBoxRU","applications/SettingsApplication.hx",295,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_301_AddBoxRU,"applications.SettingsApplication","AddBoxRU",0xaf248079,"applications.SettingsApplication.AddBoxRU","applications/SettingsApplication.hx",301,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_292_AddBoxRU,"applications.SettingsApplication","AddBoxRU",0xaf248079,"applications.SettingsApplication.AddBoxRU","applications/SettingsApplication.hx",292,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_312_AddBoxEN,"applications.SettingsApplication","AddBoxEN",0xaf24751f,"applications.SettingsApplication.AddBoxEN","applications/SettingsApplication.hx",312,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_309_AddBoxEN,"applications.SettingsApplication","AddBoxEN",0xaf24751f,"applications.SettingsApplication.AddBoxEN","applications/SettingsApplication.hx",309,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_315_AddBoxEN,"applications.SettingsApplication","AddBoxEN",0xaf24751f,"applications.SettingsApplication.AddBoxEN","applications/SettingsApplication.hx",315,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_306_AddBoxEN,"applications.SettingsApplication","AddBoxEN",0xaf24751f,"applications.SettingsApplication.AddBoxEN","applications/SettingsApplication.hx",306,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_321_RemoveUI,"applications.SettingsApplication","RemoveUI",0x2be3fb64,"applications.SettingsApplication.RemoveUI","applications/SettingsApplication.hx",321,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_324_UpdateUI,"applications.SettingsApplication","UpdateUI",0xf6c2a069,"applications.SettingsApplication.UpdateUI","applications/SettingsApplication.hx",324,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_370_update,"applications.SettingsApplication","update",0x30d2c2b5,"applications.SettingsApplication.update","applications/SettingsApplication.hx",370,0x89a19a7d)
HX_LOCAL_STACK_FRAME(_hx_pos_14dc48847aae1af1_520_destroy,"applications.SettingsApplication","destroy",0x0e4e06ce,"applications.SettingsApplication.destroy","applications/SettingsApplication.hx",520,0x89a19a7d)
namespace applications{

void SettingsApplication_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_360_new)
HXLINE( 360)			_gthis->AddUI();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_362_new)
HXLINE( 363)			::App_obj::listApplications->remove(HX_("settings",e3,7c,3d,8b));
HXLINE( 364)			_gthis->updateItems();
HXLINE( 365)			_gthis->RemoveUI();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_346_new)
HXDLIN( 346)		 ::applications::SettingsApplication _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 347)		super::__construct(null());
HXLINE( 348)		this->super::taskbar(HX_("settings",e3,7c,3d,8b));
HXLINE( 349)		if (::sys::FileSystem_obj::exists(HX_("assets/Windows/mbr.json",71,7f,52,64))) {
HXLINE( 353)			::String data = ::sys::io::File_obj::getContent(HX_("assets/Windows/mbr.json",71,7f,52,64));
HXLINE( 354)			this->l =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE( 358)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 361)		 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 358)		this->window =  ::CustomWindow_obj::__alloc( HX_CTX ,1200,800,HX_("Settings",03,39,ef,64),HX_("assets/images/icons/null.png",42,d1,d8,bb),name,name1,true);
HXLINE( 367)		{
HXLINE( 367)			 ::CustomWindow _this = this->window;
HXDLIN( 367)			int axes = 17;
HXDLIN( 367)			bool _hx_tmp;
HXDLIN( 367)			if ((axes != 1)) {
HXLINE( 367)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 367)				_hx_tmp = true;
            			}
HXDLIN( 367)			if (_hx_tmp) {
HXLINE( 367)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 367)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 367)			bool _hx_tmp2;
HXDLIN( 367)			if ((axes != 16)) {
HXLINE( 367)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 367)				_hx_tmp2 = true;
            			}
HXDLIN( 367)			if (_hx_tmp2) {
HXLINE( 367)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 367)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 368)		this->add(this->window);
            	}

Dynamic SettingsApplication_obj::__CreateEmpty() { return new SettingsApplication_obj; }

void *SettingsApplication_obj::_hx_vtable = 0;

Dynamic SettingsApplication_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SettingsApplication_obj > _hx_result = new SettingsApplication_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SettingsApplication_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x1215bd8a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1215bd8a;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7ed5f915;
	}
}

void SettingsApplication_obj::AddUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_77_AddUI)
HXLINE(  77)			_gthis->currentSection = HX_("system",ef,96,e2,f2);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_86_AddUI)
HXLINE(  86)			_gthis->currentSection = HX_("personalization",64,a9,11,21);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_112_AddUI)
HXLINE( 113)			::states::WindowsState_obj::bg->loadGraphic(HX_("assets/images/wallpapers/wallpaper.png",4a,93,ea,c3),null(),null(),null(),null(),null());
HXLINE( 114)			_gthis->l->__SetField(HX_("wallpaper",42,1e,42,31),HX_("assets/images/wallpapers/wallpaper.png",4a,93,ea,c3),::hx::paccDynamic);
HXLINE( 115)			 ::Dynamic replacer = null();
HXDLIN( 115)			::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_123_AddUI)
HXLINE( 124)			::states::WindowsState_obj::bg->loadGraphic(HX_("assets/images/wallpapers/wallpaper2.png",7e,15,52,cb),null(),null(),null(),null(),null());
HXLINE( 125)			_gthis->l->__SetField(HX_("wallpaper",42,1e,42,31),HX_("assets/images/wallpapers/wallpaper2.png",7e,15,52,cb),::hx::paccDynamic);
HXLINE( 126)			 ::Dynamic replacer = null();
HXDLIN( 126)			::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_134_AddUI)
HXLINE( 135)			::states::WindowsState_obj::bg->loadGraphic(HX_("assets/images/wallpapers/wallpaper3.png",ff,a9,b8,5e),null(),null(),null(),null(),null());
HXLINE( 136)			_gthis->l->__SetField(HX_("wallpaper",42,1e,42,31),HX_("assets/images/wallpapers/wallpaper3.png",ff,a9,b8,5e),::hx::paccDynamic);
HXLINE( 137)			 ::Dynamic replacer = null();
HXDLIN( 137)			::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_145_AddUI)
HXLINE( 146)			::states::WindowsState_obj::bg->loadGraphic(HX_("assets/images/wallpapers/wallpaper4.png",80,3e,1f,f2),null(),null(),null(),null(),null());
HXLINE( 147)			_gthis->l->__SetField(HX_("wallpaper",42,1e,42,31),HX_("assets/images/wallpapers/wallpaper4.png",80,3e,1f,f2),::hx::paccDynamic);
HXLINE( 148)			 ::Dynamic replacer = null();
HXDLIN( 148)			::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_170_AddUI)
HXLINE( 171)			_gthis->l->__SetField(HX_("taskbar",ae,0b,71,1e),HX_("up",5b,66,00,00),::hx::paccDynamic);
HXLINE( 172)			 ::Dynamic replacer = null();
HXDLIN( 172)			::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
HXLINE( 173)			::states::WindowsState_obj::taskBar->kill();
HXLINE( 174)			::states::WindowsState_obj::IsReset = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_184_AddUI)
HXLINE( 185)			_gthis->l->__SetField(HX_("taskbar",ae,0b,71,1e),HX_("down",62,f8,6d,42),::hx::paccDynamic);
HXLINE( 186)			 ::Dynamic replacer = null();
HXDLIN( 186)			::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
HXLINE( 187)			::states::WindowsState_obj::taskBar->kill();
HXLINE( 188)			::states::WindowsState_obj::IsReset = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_222_AddUI)
HXLINE( 222)			_gthis->AddBoxEN();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_232_AddUI)
HXLINE( 232)			_gthis->AddBoxRU();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_65_AddUI)
HXDLIN(  65)		 ::applications::SettingsApplication _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  66)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/setup/bg.png",3d,7e,fe,cd));
HXLINE(  67)		{
HXLINE(  67)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  67)			int axes = 17;
HXDLIN(  67)			bool _hx_tmp;
HXDLIN(  67)			if ((axes != 1)) {
HXLINE(  67)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  67)				_hx_tmp = true;
            			}
HXDLIN(  67)			if (_hx_tmp) {
HXLINE(  67)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  67)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  67)			bool _hx_tmp2;
HXDLIN(  67)			if ((axes != 16)) {
HXLINE(  67)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  67)				_hx_tmp2 = true;
            			}
HXDLIN(  67)			if (_hx_tmp2) {
HXLINE(  67)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  67)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  68)		this->bg->setGraphicSize(1200,800);
HXLINE(  69)		this->bg->updateHitbox();
HXLINE(  70)		this->add(this->bg);
HXLINE(  72)		this->back =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/settings/back.png",c3,a4,46,d6));
HXLINE(  73)		this->back->updateHitbox();
HXLINE(  74)		this->add(this->back);
HXLINE(  76)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN(  76)		this->systemSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name);
HXLINE(  79)		this->systemSection->loadGraphic(HX_("assets/images/settings/system.png",cb,5f,ee,9e),null(),null(),null(),null(),null());
HXLINE(  80)		this->systemSection->updateHitbox();
HXLINE(  81)		::String _hx_tmp4;
HXDLIN(  81)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  81)			_hx_tmp4 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE(  81)			_hx_tmp4 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN(  81)		this->systemSection->label->setFormat(_hx_tmp4,26,0,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  82)		{
HXLINE(  82)			 ::flixel::ui::FlxButton _this1 = this->systemSection;
HXDLIN(  82)			::String Text;
HXDLIN(  82)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  82)				Text = HX_("System",0f,0b,77,27);
            			}
            			else {
HXLINE(  82)				Text = HX_W(u"\u0421\u0438\u0441\u0442\u0435\u043c\u0430",de4b,1a9d);
            			}
HXDLIN(  82)			if (::hx::IsNull( _this1->label )) {
HXLINE(  82)				if (::hx::IsNotNull( Text )) {
HXLINE(  82)					_this1->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this1->x + _this1->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this1->y + _this1->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text,null(),null()));
HXDLIN(  82)					_this1->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN(  82)					_this1->label->set_alpha(_this1->labelAlphas->__get(_this1->status));
HXDLIN(  82)					_this1->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE(  82)				_this1->label->set_text(Text);
            			}
            		}
HXLINE(  83)		this->add(this->systemSection);
HXLINE(  85)		 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_1(_gthis));
HXDLIN(  85)		this->personalizationSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name1);
HXLINE(  88)		this->personalizationSection->loadGraphic(HX_("assets/images/settings/personalization.png",5e,d4,dc,58),null(),null(),null(),null(),null());
HXLINE(  89)		this->personalizationSection->updateHitbox();
HXLINE(  90)		::String _hx_tmp5;
HXDLIN(  90)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  90)			_hx_tmp5 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE(  90)			_hx_tmp5 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN(  90)		this->personalizationSection->label->setFormat(_hx_tmp5,26,0,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  91)		{
HXLINE(  91)			 ::flixel::ui::FlxButton _this2 = this->personalizationSection;
HXDLIN(  91)			::String Text1;
HXDLIN(  91)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  91)				Text1 = HX_("Personalization",44,b1,9d,81);
            			}
            			else {
HXLINE(  91)				Text1 = HX_W(u"\u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f",99c3,4af2);
            			}
HXDLIN(  91)			if (::hx::IsNull( _this2->label )) {
HXLINE(  91)				if (::hx::IsNotNull( Text1 )) {
HXLINE(  91)					_this2->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this2->x + _this2->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this2->y + _this2->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text1,null(),null()));
HXDLIN(  91)					_this2->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN(  91)					_this2->label->set_alpha(_this2->labelAlphas->__get(_this2->status));
HXDLIN(  91)					_this2->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE(  91)				_this2->label->set_text(Text1);
            			}
            		}
HXLINE(  92)		this->add(this->personalizationSection);
HXLINE(  94)		this->textPesonalizationWallpaper =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),38,null());
HXLINE(  95)		this->textPesonalizationWallpaper->set_color(3496348);
HXLINE(  96)		::String _hx_tmp6;
HXDLIN(  96)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  96)			_hx_tmp6 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE(  96)			_hx_tmp6 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN(  96)		this->textPesonalizationWallpaper->set_font(_hx_tmp6);
HXLINE(  97)		::String _hx_tmp7;
HXDLIN(  97)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE(  97)			_hx_tmp7 = HX_("Wallpaper",22,fe,14,d3);
            		}
            		else {
HXLINE(  97)			_hx_tmp7 = HX_W(u"\u041e\u0431\u043e\u0438 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0430",0555,d6ff);
            		}
HXDLIN(  97)		this->textPesonalizationWallpaper->set_text(_hx_tmp7);
HXLINE(  98)		this->textPesonalizationWallpaper->set_visible(false);
HXLINE(  99)		this->add(this->textPesonalizationWallpaper);
HXLINE( 101)		this->wallpaperCURRENT =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 102)		this->wallpaperCURRENT->set_visible(false);
HXLINE( 103)		this->add(this->wallpaperCURRENT);
HXLINE( 104)		::String cur = ( (::String)(this->l->__Field(HX_("wallpaper",42,1e,42,31),::hx::paccDynamic)) );
HXLINE( 105)		this->textWallpaperCurent =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),16,null());
HXLINE( 106)		this->textWallpaperCurent->set_color(0);
HXLINE( 107)		::String _hx_tmp8;
HXDLIN( 107)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 107)			_hx_tmp8 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 107)			_hx_tmp8 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 107)		this->textWallpaperCurent->set_font(_hx_tmp8);
HXLINE( 108)		::String _hx_tmp9;
HXDLIN( 108)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 108)			_hx_tmp9 = (HX_("Current: ",ff,ee,00,e3) + cur);
            		}
            		else {
HXLINE( 108)			_hx_tmp9 = (HX_W(u"\u0422\u0435\u043a\u0443\u0449\u0438\u0439: ",0902,30eb) + cur);
            		}
HXDLIN( 108)		this->textWallpaperCurent->set_text(_hx_tmp9);
HXLINE( 109)		this->textWallpaperCurent->set_visible(false);
HXLINE( 110)		this->add(this->textWallpaperCurent);
HXLINE( 112)		 ::Dynamic name2 =  ::Dynamic(new _hx_Closure_2(_gthis));
HXDLIN( 112)		this->wal1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name2);
HXLINE( 117)		this->wal1->loadGraphic(HX_("assets/images/wallpapers/wallpaper.png",4a,93,ea,c3),null(),null(),null(),null(),null());
HXLINE( 118)		this->wal1->setGraphicSize(50,50);
HXLINE( 119)		this->wal1->updateHitbox();
HXLINE( 120)		this->wal1->set_visible(false);
HXLINE( 121)		this->add(this->wal1);
HXLINE( 123)		 ::Dynamic name3 =  ::Dynamic(new _hx_Closure_3(_gthis));
HXDLIN( 123)		this->wal2 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name3);
HXLINE( 128)		this->wal2->loadGraphic(HX_("assets/images/wallpapers/wallpaper2.png",7e,15,52,cb),null(),null(),null(),null(),null());
HXLINE( 129)		this->wal2->setGraphicSize(50,50);
HXLINE( 130)		this->wal2->updateHitbox();
HXLINE( 131)		this->wal2->set_visible(false);
HXLINE( 132)		this->add(this->wal2);
HXLINE( 134)		 ::Dynamic name4 =  ::Dynamic(new _hx_Closure_4(_gthis));
HXDLIN( 134)		this->wal3 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name4);
HXLINE( 139)		this->wal3->loadGraphic(HX_("assets/images/wallpapers/wallpaper3.png",ff,a9,b8,5e),null(),null(),null(),null(),null());
HXLINE( 140)		this->wal3->setGraphicSize(50,50);
HXLINE( 141)		this->wal3->updateHitbox();
HXLINE( 142)		this->wal3->set_visible(false);
HXLINE( 143)		this->add(this->wal3);
HXLINE( 145)		 ::Dynamic name5 =  ::Dynamic(new _hx_Closure_5(_gthis));
HXDLIN( 145)		this->wal4 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name5);
HXLINE( 150)		this->wal4->loadGraphic(HX_("assets/images/wallpapers/wallpaper4.png",80,3e,1f,f2),null(),null(),null(),null(),null());
HXLINE( 151)		this->wal4->setGraphicSize(50,50);
HXLINE( 152)		this->wal4->updateHitbox();
HXLINE( 153)		this->wal4->set_visible(false);
HXLINE( 154)		this->add(this->wal4);
HXLINE( 156)		this->textTaskBar =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),38,null());
HXLINE( 157)		this->textTaskBar->set_color(3496348);
HXLINE( 158)		::String _hx_tmp10;
HXDLIN( 158)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 158)			_hx_tmp10 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 158)			_hx_tmp10 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 158)		this->textTaskBar->set_font(_hx_tmp10);
HXLINE( 159)		::String _hx_tmp11;
HXDLIN( 159)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 159)			_hx_tmp11 = HX_("Task Bar",78,3f,73,32);
            		}
            		else {
HXLINE( 159)			_hx_tmp11 = HX_W(u"\u041f\u0430\u043d\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u0447",bada,f2c8);
            		}
HXDLIN( 159)		this->textTaskBar->set_text(_hx_tmp11);
HXLINE( 160)		this->textTaskBar->set_visible(false);
HXLINE( 161)		this->add(this->textTaskBar);
HXLINE( 163)		this->textTaskBarChange =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),24,null());
HXLINE( 164)		this->textTaskBarChange->set_color(0);
HXLINE( 165)		::String _hx_tmp12;
HXDLIN( 165)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 165)			_hx_tmp12 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 165)			_hx_tmp12 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 165)		this->textTaskBarChange->set_font(_hx_tmp12);
HXLINE( 166)		::String _hx_tmp13;
HXDLIN( 166)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 166)			_hx_tmp13 = HX_("Taskbar location:",53,6d,a8,7e);
            		}
            		else {
HXLINE( 166)			_hx_tmp13 = HX_W(u"\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0430\u043d\u0435\u043b\u0438 \u0437\u0430\u0434\u0430\u0447:",ed92,3370);
            		}
HXDLIN( 166)		this->textTaskBarChange->set_text(_hx_tmp13);
HXLINE( 167)		this->textTaskBarChange->set_visible(false);
HXLINE( 168)		this->add(this->textTaskBarChange);
HXLINE( 170)		 ::Dynamic name6 =  ::Dynamic(new _hx_Closure_6(_gthis));
HXDLIN( 170)		this->up =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name6);
HXLINE( 176)		::String _hx_tmp14;
HXDLIN( 176)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 176)			_hx_tmp14 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 176)			_hx_tmp14 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 176)		this->up->label->setFormat(_hx_tmp14,16,3496348,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 177)		{
HXLINE( 177)			 ::flixel::ui::FlxButton _this3 = this->up;
HXDLIN( 177)			::String Text2;
HXDLIN( 177)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 177)				Text2 = HX_("UP",5b,4a,00,00);
            			}
            			else {
HXLINE( 177)				Text2 = HX_W(u"\u0412\u0432\u0435\u0440\u0445",0e6c,d962);
            			}
HXDLIN( 177)			if (::hx::IsNull( _this3->label )) {
HXLINE( 177)				if (::hx::IsNotNull( Text2 )) {
HXLINE( 177)					_this3->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this3->x + _this3->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this3->y + _this3->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text2,null(),null()));
HXDLIN( 177)					_this3->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 177)					_this3->label->set_alpha(_this3->labelAlphas->__get(_this3->status));
HXDLIN( 177)					_this3->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE( 177)				_this3->label->set_text(Text2);
            			}
            		}
HXLINE( 178)		this->up->setGraphicSize(75,20);
HXLINE( 179)		this->up->makeGraphic(75,20,0,null(),null());
HXLINE( 180)		this->up->updateHitbox();
HXLINE( 181)		this->up->set_visible(false);
HXLINE( 182)		this->add(this->up);
HXLINE( 184)		 ::Dynamic name7 =  ::Dynamic(new _hx_Closure_7(_gthis));
HXDLIN( 184)		this->down =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name7);
HXLINE( 190)		::String _hx_tmp15;
HXDLIN( 190)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 190)			_hx_tmp15 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 190)			_hx_tmp15 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 190)		this->down->label->setFormat(_hx_tmp15,16,3496348,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 191)		{
HXLINE( 191)			 ::flixel::ui::FlxButton _this4 = this->down;
HXDLIN( 191)			::String Text3;
HXDLIN( 191)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 191)				Text3 = HX_("DOWN",62,c0,2e,2d);
            			}
            			else {
HXLINE( 191)				Text3 = HX_W(u"\u0412\u043d\u0438\u0437",d97e,b739);
            			}
HXDLIN( 191)			if (::hx::IsNull( _this4->label )) {
HXLINE( 191)				if (::hx::IsNotNull( Text3 )) {
HXLINE( 191)					_this4->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this4->x + _this4->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this4->y + _this4->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text3,null(),null()));
HXDLIN( 191)					_this4->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 191)					_this4->label->set_alpha(_this4->labelAlphas->__get(_this4->status));
HXDLIN( 191)					_this4->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE( 191)				_this4->label->set_text(Text3);
            			}
            		}
HXLINE( 192)		this->down->setGraphicSize(60,20);
HXLINE( 193)		this->down->makeGraphic(60,20,0,null(),null());
HXLINE( 194)		this->down->updateHitbox();
HXLINE( 195)		this->down->set_visible(false);
HXLINE( 196)		this->add(this->down);
HXLINE( 198)		this->textLanguage =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),38,null());
HXLINE( 199)		this->textLanguage->set_color(3496348);
HXLINE( 200)		::String _hx_tmp16;
HXDLIN( 200)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 200)			_hx_tmp16 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 200)			_hx_tmp16 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 200)		this->textLanguage->set_font(_hx_tmp16);
HXLINE( 201)		::String _hx_tmp17;
HXDLIN( 201)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 201)			_hx_tmp17 = HX_("Language",78,3c,c3,53);
            		}
            		else {
HXLINE( 201)			_hx_tmp17 = HX_W(u"\u042f\u0437\u044b\u043a",e38a,f947);
            		}
HXDLIN( 201)		this->textLanguage->set_text(_hx_tmp17);
HXLINE( 202)		this->textLanguage->set_visible(false);
HXLINE( 203)		this->add(this->textLanguage);
HXLINE( 205)		::String curl = ( (::String)(this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic)) );
HXLINE( 207)		this->textLanguageCurrent =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),23,null());
HXLINE( 208)		this->textLanguageCurrent->set_color(0);
HXLINE( 209)		::String _hx_tmp18;
HXDLIN( 209)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 209)			_hx_tmp18 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 209)			_hx_tmp18 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 209)		this->textLanguageCurrent->set_font(_hx_tmp18);
HXLINE( 210)		::String _hx_tmp19;
HXDLIN( 210)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 210)			_hx_tmp19 = (HX_("Current: ",ff,ee,00,e3) + curl);
            		}
            		else {
HXLINE( 210)			_hx_tmp19 = (HX_W(u"\u0422\u0435\u043a\u0443\u0449\u0438\u0439: ",0902,30eb) + curl);
            		}
HXDLIN( 210)		this->textLanguageCurrent->set_text(_hx_tmp19);
HXLINE( 211)		this->textLanguageCurrent->set_visible(false);
HXLINE( 212)		this->add(this->textLanguageCurrent);
HXLINE( 214)		this->textLanguageChoose =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),28,null());
HXLINE( 215)		this->textLanguageChoose->set_color(0);
HXLINE( 216)		::String _hx_tmp20;
HXDLIN( 216)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 216)			_hx_tmp20 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 216)			_hx_tmp20 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 216)		this->textLanguageChoose->set_font(_hx_tmp20);
HXLINE( 217)		::String _hx_tmp21;
HXDLIN( 217)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 217)			_hx_tmp21 = HX_("Choose language",a1,ba,45,6e);
            		}
            		else {
HXLINE( 217)			_hx_tmp21 = HX_W(u"\u0412\u044b\u0431\u043e\u0440 \u044f\u0437\u044b\u043a\u0430",39cf,998e);
            		}
HXDLIN( 217)		this->textLanguageChoose->set_text(_hx_tmp21);
HXLINE( 218)		this->textLanguageChoose->set_visible(false);
HXLINE( 219)		this->add(this->textLanguageChoose);
HXLINE( 221)		 ::Dynamic name8 =  ::Dynamic(new _hx_Closure_8(_gthis));
HXDLIN( 221)		this->textLanguageChooseEN =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name8);
HXLINE( 224)		::String _hx_tmp22;
HXDLIN( 224)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 224)			_hx_tmp22 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 224)			_hx_tmp22 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 224)		this->textLanguageChooseEN->label->setFormat(_hx_tmp22,16,16777215,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 225)		{
HXLINE( 225)			 ::flixel::ui::FlxButton _this5 = this->textLanguageChooseEN;
HXDLIN( 225)			::String Text4;
HXDLIN( 225)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 225)				Text4 = HX_("English",10,8f,83,c6);
            			}
            			else {
HXLINE( 225)				Text4 = HX_W(u"\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439",e757,f77e);
            			}
HXDLIN( 225)			if (::hx::IsNull( _this5->label )) {
HXLINE( 225)				if (::hx::IsNotNull( Text4 )) {
HXLINE( 225)					_this5->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this5->x + _this5->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this5->y + _this5->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text4,null(),null()));
HXDLIN( 225)					_this5->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 225)					_this5->label->set_alpha(_this5->labelAlphas->__get(_this5->status));
HXDLIN( 225)					_this5->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE( 225)				_this5->label->set_text(Text4);
            			}
            		}
HXLINE( 226)		int _hx_tmp23;
HXDLIN( 226)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 226)			_hx_tmp23 = 90;
            		}
            		else {
HXLINE( 226)			_hx_tmp23 = 95;
            		}
HXDLIN( 226)		int _hx_tmp24;
HXDLIN( 226)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 226)			_hx_tmp24 = 25;
            		}
            		else {
HXLINE( 226)			_hx_tmp24 = 25;
            		}
HXDLIN( 226)		this->textLanguageChooseEN->makeGraphic(_hx_tmp23,_hx_tmp24,-8355712,null(),null());
HXLINE( 227)		this->textLanguageChooseEN->updateHitbox();
HXLINE( 228)		this->textLanguageChooseEN->set_visible(false);
HXLINE( 229)		this->add(this->textLanguageChooseEN);
HXLINE( 231)		 ::Dynamic name9 =  ::Dynamic(new _hx_Closure_9(_gthis));
HXDLIN( 231)		this->textLanguageChooseRU =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("",00,00,00,00),name9);
HXLINE( 234)		::String _hx_tmp25;
HXDLIN( 234)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 234)			_hx_tmp25 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 234)			_hx_tmp25 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 234)		this->textLanguageChooseRU->label->setFormat(_hx_tmp25,16,16777215,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 235)		{
HXLINE( 235)			 ::flixel::ui::FlxButton _this6 = this->textLanguageChooseRU;
HXDLIN( 235)			::String Text5;
HXDLIN( 235)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 235)				Text5 = HX_("Russian",33,82,09,9d);
            			}
            			else {
HXLINE( 235)				Text5 = HX_W(u"\u0420\u0443\u0441\u0441\u043a\u0438\u0439",00bd,1ff9);
            			}
HXDLIN( 235)			if (::hx::IsNull( _this6->label )) {
HXLINE( 235)				if (::hx::IsNotNull( Text5 )) {
HXLINE( 235)					_this6->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_this6->x + _this6->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->x),(_this6->y + _this6->labelOffsets->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text5,null(),null()));
HXDLIN( 235)					_this6->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 235)					_this6->label->set_alpha(_this6->labelAlphas->__get(_this6->status));
HXDLIN( 235)					_this6->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE( 235)				_this6->label->set_text(Text5);
            			}
            		}
HXLINE( 236)		this->textLanguageChooseRU->setGraphicSize(80,23);
HXLINE( 237)		this->textLanguageChooseRU->makeGraphic(80,23,-8355712,null(),null());
HXLINE( 238)		this->textLanguageChooseRU->updateHitbox();
HXLINE( 239)		this->textLanguageChooseRU->set_visible(false);
HXLINE( 240)		this->add(this->textLanguageChooseRU);
HXLINE( 242)		this->textDisplay =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),38,null());
HXLINE( 243)		this->textDisplay->set_color(3496348);
HXLINE( 244)		::String _hx_tmp26;
HXDLIN( 244)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 244)			_hx_tmp26 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 244)			_hx_tmp26 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 244)		this->textDisplay->set_font(_hx_tmp26);
HXLINE( 245)		::String _hx_tmp27;
HXDLIN( 245)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 245)			_hx_tmp27 = HX_("Display",22,52,9b,88);
            		}
            		else {
HXLINE( 245)			_hx_tmp27 = HX_W(u"\u0414\u0438\u0441\u043f\u043b\u0435\u0439",83e4,b3a4);
            		}
HXDLIN( 245)		this->textDisplay->set_text(_hx_tmp27);
HXLINE( 246)		this->textDisplay->set_visible(false);
HXLINE( 247)		this->add(this->textDisplay);
HXLINE( 250)		this->textDisplayFPS =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),28,null());
HXLINE( 251)		this->textDisplayFPS->set_color(0);
HXLINE( 252)		::String _hx_tmp28;
HXDLIN( 252)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 252)			_hx_tmp28 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 252)			_hx_tmp28 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 252)		this->textDisplayFPS->set_font(_hx_tmp28);
HXLINE( 253)		::String _hx_tmp29;
HXDLIN( 253)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 253)			_hx_tmp29 = HX_("FPS: ",af,da,2c,83);
            		}
            		else {
HXLINE( 253)			_hx_tmp29 = HX_("FPS: ",af,da,2c,83);
            		}
HXDLIN( 253)		this->textDisplayFPS->set_text(_hx_tmp29);
HXLINE( 254)		this->textDisplayFPS->set_visible(false);
HXLINE( 255)		this->add(this->textDisplayFPS);
HXLINE( 256)		int curf = ( (int)(this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) );
HXLINE( 257)		this->textDisplayFPSCUR =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),28,null());
HXLINE( 258)		this->textDisplayFPSCUR->set_color(0);
HXLINE( 259)		::String _hx_tmp30;
HXDLIN( 259)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 259)			_hx_tmp30 = HX_("assets/fonts/my.ttf",5b,83,ee,55);
            		}
            		else {
HXLINE( 259)			_hx_tmp30 = HX_("assets/fonts/ots.ttf",cf,af,87,ba);
            		}
HXDLIN( 259)		this->textDisplayFPSCUR->set_font(_hx_tmp30);
HXLINE( 260)		::String _hx_tmp31;
HXDLIN( 260)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 260)			_hx_tmp31 = (HX_("",00,00,00,00) + curf);
            		}
            		else {
HXLINE( 260)			_hx_tmp31 = (HX_("",00,00,00,00) + curf);
            		}
HXDLIN( 260)		this->textDisplayFPSCUR->set_text(_hx_tmp31);
HXLINE( 261)		this->textDisplayFPSCUR->set_visible(false);
HXLINE( 262)		this->add(this->textDisplayFPSCUR);
HXLINE( 264)		this->displayBUTTONMINUS =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("-",2d,00,00,00),this->minus_dyn());
HXLINE( 265)		this->displayBUTTONMINUS->label->setFormat(null(),16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 266)		this->displayBUTTONMINUS->makeGraphic(25,25,-8355712,null(),null());
HXLINE( 267)		this->displayBUTTONMINUS->updateHitbox();
HXLINE( 268)		this->add(this->displayBUTTONMINUS);
HXLINE( 270)		this->displayBUTTONPLUS =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,0,HX_("+",2b,00,00,00),this->plus_dyn());
HXLINE( 271)		this->displayBUTTONPLUS->label->setFormat(null(),16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 272)		this->displayBUTTONPLUS->makeGraphic(25,25,-8355712,null(),null());
HXLINE( 273)		this->displayBUTTONPLUS->updateHitbox();
HXLINE( 274)		this->add(this->displayBUTTONPLUS);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingsApplication_obj,AddUI,(void))

void SettingsApplication_obj::plus(){
            	HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_278_plus)
HXLINE( 279)		 ::Dynamic fh = this->l;
HXDLIN( 279)		int _hx_tmp;
HXDLIN( 279)		if (::hx::IsGreaterEq( this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic),240 )) {
HXLINE( 279)			_hx_tmp = 0;
            		}
            		else {
HXLINE( 279)			if (::hx::IsLessEq( this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic),240 )) {
HXLINE( 279)				_hx_tmp = 5;
            			}
            			else {
HXLINE( 279)				_hx_tmp = 5;
            			}
            		}
HXDLIN( 279)		fh->__SetField(HX_("FPS",c9,63,35,00),(fh->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic) + _hx_tmp),::hx::paccDynamic);
HXLINE( 280)		::flixel::FlxG_obj::set_drawFramerate(( (int)(this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ));
HXLINE( 281)		::flixel::FlxG_obj::set_updateFramerate(( (int)(this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ));
HXLINE( 282)		 ::Dynamic replacer = null();
HXDLIN( 282)		::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(this->l,replacer,HX_("",00,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingsApplication_obj,plus,(void))

void SettingsApplication_obj::minus(){
            	HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_285_minus)
HXLINE( 286)		 ::Dynamic fh = this->l;
HXDLIN( 286)		int _hx_tmp;
HXDLIN( 286)		if (::hx::IsLessEq( this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic),60 )) {
HXLINE( 286)			_hx_tmp = 0;
            		}
            		else {
HXLINE( 286)			if (::hx::IsGreaterEq( this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic),60 )) {
HXLINE( 286)				_hx_tmp = 5;
            			}
            			else {
HXLINE( 286)				_hx_tmp = 5;
            			}
            		}
HXDLIN( 286)		fh->__SetField(HX_("FPS",c9,63,35,00),(( (int)(fh->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ) - _hx_tmp),::hx::paccDynamic);
HXLINE( 287)		::flixel::FlxG_obj::set_drawFramerate(( (int)(this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ));
HXLINE( 288)		::flixel::FlxG_obj::set_updateFramerate(( (int)(this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ));
HXLINE( 289)		 ::Dynamic replacer = null();
HXDLIN( 289)		::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(this->l,replacer,HX_("",00,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingsApplication_obj,minus,(void))

void SettingsApplication_obj::AddBoxRU(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::BIOState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_298_AddBoxRU)
HXLINE( 298)				return  ::states::BIOState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_295_AddBoxRU)
HXLINE( 296)			_gthis->l->__SetField(HX_("curLanguage",f8,41,50,fb),HX_("ru",c3,63,00,00),::hx::paccDynamic);
HXLINE( 297)			 ::Dynamic replacer = null();
HXDLIN( 297)			::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
HXLINE( 298)			::states::LoadState_obj::setLoadingScreen(1000,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0())));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_301_AddBoxRU)
HXLINE( 301)			_gthis->messageBox->kill();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_292_AddBoxRU)
HXDLIN( 292)		 ::applications::SettingsApplication _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 293)		::String _hx_tmp;
HXDLIN( 293)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 293)			_hx_tmp = HX_("You need restart your System\nThat language will work right\n\nRestart now?",be,29,08,a3);
            		}
            		else {
HXLINE( 293)			_hx_tmp = HX_W(u"\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443\n\u0447\u0442\u043e\u0431\u044b \u044f\u0437\u044b\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\n\n\u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0435\u0439\u0447\u0430\u0441?",246c,a92f);
            		}
HXLINE( 294)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 299)		 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 293)		this->messageBox =  ::MessageBox_obj::__alloc( HX_CTX ,_hx_tmp,name,name1);
HXLINE( 303)		this->add(this->messageBox);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingsApplication_obj,AddBoxRU,(void))

void SettingsApplication_obj::AddBoxEN(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::BIOState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_312_AddBoxEN)
HXLINE( 312)				return  ::states::BIOState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_309_AddBoxEN)
HXLINE( 310)			_gthis->l->__SetField(HX_("curLanguage",f8,41,50,fb),HX_("en",69,58,00,00),::hx::paccDynamic);
HXLINE( 311)			 ::Dynamic replacer = null();
HXDLIN( 311)			::sys::io::File_obj::saveContent(HX_("assets/Windows/mbr.json",71,7f,52,64),::haxe::format::JsonPrinter_obj::print(_gthis->l,replacer,HX_("",00,00,00,00)));
HXLINE( 312)			::states::LoadState_obj::setLoadingScreen(1000,::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0())));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::applications::SettingsApplication,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_315_AddBoxEN)
HXLINE( 315)			_gthis->messageBox->kill();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_14dc48847aae1af1_306_AddBoxEN)
HXDLIN( 306)		 ::applications::SettingsApplication _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 307)		::String _hx_tmp;
HXDLIN( 307)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 307)			_hx_tmp = HX_("You need restart your System\nThat language will work right\n\nRestart now?",be,29,08,a3);
            		}
            		else {
HXLINE( 307)			_hx_tmp = HX_W(u"\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443\n\u0447\u0442\u043e\u0431\u044b \u044f\u0437\u044b\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\n\n\u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0435\u0439\u0447\u0430\u0441?",246c,a92f);
            		}
HXLINE( 308)		 ::Dynamic name =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 313)		 ::Dynamic name1 =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 307)		this->messageBox =  ::MessageBox_obj::__alloc( HX_CTX ,_hx_tmp,name,name1);
HXLINE( 317)		this->add(this->messageBox);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingsApplication_obj,AddBoxEN,(void))

void SettingsApplication_obj::RemoveUI(){
            	HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_321_RemoveUI)
HXDLIN( 321)		this->kill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingsApplication_obj,RemoveUI,(void))

void SettingsApplication_obj::UpdateUI(){
            	HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_324_UpdateUI)
HXLINE( 325)		this->systemSection->revive();
HXLINE( 326)		this->personalizationSection->update(((Float)0.1));
HXLINE( 327)		this->textPesonalizationWallpaper->update(((Float)0.1));
HXLINE( 328)		this->wallpaperCURRENT->update(((Float)0.1));
HXLINE( 329)		this->textWallpaperCurent->update(((Float)0.1));
HXLINE( 330)		this->wal1->update(((Float)0.1));
HXLINE( 331)		this->wal2->update(((Float)0.1));
HXLINE( 332)		this->wal3->update(((Float)0.1));
HXLINE( 333)		this->wal4->update(((Float)0.1));
HXLINE( 334)		this->back->update(((Float)0.1));
HXLINE( 335)		this->textTaskBar->update(((Float)0.1));
HXLINE( 336)		this->textTaskBarChange->update(((Float)0.1));
HXLINE( 337)		this->up->update(((Float)0.1));
HXLINE( 338)		this->down->update(((Float)0.1));
HXLINE( 339)		this->textLanguage->update(((Float)0.1));
HXLINE( 340)		this->textLanguageCurrent->update(((Float)0.1));
HXLINE( 341)		this->textLanguageChoose->update(((Float)0.1));
HXLINE( 342)		this->textLanguageChooseRU->update(((Float)0.1));
HXLINE( 343)		this->textLanguageChooseEN->update(((Float)0.1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingsApplication_obj,UpdateUI,(void))

void SettingsApplication_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_370_update)
HXLINE( 371)		this->super::update(elapsed);
HXLINE( 373)		::String _hx_switch_0 = this->currentSection;
            		if (  (_hx_switch_0==HX_("personalization",64,a9,11,21)) ){
HXLINE( 403)			this->systemSection->loadGraphic(HX_("assets/images/settings/system.png",cb,5f,ee,9e),null(),null(),null(),null(),null());
HXLINE( 405)			this->personalizationSection->loadGraphic(HX_("assets/images/settings/personalizationCHOOSE.png",f5,0e,5c,77),null(),null(),null(),null(),null());
HXLINE( 407)			this->textPesonalizationWallpaper->set_visible(true);
HXLINE( 409)			this->wallpaperCURRENT->set_visible(true);
HXLINE( 411)			this->wallpaperCURRENT->loadGraphic( ::Dynamic(this->l->__Field(HX_("wallpaper",42,1e,42,31),::hx::paccDynamic)),null(),null(),null(),null(),null());
HXLINE( 412)			this->wallpaperCURRENT->setGraphicSize(500,250);
HXLINE( 413)			this->wallpaperCURRENT->updateHitbox();
HXLINE( 415)			this->textWallpaperCurent->set_visible(true);
HXLINE( 416)			::String curw = ( (::String)(this->l->__Field(HX_("wallpaper",42,1e,42,31),::hx::paccDynamic)) );
HXLINE( 417)			::String _hx_tmp;
HXDLIN( 417)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 417)				_hx_tmp = (HX_("Current: ",ff,ee,00,e3) + curw);
            			}
            			else {
HXLINE( 417)				_hx_tmp = (HX_W(u"\u0422\u0435\u043a\u0443\u0449\u0438\u0439: ",0902,30eb) + curw);
            			}
HXDLIN( 417)			this->textWallpaperCurent->set_text(_hx_tmp);
HXLINE( 419)			this->wal1->set_visible(true);
HXLINE( 420)			this->wal2->set_visible(true);
HXLINE( 421)			this->wal3->set_visible(true);
HXLINE( 422)			this->wal4->set_visible(true);
HXLINE( 424)			this->textTaskBar->set_visible(true);
HXLINE( 425)			this->textTaskBarChange->set_visible(true);
HXLINE( 427)			this->down->set_visible(true);
HXLINE( 428)			this->up->set_visible(true);
HXLINE( 430)			this->textLanguage->set_visible(false);
HXLINE( 431)			this->textLanguageCurrent->set_visible(false);
HXLINE( 432)			this->textLanguageChoose->set_visible(false);
HXLINE( 433)			this->textLanguageChooseEN->set_visible(false);
HXLINE( 434)			this->textLanguageChooseRU->set_visible(false);
HXLINE( 435)			this->textDisplay->set_visible(false);
HXLINE( 436)			this->textDisplayFPS->set_visible(false);
HXLINE( 437)			this->textDisplayFPSCUR->set_visible(false);
HXLINE( 438)			this->displayBUTTONPLUS->set_visible(false);
HXLINE( 439)			this->displayBUTTONMINUS->set_visible(false);
HXLINE( 402)			goto _hx_goto_26;
            		}
            		if (  (_hx_switch_0==HX_("system",ef,96,e2,f2)) ){
HXLINE( 376)			this->systemSection->loadGraphic(HX_("assets/images/settings/systemCHOOSE.png",22,6a,4b,fc),null(),null(),null(),null(),null());
HXLINE( 377)			this->personalizationSection->loadGraphic(HX_("assets/images/settings/personalization.png",5e,d4,dc,58),null(),null(),null(),null(),null());
HXLINE( 378)			this->textPesonalizationWallpaper->set_visible(false);
HXLINE( 379)			this->wallpaperCURRENT->set_visible(false);
HXLINE( 380)			this->textWallpaperCurent->set_visible(false);
HXLINE( 381)			this->wal1->set_visible(false);
HXLINE( 382)			this->wal2->set_visible(false);
HXLINE( 383)			this->wal3->set_visible(false);
HXLINE( 384)			this->wal4->set_visible(false);
HXLINE( 385)			this->textTaskBar->set_visible(false);
HXLINE( 386)			this->textTaskBarChange->set_visible(false);
HXLINE( 387)			this->down->set_visible(false);
HXLINE( 388)			this->up->set_visible(false);
HXLINE( 389)			this->textLanguage->set_visible(true);
HXLINE( 390)			this->textLanguageCurrent->set_visible(true);
HXLINE( 391)			this->textLanguageChoose->set_visible(true);
HXLINE( 392)			this->textLanguageChooseEN->set_visible(true);
HXLINE( 393)			this->textLanguageChooseRU->set_visible(true);
HXLINE( 394)			this->textDisplay->set_visible(true);
HXLINE( 395)			this->textDisplayFPS->set_visible(true);
HXLINE( 396)			this->textDisplayFPSCUR->set_visible(true);
HXLINE( 397)			this->displayBUTTONPLUS->set_visible(true);
HXLINE( 398)			this->displayBUTTONMINUS->set_visible(true);
HXLINE( 399)			int curff = ( (int)(this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) );
HXLINE( 400)			::String _hx_tmp1;
HXDLIN( 400)			if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 400)				_hx_tmp1 = (HX_("",00,00,00,00) + curff);
            			}
            			else {
HXLINE( 400)				_hx_tmp1 = (HX_("",00,00,00,00) + curff);
            			}
HXDLIN( 400)			this->textDisplayFPSCUR->set_text(_hx_tmp1);
HXLINE( 375)			goto _hx_goto_26;
            		}
            		_hx_goto_26:;
HXLINE( 441)		this->bg->set_x(this->window->x);
HXLINE( 442)		this->bg->set_y(this->window->y);
HXLINE( 444)		this->systemSection->set_x((this->window->x + 14));
HXLINE( 445)		this->systemSection->set_y((this->window->y + 28));
HXLINE( 447)		this->back->set_x((this->window->x + 14));
HXLINE( 448)		this->back->set_y((this->window->y + 28));
HXLINE( 450)		this->personalizationSection->set_x((this->window->x + 14));
HXLINE( 451)		this->personalizationSection->set_y((this->window->y + 77));
HXLINE( 453)		this->textLanguage->set_x((this->window->x + 350));
HXLINE( 454)		this->textLanguage->set_y((this->window->y + 28));
HXLINE( 456)		this->textLanguageCurrent->set_x(this->textLanguage->x);
HXLINE( 457)		this->textLanguageCurrent->set_y((this->textLanguage->y + 45));
HXLINE( 459)		this->textLanguageChoose->set_x(this->textLanguage->x);
HXLINE( 460)		this->textLanguageChoose->set_y((this->textLanguage->y + 75));
HXLINE( 462)		Float _hx_tmp2;
HXDLIN( 462)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 462)			_hx_tmp2 = (this->textLanguageChoose->x + 235);
            		}
            		else {
HXLINE( 462)			_hx_tmp2 = (this->textLanguageChoose->x + 175);
            		}
HXDLIN( 462)		this->textLanguageChooseEN->set_x(_hx_tmp2);
HXLINE( 463)		this->textLanguageChooseEN->set_y((this->textLanguageChoose->y + 5));
HXLINE( 465)		Float _hx_tmp3;
HXDLIN( 465)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 465)			_hx_tmp3 = (this->textLanguageChoose->x + 335);
            		}
            		else {
HXLINE( 465)			_hx_tmp3 = (this->textLanguageChoose->x + 279);
            		}
HXDLIN( 465)		this->textLanguageChooseRU->set_x(_hx_tmp3);
HXLINE( 466)		this->textLanguageChooseRU->set_y((this->textLanguageChoose->y + 5));
HXLINE( 468)		this->textPesonalizationWallpaper->set_x((this->window->x + 350));
HXLINE( 469)		this->textPesonalizationWallpaper->set_y((this->window->y + 28));
HXLINE( 471)		this->wallpaperCURRENT->set_x(this->textPesonalizationWallpaper->x);
HXLINE( 472)		this->wallpaperCURRENT->set_y((this->textPesonalizationWallpaper->y + 50));
HXLINE( 474)		this->textWallpaperCurent->set_x(this->wallpaperCURRENT->x);
HXLINE( 475)		this->textWallpaperCurent->set_y((this->wallpaperCURRENT->y + 250));
HXLINE( 477)		this->wal1->set_x(this->textWallpaperCurent->x);
HXLINE( 478)		this->wal1->set_y((this->textWallpaperCurent->y + 25));
HXLINE( 480)		this->wal2->set_x((this->textWallpaperCurent->x + 55));
HXLINE( 481)		this->wal2->set_y((this->textWallpaperCurent->y + 25));
HXLINE( 483)		this->wal3->set_x((this->textWallpaperCurent->x + 110));
HXLINE( 484)		this->wal3->set_y((this->textWallpaperCurent->y + 25));
HXLINE( 486)		this->wal4->set_x((this->textWallpaperCurent->x + 165));
HXLINE( 487)		this->wal4->set_y((this->textWallpaperCurent->y + 25));
HXLINE( 489)		this->textTaskBar->set_x(this->wal1->x);
HXLINE( 490)		this->textTaskBar->set_y((this->wal1->y + 45));
HXLINE( 493)		this->textTaskBarChange->set_x(this->wal1->x);
HXLINE( 494)		this->textTaskBarChange->set_y((this->textTaskBar->y + 40));
HXLINE( 496)		Float _hx_tmp4;
HXDLIN( 496)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 496)			_hx_tmp4 = (this->textTaskBarChange->x + 180);
            		}
            		else {
HXLINE( 496)			_hx_tmp4 = (this->textTaskBarChange->x + 325);
            		}
HXDLIN( 496)		this->up->set_x(_hx_tmp4);
HXLINE( 497)		this->up->set_y((this->textTaskBarChange->y + 5));
HXLINE( 499)		Float _hx_tmp5;
HXDLIN( 499)		if (::hx::IsEq( this->l->__Field(HX_("curLanguage",f8,41,50,fb),::hx::paccDynamic),HX_("en",69,58,00,00) )) {
HXLINE( 499)			_hx_tmp5 = (this->textTaskBarChange->x + 250);
            		}
            		else {
HXLINE( 499)			_hx_tmp5 = (this->textTaskBarChange->x + 390);
            		}
HXDLIN( 499)		this->down->set_x(_hx_tmp5);
HXLINE( 500)		this->down->set_y((this->textTaskBarChange->y + 5));
HXLINE( 502)		this->textDisplay->set_x((this->window->x + 350));
HXLINE( 503)		this->textDisplay->set_y((this->textLanguageChoose->y + 35));
HXLINE( 505)		this->textDisplayFPS->set_x(this->textDisplay->x);
HXLINE( 506)		this->textDisplayFPS->set_y((this->textDisplay->y + 50));
HXLINE( 508)		this->textDisplayFPSCUR->set_x((this->textDisplayFPS->x + 65));
HXLINE( 509)		this->textDisplayFPSCUR->set_y(this->textDisplayFPS->y);
HXLINE( 511)		this->displayBUTTONPLUS->set_x((this->textDisplayFPSCUR->x + 75));
HXLINE( 512)		this->displayBUTTONPLUS->set_y((this->textDisplayFPSCUR->y + 5));
HXLINE( 514)		this->displayBUTTONMINUS->set_x((this->textDisplayFPSCUR->x + 50));
HXLINE( 515)		this->displayBUTTONMINUS->set_y((this->textDisplayFPSCUR->y + 5));
HXLINE( 517)		::flixel::FlxG_obj::set_drawFramerate(( (int)(this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ));
HXLINE( 518)		::flixel::FlxG_obj::set_updateFramerate(( (int)(this->l->__Field(HX_("FPS",c9,63,35,00),::hx::paccDynamic)) ));
            	}


void SettingsApplication_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_14dc48847aae1af1_520_destroy)
HXLINE( 521)		this->super::destroy();
HXLINE( 522)		::App_obj::listApplications->remove(HX_("settings",e3,7c,3d,8b));
            	}



::hx::ObjectPtr< SettingsApplication_obj > SettingsApplication_obj::__new() {
	::hx::ObjectPtr< SettingsApplication_obj > __this = new SettingsApplication_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< SettingsApplication_obj > SettingsApplication_obj::__alloc(::hx::Ctx *_hx_ctx) {
	SettingsApplication_obj *__this = (SettingsApplication_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SettingsApplication_obj), true, "applications.SettingsApplication"));
	*(void **)__this = SettingsApplication_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SettingsApplication_obj::SettingsApplication_obj()
{
}

void SettingsApplication_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SettingsApplication);
	HX_MARK_MEMBER_NAME(currentSection,"currentSection");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(systemSection,"systemSection");
	HX_MARK_MEMBER_NAME(personalizationSection,"personalizationSection");
	HX_MARK_MEMBER_NAME(textPesonalizationWallpaper,"textPesonalizationWallpaper");
	HX_MARK_MEMBER_NAME(wallpaperCURRENT,"wallpaperCURRENT");
	HX_MARK_MEMBER_NAME(textWallpaperCurent,"textWallpaperCurent");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(l,"l");
	HX_MARK_MEMBER_NAME(wal1,"wal1");
	HX_MARK_MEMBER_NAME(wal2,"wal2");
	HX_MARK_MEMBER_NAME(wal3,"wal3");
	HX_MARK_MEMBER_NAME(wal4,"wal4");
	HX_MARK_MEMBER_NAME(back,"back");
	HX_MARK_MEMBER_NAME(textTaskBar,"textTaskBar");
	HX_MARK_MEMBER_NAME(textTaskBarChange,"textTaskBarChange");
	HX_MARK_MEMBER_NAME(up,"up");
	HX_MARK_MEMBER_NAME(down,"down");
	HX_MARK_MEMBER_NAME(textLanguage,"textLanguage");
	HX_MARK_MEMBER_NAME(textLanguageCurrent,"textLanguageCurrent");
	HX_MARK_MEMBER_NAME(textLanguageChoose,"textLanguageChoose");
	HX_MARK_MEMBER_NAME(textLanguageChooseRU,"textLanguageChooseRU");
	HX_MARK_MEMBER_NAME(textLanguageChooseEN,"textLanguageChooseEN");
	HX_MARK_MEMBER_NAME(messageBox,"messageBox");
	HX_MARK_MEMBER_NAME(textDisplay,"textDisplay");
	HX_MARK_MEMBER_NAME(textDisplayFPS,"textDisplayFPS");
	HX_MARK_MEMBER_NAME(textDisplayFPSCUR,"textDisplayFPSCUR");
	HX_MARK_MEMBER_NAME(displayBUTTONMINUS,"displayBUTTONMINUS");
	HX_MARK_MEMBER_NAME(displayBUTTONPLUS,"displayBUTTONPLUS");
	 ::App_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SettingsApplication_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentSection,"currentSection");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(systemSection,"systemSection");
	HX_VISIT_MEMBER_NAME(personalizationSection,"personalizationSection");
	HX_VISIT_MEMBER_NAME(textPesonalizationWallpaper,"textPesonalizationWallpaper");
	HX_VISIT_MEMBER_NAME(wallpaperCURRENT,"wallpaperCURRENT");
	HX_VISIT_MEMBER_NAME(textWallpaperCurent,"textWallpaperCurent");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(l,"l");
	HX_VISIT_MEMBER_NAME(wal1,"wal1");
	HX_VISIT_MEMBER_NAME(wal2,"wal2");
	HX_VISIT_MEMBER_NAME(wal3,"wal3");
	HX_VISIT_MEMBER_NAME(wal4,"wal4");
	HX_VISIT_MEMBER_NAME(back,"back");
	HX_VISIT_MEMBER_NAME(textTaskBar,"textTaskBar");
	HX_VISIT_MEMBER_NAME(textTaskBarChange,"textTaskBarChange");
	HX_VISIT_MEMBER_NAME(up,"up");
	HX_VISIT_MEMBER_NAME(down,"down");
	HX_VISIT_MEMBER_NAME(textLanguage,"textLanguage");
	HX_VISIT_MEMBER_NAME(textLanguageCurrent,"textLanguageCurrent");
	HX_VISIT_MEMBER_NAME(textLanguageChoose,"textLanguageChoose");
	HX_VISIT_MEMBER_NAME(textLanguageChooseRU,"textLanguageChooseRU");
	HX_VISIT_MEMBER_NAME(textLanguageChooseEN,"textLanguageChooseEN");
	HX_VISIT_MEMBER_NAME(messageBox,"messageBox");
	HX_VISIT_MEMBER_NAME(textDisplay,"textDisplay");
	HX_VISIT_MEMBER_NAME(textDisplayFPS,"textDisplayFPS");
	HX_VISIT_MEMBER_NAME(textDisplayFPSCUR,"textDisplayFPSCUR");
	HX_VISIT_MEMBER_NAME(displayBUTTONMINUS,"displayBUTTONMINUS");
	HX_VISIT_MEMBER_NAME(displayBUTTONPLUS,"displayBUTTONPLUS");
	 ::App_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SettingsApplication_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"l") ) { return ::hx::Val( l ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		if (HX_FIELD_EQ(inName,"up") ) { return ::hx::Val( up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"wal1") ) { return ::hx::Val( wal1 ); }
		if (HX_FIELD_EQ(inName,"wal2") ) { return ::hx::Val( wal2 ); }
		if (HX_FIELD_EQ(inName,"wal3") ) { return ::hx::Val( wal3 ); }
		if (HX_FIELD_EQ(inName,"wal4") ) { return ::hx::Val( wal4 ); }
		if (HX_FIELD_EQ(inName,"back") ) { return ::hx::Val( back ); }
		if (HX_FIELD_EQ(inName,"down") ) { return ::hx::Val( down ); }
		if (HX_FIELD_EQ(inName,"plus") ) { return ::hx::Val( plus_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"AddUI") ) { return ::hx::Val( AddUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"minus") ) { return ::hx::Val( minus_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"AddBoxRU") ) { return ::hx::Val( AddBoxRU_dyn() ); }
		if (HX_FIELD_EQ(inName,"AddBoxEN") ) { return ::hx::Val( AddBoxEN_dyn() ); }
		if (HX_FIELD_EQ(inName,"RemoveUI") ) { return ::hx::Val( RemoveUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"UpdateUI") ) { return ::hx::Val( UpdateUI_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"messageBox") ) { return ::hx::Val( messageBox ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textTaskBar") ) { return ::hx::Val( textTaskBar ); }
		if (HX_FIELD_EQ(inName,"textDisplay") ) { return ::hx::Val( textDisplay ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"textLanguage") ) { return ::hx::Val( textLanguage ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"systemSection") ) { return ::hx::Val( systemSection ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentSection") ) { return ::hx::Val( currentSection ); }
		if (HX_FIELD_EQ(inName,"textDisplayFPS") ) { return ::hx::Val( textDisplayFPS ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wallpaperCURRENT") ) { return ::hx::Val( wallpaperCURRENT ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"textTaskBarChange") ) { return ::hx::Val( textTaskBarChange ); }
		if (HX_FIELD_EQ(inName,"textDisplayFPSCUR") ) { return ::hx::Val( textDisplayFPSCUR ); }
		if (HX_FIELD_EQ(inName,"displayBUTTONPLUS") ) { return ::hx::Val( displayBUTTONPLUS ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"textLanguageChoose") ) { return ::hx::Val( textLanguageChoose ); }
		if (HX_FIELD_EQ(inName,"displayBUTTONMINUS") ) { return ::hx::Val( displayBUTTONMINUS ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"textWallpaperCurent") ) { return ::hx::Val( textWallpaperCurent ); }
		if (HX_FIELD_EQ(inName,"textLanguageCurrent") ) { return ::hx::Val( textLanguageCurrent ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"textLanguageChooseRU") ) { return ::hx::Val( textLanguageChooseRU ); }
		if (HX_FIELD_EQ(inName,"textLanguageChooseEN") ) { return ::hx::Val( textLanguageChooseEN ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"personalizationSection") ) { return ::hx::Val( personalizationSection ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"textPesonalizationWallpaper") ) { return ::hx::Val( textPesonalizationWallpaper ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SettingsApplication_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"l") ) { l=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"up") ) { up=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"wal1") ) { wal1=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wal2") ) { wal2=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wal3") ) { wal3=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wal4") ) { wal4=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"back") ) { back=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"down") ) { down=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::CustomWindow >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"messageBox") ) { messageBox=inValue.Cast<  ::MessageBox >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textTaskBar") ) { textTaskBar=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textDisplay") ) { textDisplay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"textLanguage") ) { textLanguage=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"systemSection") ) { systemSection=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentSection") ) { currentSection=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textDisplayFPS") ) { textDisplayFPS=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wallpaperCURRENT") ) { wallpaperCURRENT=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"textTaskBarChange") ) { textTaskBarChange=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textDisplayFPSCUR") ) { textDisplayFPSCUR=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"displayBUTTONPLUS") ) { displayBUTTONPLUS=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"textLanguageChoose") ) { textLanguageChoose=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"displayBUTTONMINUS") ) { displayBUTTONMINUS=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"textWallpaperCurent") ) { textWallpaperCurent=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textLanguageCurrent") ) { textLanguageCurrent=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"textLanguageChooseRU") ) { textLanguageChooseRU=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textLanguageChooseEN") ) { textLanguageChooseEN=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"personalizationSection") ) { personalizationSection=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"textPesonalizationWallpaper") ) { textPesonalizationWallpaper=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SettingsApplication_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentSection",ac,7a,6c,6b));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("systemSection",b6,e2,7d,2d));
	outFields->push(HX_("personalizationSection",e1,38,43,63));
	outFields->push(HX_("textPesonalizationWallpaper",f9,e4,39,91));
	outFields->push(HX_("wallpaperCURRENT",17,7e,16,4f));
	outFields->push(HX_("textWallpaperCurent",20,24,ab,ce));
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("l",6c,00,00,00));
	outFields->push(HX_("wal1",cf,5c,f2,4e));
	outFields->push(HX_("wal2",d0,5c,f2,4e));
	outFields->push(HX_("wal3",d1,5c,f2,4e));
	outFields->push(HX_("wal4",d2,5c,f2,4e));
	outFields->push(HX_("back",27,da,10,41));
	outFields->push(HX_("textTaskBar",61,be,d8,f9));
	outFields->push(HX_("textTaskBarChange",b1,42,a4,87));
	outFields->push(HX_("up",5b,66,00,00));
	outFields->push(HX_("down",62,f8,6d,42));
	outFields->push(HX_("textLanguage",25,fe,8c,ae));
	outFields->push(HX_("textLanguageCurrent",94,04,ae,65));
	outFields->push(HX_("textLanguageChoose",dc,76,42,63));
	outFields->push(HX_("textLanguageChooseRU",9f,2d,f3,91));
	outFields->push(HX_("textLanguageChooseEN",45,22,f3,91));
	outFields->push(HX_("messageBox",84,d6,99,d2));
	outFields->push(HX_("textDisplay",15,25,ca,96));
	outFields->push(HX_("textDisplayFPS",d4,d9,71,c6));
	outFields->push(HX_("textDisplayFPSCUR",0c,24,d0,11));
	outFields->push(HX_("displayBUTTONMINUS",1c,36,6e,c9));
	outFields->push(HX_("displayBUTTONPLUS",0e,47,3b,ee));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SettingsApplication_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(SettingsApplication_obj,currentSection),HX_("currentSection",ac,7a,6c,6b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SettingsApplication_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,systemSection),HX_("systemSection",b6,e2,7d,2d)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,personalizationSection),HX_("personalizationSection",e1,38,43,63)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textPesonalizationWallpaper),HX_("textPesonalizationWallpaper",f9,e4,39,91)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SettingsApplication_obj,wallpaperCURRENT),HX_("wallpaperCURRENT",17,7e,16,4f)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textWallpaperCurent),HX_("textWallpaperCurent",20,24,ab,ce)},
	{::hx::fsObject /*  ::CustomWindow */ ,(int)offsetof(SettingsApplication_obj,window),HX_("window",f0,93,8c,52)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SettingsApplication_obj,l),HX_("l",6c,00,00,00)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,wal1),HX_("wal1",cf,5c,f2,4e)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,wal2),HX_("wal2",d0,5c,f2,4e)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,wal3),HX_("wal3",d1,5c,f2,4e)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,wal4),HX_("wal4",d2,5c,f2,4e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SettingsApplication_obj,back),HX_("back",27,da,10,41)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textTaskBar),HX_("textTaskBar",61,be,d8,f9)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textTaskBarChange),HX_("textTaskBarChange",b1,42,a4,87)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,up),HX_("up",5b,66,00,00)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,down),HX_("down",62,f8,6d,42)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textLanguage),HX_("textLanguage",25,fe,8c,ae)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textLanguageCurrent),HX_("textLanguageCurrent",94,04,ae,65)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textLanguageChoose),HX_("textLanguageChoose",dc,76,42,63)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,textLanguageChooseRU),HX_("textLanguageChooseRU",9f,2d,f3,91)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,textLanguageChooseEN),HX_("textLanguageChooseEN",45,22,f3,91)},
	{::hx::fsObject /*  ::MessageBox */ ,(int)offsetof(SettingsApplication_obj,messageBox),HX_("messageBox",84,d6,99,d2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textDisplay),HX_("textDisplay",15,25,ca,96)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textDisplayFPS),HX_("textDisplayFPS",d4,d9,71,c6)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SettingsApplication_obj,textDisplayFPSCUR),HX_("textDisplayFPSCUR",0c,24,d0,11)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,displayBUTTONMINUS),HX_("displayBUTTONMINUS",1c,36,6e,c9)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(SettingsApplication_obj,displayBUTTONPLUS),HX_("displayBUTTONPLUS",0e,47,3b,ee)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SettingsApplication_obj_sStaticStorageInfo = 0;
#endif

static ::String SettingsApplication_obj_sMemberFields[] = {
	HX_("currentSection",ac,7a,6c,6b),
	HX_("bg",c5,55,00,00),
	HX_("systemSection",b6,e2,7d,2d),
	HX_("personalizationSection",e1,38,43,63),
	HX_("textPesonalizationWallpaper",f9,e4,39,91),
	HX_("wallpaperCURRENT",17,7e,16,4f),
	HX_("textWallpaperCurent",20,24,ab,ce),
	HX_("window",f0,93,8c,52),
	HX_("l",6c,00,00,00),
	HX_("wal1",cf,5c,f2,4e),
	HX_("wal2",d0,5c,f2,4e),
	HX_("wal3",d1,5c,f2,4e),
	HX_("wal4",d2,5c,f2,4e),
	HX_("back",27,da,10,41),
	HX_("textTaskBar",61,be,d8,f9),
	HX_("textTaskBarChange",b1,42,a4,87),
	HX_("up",5b,66,00,00),
	HX_("down",62,f8,6d,42),
	HX_("textLanguage",25,fe,8c,ae),
	HX_("textLanguageCurrent",94,04,ae,65),
	HX_("textLanguageChoose",dc,76,42,63),
	HX_("textLanguageChooseRU",9f,2d,f3,91),
	HX_("textLanguageChooseEN",45,22,f3,91),
	HX_("messageBox",84,d6,99,d2),
	HX_("textDisplay",15,25,ca,96),
	HX_("textDisplayFPS",d4,d9,71,c6),
	HX_("textDisplayFPSCUR",0c,24,d0,11),
	HX_("displayBUTTONMINUS",1c,36,6e,c9),
	HX_("displayBUTTONPLUS",0e,47,3b,ee),
	HX_("AddUI",95,36,71,af),
	HX_("plus",5a,3f,5a,4a),
	HX_("minus",70,80,68,08),
	HX_("AddBoxRU",cd,c0,0d,0a),
	HX_("AddBoxEN",73,b5,0d,0a),
	HX_("RemoveUI",b8,3b,cd,86),
	HX_("UpdateUI",bd,e0,ab,51),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class SettingsApplication_obj::__mClass;

void SettingsApplication_obj::__register()
{
	SettingsApplication_obj _hx_dummy;
	SettingsApplication_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("applications.SettingsApplication",42,46,c4,d9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SettingsApplication_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SettingsApplication_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SettingsApplication_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SettingsApplication_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace applications
