// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_App
#include <App.h>
#endif
#ifndef INCLUDED_TaskBar
#include <TaskBar.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_states_WindowsState
#include <states/WindowsState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0abeb4348f94afc8_7_new,"App","new",0xf28829f3,"App.new","App.hx",7,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_0abeb4348f94afc8_15_taskbar,"App","taskbar",0x882d2ac1,"App.taskbar","App.hx",15,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_0abeb4348f94afc8_35_createNewItem,"App","createNewItem",0x6c04794a,"App.createNewItem","App.hx",35,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_0abeb4348f94afc8_45_updateItems,"App","updateItems",0xfbf9b9ca,"App.updateItems","App.hx",45,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_0abeb4348f94afc8_9_boot,"App","boot",0x3cb58b3f,"App.boot","App.hx",9,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_0abeb4348f94afc8_10_boot,"App","boot",0x3cb58b3f,"App.boot","App.hx",10,0xc43e94dd)
static const ::String _hx_array_data_0031b481_7[] = {
	HX_("cmd",7a,7e,4b,00),HX_("settings",e3,7c,3d,8b),HX_("calc",95,18,ba,41),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0abeb4348f94afc8_12_boot,"App","boot",0x3cb58b3f,"App.boot","App.hx",12,0xc43e94dd)

void App_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_0abeb4348f94afc8_7_new)
HXLINE(  11)		this->nameApp = HX_("",00,00,00,00);
HXLINE(   7)		super::__construct(MaxSize);
            	}

Dynamic App_obj::__CreateEmpty() { return new App_obj; }

void *App_obj::_hx_vtable = 0;

Dynamic App_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< App_obj > _hx_result = new App_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool App_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7ed5f915;
	}
}

void App_obj::taskbar(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_0abeb4348f94afc8_15_taskbar)
HXLINE(  16)		::App_obj::listApplications->push(name);
HXLINE(  17)		this->nameApp = name;
HXLINE(  18)		::haxe::Log_obj::trace(::App_obj::listApplications,::hx::SourceInfo(HX_("source/App.hx",d1,52,3b,e9),18,HX_("App",81,b4,31,00),HX_("taskbar",ae,0b,71,1e)));
HXLINE(  20)		this->items =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  21)		this->add(this->items);
HXLINE(  23)		{
HXLINE(  23)			int _g_current = 0;
HXDLIN(  23)			::Array< ::String > _g_array = ::App_obj::listApplications;
HXDLIN(  23)			while((_g_current < _g_array->length)){
HXLINE(  23)				::String _g_value = _g_array->__get(_g_current);
HXDLIN(  23)				_g_current = (_g_current + 1);
HXDLIN(  23)				int _g_key = (_g_current - 1);
HXDLIN(  23)				int num = _g_key;
HXDLIN(  23)				::String i = _g_value;
HXLINE(  24)				{
HXLINE(  25)					Float item;
HXDLIN(  25)					if ((::App_obj::isWindowsState == true)) {
HXLINE(  25)						item = ::states::WindowsState_obj::taskBar->mainpart->y;
            					}
            					else {
HXLINE(  25)						item = ( (Float)(2000) );
            					}
HXDLIN(  25)					 ::flixel::ui::FlxButton item1 = this->createNewItem(( (Float)(((num * 50) + 50)) ),item,i);
HXLINE(  26)					this->add(item1);
HXLINE(  28)					 ::Dynamic up;
HXDLIN(  28)					if ((::App_obj::isWindowsState == true)) {
HXLINE(  28)						up = ::states::WindowsState_obj::taskBar->mainpart->y;
            					}
            					else {
HXLINE(  28)						up = 2000;
            					}
HXDLIN(  28)					 ::flixel::FlxSprite up1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((num * 50) + 50),up,HX_("assets/images/icons/app.png",5c,98,93,2a));
HXLINE(  29)					up1->updateHitbox();
HXLINE(  30)					this->add(up1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,taskbar,(void))

 ::flixel::ui::FlxButton App_obj::createNewItem(Float x,Float y,::String name){
            	HX_GC_STACKFRAME(&_hx_pos_0abeb4348f94afc8_35_createNewItem)
HXLINE(  36)		 ::flixel::ui::FlxButton item =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,x,y,null(),null());
HXLINE(  37)		item->loadGraphic(((HX_("assets/images/icons/",00,b6,a7,8a) + name) + HX_(".png",3b,2d,bd,1e)),null(),null(),null(),null(),null());
HXLINE(  38)		item->setGraphicSize(40,40);
HXLINE(  39)		item->updateHitbox();
HXLINE(  40)		this->items->add(item).StaticCast<  ::flixel::ui::FlxButton >();
HXLINE(  41)		return item;
            	}


HX_DEFINE_DYNAMIC_FUNC3(App_obj,createNewItem,return )

void App_obj::updateItems(){
            	HX_STACKFRAME(&_hx_pos_0abeb4348f94afc8_45_updateItems)
HXDLIN(  45)		this->items->kill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,updateItems,(void))

::Array< ::String > App_obj::listApplications;

::Array< ::String > App_obj::Apps;

bool App_obj::isWindowsState;


::hx::ObjectPtr< App_obj > App_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< App_obj > __this = new App_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< App_obj > App_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	App_obj *__this = (App_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(App_obj), true, "App"));
	*(void **)__this = App_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

App_obj::App_obj()
{
}

void App_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(App);
	HX_MARK_MEMBER_NAME(nameApp,"nameApp");
	HX_MARK_MEMBER_NAME(items,"items");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void App_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nameApp,"nameApp");
	HX_VISIT_MEMBER_NAME(items,"items");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val App_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { return ::hx::Val( items ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nameApp") ) { return ::hx::Val( nameApp ); }
		if (HX_FIELD_EQ(inName,"taskbar") ) { return ::hx::Val( taskbar_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateItems") ) { return ::hx::Val( updateItems_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createNewItem") ) { return ::hx::Val( createNewItem_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool App_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"Apps") ) { outValue = ( Apps ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isWindowsState") ) { outValue = ( isWindowsState ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"listApplications") ) { outValue = ( listApplications ); return true; }
	}
	return false;
}

::hx::Val App_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { items=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nameApp") ) { nameApp=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool App_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"Apps") ) { Apps=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isWindowsState") ) { isWindowsState=ioValue.Cast< bool >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"listApplications") ) { listApplications=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void App_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nameApp",16,83,78,ac));
	outFields->push(HX_("items",00,ac,0c,c2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo App_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(App_obj,nameApp),HX_("nameApp",16,83,78,ac)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(App_obj,items),HX_("items",00,ac,0c,c2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo App_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &App_obj::listApplications,HX_("listApplications",a1,b8,44,c7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &App_obj::Apps,HX_("Apps",d2,3c,4c,2b)},
	{::hx::fsBool,(void *) &App_obj::isWindowsState,HX_("isWindowsState",98,6b,c1,9b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String App_obj_sMemberFields[] = {
	HX_("nameApp",16,83,78,ac),
	HX_("items",00,ac,0c,c2),
	HX_("taskbar",ae,0b,71,1e),
	HX_("createNewItem",f7,49,cf,dd),
	HX_("updateItems",37,15,a5,a7),
	::String(null()) };

static void App_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(App_obj::listApplications,"listApplications");
	HX_MARK_MEMBER_NAME(App_obj::Apps,"Apps");
	HX_MARK_MEMBER_NAME(App_obj::isWindowsState,"isWindowsState");
};

#ifdef HXCPP_VISIT_ALLOCS
static void App_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(App_obj::listApplications,"listApplications");
	HX_VISIT_MEMBER_NAME(App_obj::Apps,"Apps");
	HX_VISIT_MEMBER_NAME(App_obj::isWindowsState,"isWindowsState");
};

#endif

::hx::Class App_obj::__mClass;

static ::String App_obj_sStaticFields[] = {
	HX_("listApplications",a1,b8,44,c7),
	HX_("Apps",d2,3c,4c,2b),
	HX_("isWindowsState",98,6b,c1,9b),
	::String(null())
};

void App_obj::__register()
{
	App_obj _hx_dummy;
	App_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("App",81,b4,31,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &App_obj::__GetStatic;
	__mClass->mSetStaticField = &App_obj::__SetStatic;
	__mClass->mMarkFunc = App_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(App_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(App_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< App_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = App_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = App_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = App_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void App_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0abeb4348f94afc8_9_boot)
HXDLIN(   9)		listApplications = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0abeb4348f94afc8_10_boot)
HXDLIN(  10)		Apps = ::Array_obj< ::String >::fromData( _hx_array_data_0031b481_7,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0abeb4348f94afc8_12_boot)
HXDLIN(  12)		isWindowsState = false;
            	}
}

